
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  000059fc  00005a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  008001ce  008001ce  00005bfe  2**0
                  ALLOC
  3 .stab         00006198  00000000  00000000  00005c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002aa6  00000000  00000000  0000bd98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000e83e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  0000ea5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  0000ecd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  00011628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  00012cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00014250  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  00014490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  000147fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000153eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__vector_4>
      14:	0c 94 16 10 	jmp	0x202c	; 0x202c <__vector_5>
      18:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__vector_6>
      1c:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__vector_7>
      20:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__vector_8>
      24:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__vector_9>
      28:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__vector_10>
      2c:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__vector_11>
      30:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__vector_12>
      34:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_15>
      40:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f9 e5       	ldi	r31, 0x59	; 89
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 2b 	call	0x5612	; 0x5612 <main>
      8a:	0c 94 fc 2c 	jmp	0x59f8	; 0x59f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 c5 2c 	jmp	0x598a	; 0x598a <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 e1 2c 	jmp	0x59c2	; 0x59c2 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 c5 2c 	jmp	0x598a	; 0x598a <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	a5 e7       	ldi	r26, 0x75	; 117
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 e1 2c 	jmp	0x59c2	; 0x59c2 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 c5 2c 	jmp	0x598a	; 0x598a <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	85 e7       	ldi	r24, 0x75	; 117
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 e1 2c 	jmp	0x59c2	; 0x59c2 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 cd 2c 	jmp	0x599a	; 0x599a <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	65 e7       	ldi	r22, 0x75	; 117
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 ce 2c 	jmp	0x599c	; 0x599c <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 ea 2c 	jmp	0x59d4	; 0x59d4 <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 d5 2c 	jmp	0x59aa	; 0x59aa <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 f1 2c 	jmp	0x59e2	; 0x59e2 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 cd 2c 	jmp	0x599a	; 0x599a <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	e3 58       	subi	r30, 0x83	; 131
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <USART_vInit>:
 * Breif      : This Function initialize USART depend on config.h
 * Parameters :  Nothing
 * return     :  Nothing
 */
void USART_vInit(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <USART_vInit+0x6>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
  /* We will adjust this value according to the configrations then store it in UCSRC in one operation */
  u8 Local_u8UCSRC = 0;
    122c:	1b 82       	std	Y+3, r1	; 0x03

  /***** Check 3 Modes   *****/
#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_1X)

  CLR_BIT(UCSRA, UCSRA_U2X);
    122e:	ab e2       	ldi	r26, 0x2B	; 43
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e2       	ldi	r30, 0x2B	; 43
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	8c 93       	st	X, r24

  /*Calculate The Baud Rate From The Equation */
  u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1);
    123c:	83 e3       	ldi	r24, 0x33	; 51
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9a 83       	std	Y+2, r25	; 0x02
    1242:	89 83       	std	Y+1, r24	; 0x01
#endif
  /*
      $ Set Baud Rate
      Hint : UBRRH then UBRRL to avoid problems
   */
  UBRRH = (u8)(Local_u16UBRR << 8); /* MSBs at Local_u16UBRR */
    1244:	e0 e4       	ldi	r30, 0x40	; 64
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	10 82       	st	Z, r1
  UBRRL = (u8)Local_u16UBRR;
    124a:	e9 e2       	ldi	r30, 0x29	; 41
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	80 83       	st	Z, r24
  /*___________________________________________________________________________________________________________________*/

  /*Multi-Processor Communication mode*/
#if USART_MPCM == DISABLE
  CLR_BIT(UCSRA, UCSRA_MPCM);
    1252:	ab e2       	ldi	r26, 0x2B	; 43
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	eb e2       	ldi	r30, 0x2B	; 43
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8e 7f       	andi	r24, 0xFE	; 254
    125e:	8c 93       	st	X, r24

  /*UCSRC Register Config*/

  /*USART Mode*/
#if USART_MODE == ASYNCHRONOUS
  CLR_BIT(Local_u8UCSRC, UCSRC_UMSEL);
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	8f 7b       	andi	r24, 0xBF	; 191
    1264:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Parity Mode*/
#if USART_PARITY_MODE == DISABLE

  CLR_BIT(Local_u8UCSRC, UCSRC_UPM0);
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	8f 7e       	andi	r24, 0xEF	; 239
    126a:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(Local_u8UCSRC, UCSRC_UPM1);
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Stop Bit*/
#if USART_STOP_BIT == STOP_BIT_1

  CLR_BIT(Local_u8UCSRC, UCSRC_USBS);
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	87 7f       	andi	r24, 0xF7	; 247
    1276:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
  CLR_BIT(UCSRB, UCSRB_UCSZ2);

#elif USART_DATA_SIZE == DATA_SIZE_8_BIT

  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	82 60       	ori	r24, 0x02	; 2
    127c:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(UCSRB, UCSRB_UCSZ2);
    1284:	aa e2       	ldi	r26, 0x2A	; 42
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ea e2       	ldi	r30, 0x2A	; 42
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8b 7f       	andi	r24, 0xFB	; 251
    1290:	8c 93       	st	X, r24
#endif

#endif

  /*Set UCSRC Mode*/
  SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	8b 83       	std	Y+3, r24	; 0x03

  /*Store the value in UCSRC Register (one operation) */
  UCSRC = Local_u8UCSRC;
    1298:	e0 e4       	ldi	r30, 0x40	; 64
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24

  /* Finally Enable the components */

  /*RX Complete Interrupt Enable*/
#if USART_RX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_RXCIE);
    12a0:	aa e2       	ldi	r26, 0x2A	; 42
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ea e2       	ldi	r30, 0x2A	; 42
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 77       	andi	r24, 0x7F	; 127
    12ac:	8c 93       	st	X, r24
#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
#endif

  /*TX Complete Interrupt Enable*/
#if USART_TX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_TXCIE);
    12ae:	aa e2       	ldi	r26, 0x2A	; 42
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ea e2       	ldi	r30, 0x2A	; 42
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 7b       	andi	r24, 0xBF	; 191
    12ba:	8c 93       	st	X, r24
#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
#endif

  /*UDR Empty Interrupt Enable*/
#if USART_UDR_EMPTY_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_UDRIE);
    12bc:	aa e2       	ldi	r26, 0x2A	; 42
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e2       	ldi	r30, 0x2A	; 42
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 7d       	andi	r24, 0xDF	; 223
    12c8:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_RXEN);

#elif USART_RECEIVER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_RXEN);
    12ca:	aa e2       	ldi	r26, 0x2A	; 42
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ea e2       	ldi	r30, 0x2A	; 42
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	80 61       	ori	r24, 0x10	; 16
    12d6:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_TXEN);

#elif USART_TRANSMITTER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_TXEN);
    12d8:	aa e2       	ldi	r26, 0x2A	; 42
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ea e2       	ldi	r30, 0x2A	; 42
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	88 60       	ori	r24, 0x08	; 8
    12e4:	8c 93       	st	X, r24
#else

#error "Wrong USART_TRANSMITTER_ENABLE config"

#endif
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <USART_u8SendData>:
 *		Copy_u8Data => Data to be send
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendData(u8 Copy_u8Data)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <USART_u8SendData+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <USART_u8SendData+0x8>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <USART_u8SendData+0xa>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    1302:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	1a 82       	std	Y+2, r1	; 0x02
    1308:	1b 82       	std	Y+3, r1	; 0x03
    130a:	1c 82       	std	Y+4, r1	; 0x04

  if (USART_u8State == IDLE)
    130c:	80 91 d4 01 	lds	r24, 0x01D4
    1310:	88 23       	and	r24, r24
    1312:	09 f0       	breq	.+2      	; 0x1316 <USART_u8SendData+0x24>
    1314:	44 c0       	rjmp	.+136    	; 0x139e <USART_u8SendData+0xac>
  {
    USART_u8State = BUSY;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 d4 01 	sts	0x01D4, r24
    131c:	0b c0       	rjmp	.+22     	; 0x1334 <USART_u8SendData+0x42>
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    {
      Local_u32TimeoutCounter++;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	ab 81       	ldd	r26, Y+3	; 0x03
    1324:	bc 81       	ldd	r27, Y+4	; 0x04
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	a1 1d       	adc	r26, r1
    132a:	b1 1d       	adc	r27, r1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	ab 83       	std	Y+3, r26	; 0x03
    1332:	bc 83       	std	Y+4, r27	; 0x04

    /*
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1334:	eb e2       	ldi	r30, 0x2B	; 43
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	80 72       	andi	r24, 0x20	; 32
    1340:	90 70       	andi	r25, 0x00	; 0
    1342:	95 95       	asr	r25
    1344:	87 95       	ror	r24
    1346:	95 95       	asr	r25
    1348:	87 95       	ror	r24
    134a:	95 95       	asr	r25
    134c:	87 95       	ror	r24
    134e:	95 95       	asr	r25
    1350:	87 95       	ror	r24
    1352:	95 95       	asr	r25
    1354:	87 95       	ror	r24
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	61 f4       	brne	.+24     	; 0x1372 <USART_u8SendData+0x80>
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	ab 81       	ldd	r26, Y+3	; 0x03
    1360:	bc 81       	ldd	r27, Y+4	; 0x04
    1362:	80 31       	cpi	r24, 0x10	; 16
    1364:	27 e2       	ldi	r18, 0x27	; 39
    1366:	92 07       	cpc	r25, r18
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	a2 07       	cpc	r26, r18
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	b2 07       	cpc	r27, r18
    1370:	b1 f6       	brne	.-84     	; 0x131e <USART_u8SendData+0x2c>
    {
      Local_u32TimeoutCounter++;
    }

    if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	ab 81       	ldd	r26, Y+3	; 0x03
    1378:	bc 81       	ldd	r27, Y+4	; 0x04
    137a:	80 31       	cpi	r24, 0x10	; 16
    137c:	27 e2       	ldi	r18, 0x27	; 39
    137e:	92 07       	cpc	r25, r18
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	a2 07       	cpc	r26, r18
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	b2 07       	cpc	r27, r18
    1388:	19 f4       	brne	.+6      	; 0x1390 <USART_u8SendData+0x9e>
    {
      Local_u8ErrorState = TIMEOUT_STATE;
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <USART_u8SendData+0xa6>
    }
    else
    {
      UDR = Copy_u8Data;
    1390:	ec e2       	ldi	r30, 0x2C	; 44
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	80 83       	st	Z, r24
    }

    USART_u8State = IDLE;
    1398:	10 92 d4 01 	sts	0x01D4, r1
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <USART_u8SendData+0xb0>
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13a4:	26 96       	adiw	r28, 0x06	; 6
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <USART_u8ReceiveData>:
 *		Copy_u8ReceivedData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveData(u8 *Copy_u8ReceivedData)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	27 97       	sbiw	r28, 0x07	; 7
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	9f 83       	std	Y+7, r25	; 0x07
    13cc:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    13ce:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	1a 82       	std	Y+2, r1	; 0x02
    13d4:	1b 82       	std	Y+3, r1	; 0x03
    13d6:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_u8ReceivedData != NULL)
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	09 f4       	brne	.+2      	; 0x13e2 <USART_u8ReceiveData+0x2c>
    13e0:	46 c0       	rjmp	.+140    	; 0x146e <USART_u8ReceiveData+0xb8>
  {
    if (USART_u8State == IDLE)
    13e2:	80 91 d4 01 	lds	r24, 0x01D4
    13e6:	88 23       	and	r24, r24
    13e8:	09 f0       	breq	.+2      	; 0x13ec <USART_u8ReceiveData+0x36>
    13ea:	3e c0       	rjmp	.+124    	; 0x1468 <USART_u8ReceiveData+0xb2>
    {
      USART_u8State = BUSY;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 93 d4 01 	sts	0x01D4, r24
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <USART_u8ReceiveData+0x54>

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
      {
        Local_u32TimeoutCounter++;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	ab 81       	ldd	r26, Y+3	; 0x03
    13fa:	bc 81       	ldd	r27, Y+4	; 0x04
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	a1 1d       	adc	r26, r1
    1400:	b1 1d       	adc	r27, r1
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	ab 83       	std	Y+3, r26	; 0x03
    1408:	bc 83       	std	Y+4, r27	; 0x04
    if (USART_u8State == IDLE)
    {
      USART_u8State = BUSY;

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    140a:	eb e2       	ldi	r30, 0x2B	; 43
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 1f       	adc	r24, r24
    1412:	88 27       	eor	r24, r24
    1414:	88 1f       	adc	r24, r24
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	90 70       	andi	r25, 0x00	; 0
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	61 f4       	brne	.+24     	; 0x1438 <USART_u8ReceiveData+0x82>
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	ab 81       	ldd	r26, Y+3	; 0x03
    1426:	bc 81       	ldd	r27, Y+4	; 0x04
    1428:	80 31       	cpi	r24, 0x10	; 16
    142a:	27 e2       	ldi	r18, 0x27	; 39
    142c:	92 07       	cpc	r25, r18
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	a2 07       	cpc	r26, r18
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	b2 07       	cpc	r27, r18
    1436:	f1 f6       	brne	.-68     	; 0x13f4 <USART_u8ReceiveData+0x3e>
      {
        Local_u32TimeoutCounter++;
      }

      if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	ab 81       	ldd	r26, Y+3	; 0x03
    143e:	bc 81       	ldd	r27, Y+4	; 0x04
    1440:	80 31       	cpi	r24, 0x10	; 16
    1442:	27 e2       	ldi	r18, 0x27	; 39
    1444:	92 07       	cpc	r25, r18
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	a2 07       	cpc	r26, r18
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	b2 07       	cpc	r27, r18
    144e:	19 f4       	brne	.+6      	; 0x1456 <USART_u8ReceiveData+0xa0>
      {
        Local_u8ErrorState = TIMEOUT_STATE;
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <USART_u8ReceiveData+0xac>
      }
      else
      {
        *Copy_u8ReceivedData = UDR;
    1456:	ec e2       	ldi	r30, 0x2C	; 44
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	ee 81       	ldd	r30, Y+6	; 0x06
    145e:	ff 81       	ldd	r31, Y+7	; 0x07
    1460:	80 83       	st	Z, r24
      }

      USART_u8State = IDLE;
    1462:	10 92 d4 01 	sts	0x01D4, r1
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <USART_u8ReceiveData+0xbc>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <USART_u8ReceiveData+0xbc>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1474:	27 96       	adiw	r28, 0x07	; 7
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <USART_u8SendStringSynch>:
 *		Copy_pu8String => pointer that holds the data
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringSynch(u8 *Copy_pu8String)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	65 97       	sbiw	r28, 0x15	; 21
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	9d 8b       	std	Y+21, r25	; 0x15
    149c:	8c 8b       	std	Y+20, r24	; 0x14
  u8 Local_u8ErrorState = OK;
    149e:	1b 8a       	std	Y+19, r1	; 0x13

  u32 Local_u32Index = 0;
    14a0:	1f 86       	std	Y+15, r1	; 0x0f
    14a2:	18 8a       	std	Y+16, r1	; 0x10
    14a4:	19 8a       	std	Y+17, r1	; 0x11
    14a6:	1a 8a       	std	Y+18, r1	; 0x12

  if (Copy_pu8String != NULL)
    14a8:	8c 89       	ldd	r24, Y+20	; 0x14
    14aa:	9d 89       	ldd	r25, Y+21	; 0x15
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <USART_u8SendStringSynch+0x2c>
    14b0:	98 c0       	rjmp	.+304    	; 0x15e2 <USART_u8SendStringSynch+0x15c>
    14b2:	8b c0       	rjmp	.+278    	; 0x15ca <USART_u8SendStringSynch+0x144>
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    {
      Local_u8ErrorState = USART_u8SendData(Copy_pu8String[Local_u32Index]);
    14b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    14b6:	38 89       	ldd	r19, Y+16	; 0x10
    14b8:	8c 89       	ldd	r24, Y+20	; 0x14
    14ba:	9d 89       	ldd	r25, Y+21	; 0x15
    14bc:	fc 01       	movw	r30, r24
    14be:	e2 0f       	add	r30, r18
    14c0:	f3 1f       	adc	r31, r19
    14c2:	80 81       	ld	r24, Z
    14c4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <USART_u8SendData>
    14c8:	8b 8b       	std	Y+19, r24	; 0x13
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a8 ec       	ldi	r26, 0xC8	; 200
    14d0:	b2 e4       	ldi	r27, 0x42	; 66
    14d2:	8b 87       	std	Y+11, r24	; 0x0b
    14d4:	9c 87       	std	Y+12, r25	; 0x0c
    14d6:	ad 87       	std	Y+13, r26	; 0x0d
    14d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a ef       	ldi	r20, 0xFA	; 250
    14e8:	54 e4       	ldi	r21, 0x44	; 68
    14ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8f 83       	std	Y+7, r24	; 0x07
    14f4:	98 87       	std	Y+8, r25	; 0x08
    14f6:	a9 87       	std	Y+9, r26	; 0x09
    14f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <USART_u8SendStringSynch+0x96>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	3f c0       	rjmp	.+126    	; 0x159a <USART_u8SendStringSynch+0x114>
	else if (__tmp > 65535)
    151c:	6f 81       	ldd	r22, Y+7	; 0x07
    151e:	78 85       	ldd	r23, Y+8	; 0x08
    1520:	89 85       	ldd	r24, Y+9	; 0x09
    1522:	9a 85       	ldd	r25, Y+10	; 0x0a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <USART_u8SendStringSynch+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	6b 85       	ldd	r22, Y+11	; 0x0b
    1536:	7c 85       	ldd	r23, Y+12	; 0x0c
    1538:	8d 85       	ldd	r24, Y+13	; 0x0d
    153a:	9e 85       	ldd	r25, Y+14	; 0x0e
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	0f c0       	rjmp	.+30     	; 0x157c <USART_u8SendStringSynch+0xf6>
    155e:	88 ec       	ldi	r24, 0xC8	; 200
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 83       	std	Y+4, r25	; 0x04
    1564:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <USART_u8SendStringSynch+0xe4>
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <USART_u8SendStringSynch+0xd8>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <USART_u8SendStringSynch+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <USART_u8SendStringSynch+0x120>
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(100);
      Local_u32Index++;
    15ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b0:	98 89       	ldd	r25, Y+16	; 0x10
    15b2:	a9 89       	ldd	r26, Y+17	; 0x11
    15b4:	ba 89       	ldd	r27, Y+18	; 0x12
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	a1 1d       	adc	r26, r1
    15ba:	b1 1d       	adc	r27, r1
    15bc:	8f 87       	std	Y+15, r24	; 0x0f
    15be:	98 8b       	std	Y+16, r25	; 0x10
    15c0:	a9 8b       	std	Y+17, r26	; 0x11
    15c2:	ba 8b       	std	Y+18, r27	; 0x12
      if (Local_u8ErrorState != OK)
    15c4:	8b 89       	ldd	r24, Y+19	; 0x13
    15c6:	88 23       	and	r24, r24
    15c8:	71 f4       	brne	.+28     	; 0x15e6 <USART_u8SendStringSynch+0x160>

  u32 Local_u32Index = 0;

  if (Copy_pu8String != NULL)
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    15ca:	2f 85       	ldd	r18, Y+15	; 0x0f
    15cc:	38 89       	ldd	r19, Y+16	; 0x10
    15ce:	8c 89       	ldd	r24, Y+20	; 0x14
    15d0:	9d 89       	ldd	r25, Y+21	; 0x15
    15d2:	fc 01       	movw	r30, r24
    15d4:	e2 0f       	add	r30, r18
    15d6:	f3 1f       	adc	r31, r19
    15d8:	80 81       	ld	r24, Z
    15da:	88 23       	and	r24, r24
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <USART_u8SendStringSynch+0x15a>
    15de:	6a cf       	rjmp	.-300    	; 0x14b4 <USART_u8SendStringSynch+0x2e>
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <USART_u8SendStringSynch+0x160>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
  }

  return Local_u8ErrorState;
    15e6:	8b 89       	ldd	r24, Y+19	; 0x13
}
    15e8:	65 96       	adiw	r28, 0x15	; 21
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <USART_u8SendStringAsynch>:
 *      NotificationFunc => function that called after the transmit complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringAsynch(u8 *Copy_pu8String, void (*NotificationFunc)(void))
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <USART_u8SendStringAsynch+0x6>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <USART_u8SendStringAsynch+0x8>
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	9b 83       	std	Y+3, r25	; 0x03
    160a:	8a 83       	std	Y+2, r24	; 0x02
    160c:	7d 83       	std	Y+5, r23	; 0x05
    160e:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
    1610:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    1612:	80 91 d4 01 	lds	r24, 0x01D4
    1616:	88 23       	and	r24, r24
    1618:	99 f5       	brne	.+102    	; 0x1680 <USART_u8SendStringAsynch+0x86>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	9b 81       	ldd	r25, Y+3	; 0x03
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 f1       	breq	.+88     	; 0x167a <USART_u8SendStringAsynch+0x80>
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	9d 81       	ldd	r25, Y+5	; 0x05
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	41 f1       	breq	.+80     	; 0x167a <USART_u8SendStringAsynch+0x80>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	80 93 d4 01 	sts	0x01D4, r24

      /*Assign the USART data globally*/
      USART_pu8SendData = Copy_pu8String;
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	9b 81       	ldd	r25, Y+3	; 0x03
    1634:	90 93 cf 01 	sts	0x01CF, r25
    1638:	80 93 ce 01 	sts	0x01CE, r24
      USART_pvNotificationFunc = NotificationFunc;
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	90 93 d3 01 	sts	0x01D3, r25
    1644:	80 93 d2 01 	sts	0x01D2, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    1648:	10 92 d6 01 	sts	0x01D6, r1

      /*Send first Data */
      UDR = USART_pu8SendData[USART_u8Index];
    164c:	ac e2       	ldi	r26, 0x2C	; 44
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	20 91 ce 01 	lds	r18, 0x01CE
    1654:	30 91 cf 01 	lds	r19, 0x01CF
    1658:	80 91 d6 01 	lds	r24, 0x01D6
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	e8 0f       	add	r30, r24
    1664:	f9 1f       	adc	r31, r25
    1666:	80 81       	ld	r24, Z
    1668:	8c 93       	st	X, r24

      /*USART Transmit Interrupt Enable*/
      SET_BIT(UCSRB, UCSRB_TXCIE);
    166a:	aa e2       	ldi	r26, 0x2A	; 42
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ea e2       	ldi	r30, 0x2A	; 42
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 64       	ori	r24, 0x40	; 64
    1676:	8c 93       	st	X, r24
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <USART_u8SendStringAsynch+0x8a>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <USART_u8SendStringAsynch+0x8a>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <USART_u8ReceiveBufferSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferSynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	2b 97       	sbiw	r28, 0x0b	; 11
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	9f 83       	std	Y+7, r25	; 0x07
    16ac:	8e 83       	std	Y+6, r24	; 0x06
    16ae:	48 87       	std	Y+8, r20	; 0x08
    16b0:	59 87       	std	Y+9, r21	; 0x09
    16b2:	6a 87       	std	Y+10, r22	; 0x0a
    16b4:	7b 87       	std	Y+11, r23	; 0x0b
  u8 Local_u8ErrorState = OK;
    16b6:	1d 82       	std	Y+5, r1	; 0x05

  if (Copy_pu8String != NULL)
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	9f 81       	ldd	r25, Y+7	; 0x07
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	51 f1       	breq	.+84     	; 0x1714 <USART_u8ReceiveBufferSynch+0x7e>
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	1a 82       	std	Y+2, r1	; 0x02
    16c4:	1b 82       	std	Y+3, r1	; 0x03
    16c6:	1c 82       	std	Y+4, r1	; 0x04
    16c8:	17 c0       	rjmp	.+46     	; 0x16f8 <USART_u8ReceiveBufferSynch+0x62>
    {
      Local_u8ErrorState = USART_u8ReceiveData(&Copy_pu8String[Local_u32Index]);
    16ca:	29 81       	ldd	r18, Y+1	; 0x01
    16cc:	3a 81       	ldd	r19, Y+2	; 0x02
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	9f 81       	ldd	r25, Y+7	; 0x07
    16d2:	82 0f       	add	r24, r18
    16d4:	93 1f       	adc	r25, r19
    16d6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    16da:	8d 83       	std	Y+5, r24	; 0x05
      if (Local_u8ErrorState != OK)
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	88 23       	and	r24, r24
    16e0:	d9 f4       	brne	.+54     	; 0x1718 <USART_u8ReceiveBufferSynch+0x82>
{
  u8 Local_u8ErrorState = OK;

  if (Copy_pu8String != NULL)
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	ab 81       	ldd	r26, Y+3	; 0x03
    16e8:	bc 81       	ldd	r27, Y+4	; 0x04
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	a1 1d       	adc	r26, r1
    16ee:	b1 1d       	adc	r27, r1
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	ab 83       	std	Y+3, r26	; 0x03
    16f6:	bc 83       	std	Y+4, r27	; 0x04
    16f8:	29 81       	ldd	r18, Y+1	; 0x01
    16fa:	3a 81       	ldd	r19, Y+2	; 0x02
    16fc:	4b 81       	ldd	r20, Y+3	; 0x03
    16fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1700:	88 85       	ldd	r24, Y+8	; 0x08
    1702:	99 85       	ldd	r25, Y+9	; 0x09
    1704:	aa 85       	ldd	r26, Y+10	; 0x0a
    1706:	bb 85       	ldd	r27, Y+11	; 0x0b
    1708:	28 17       	cp	r18, r24
    170a:	39 07       	cpc	r19, r25
    170c:	4a 07       	cpc	r20, r26
    170e:	5b 07       	cpc	r21, r27
    1710:	e0 f2       	brcs	.-72     	; 0x16ca <USART_u8ReceiveBufferSynch+0x34>
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <USART_u8ReceiveBufferSynch+0x82>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
}
    171a:	2b 96       	adiw	r28, 0x0b	; 11
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <USART_u8ReceiveBufferAsynch>:
 *      NotificationFunc   => function that called after the received complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferAsynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize, void (*NotificationFunc)(void))
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	9b 83       	std	Y+3, r25	; 0x03
    1742:	8a 83       	std	Y+2, r24	; 0x02
    1744:	4c 83       	std	Y+4, r20	; 0x04
    1746:	5d 83       	std	Y+5, r21	; 0x05
    1748:	6e 83       	std	Y+6, r22	; 0x06
    174a:	7f 83       	std	Y+7, r23	; 0x07
    174c:	39 87       	std	Y+9, r19	; 0x09
    174e:	28 87       	std	Y+8, r18	; 0x08
  u8 Local_u8ErrorState = OK;
    1750:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    1752:	80 91 d4 01 	lds	r24, 0x01D4
    1756:	88 23       	and	r24, r24
    1758:	39 f5       	brne	.+78     	; 0x17a8 <USART_u8ReceiveBufferAsynch+0x7c>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	01 f1       	breq	.+64     	; 0x17a2 <USART_u8ReceiveBufferAsynch+0x76>
    1762:	88 85       	ldd	r24, Y+8	; 0x08
    1764:	99 85       	ldd	r25, Y+9	; 0x09
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	e1 f0       	breq	.+56     	; 0x17a2 <USART_u8ReceiveBufferAsynch+0x76>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 93 d4 01 	sts	0x01D4, r24

      /*Assign the USART data globally*/
      USART_pu8ReceiveData = Copy_pu8String;
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	9b 81       	ldd	r25, Y+3	; 0x03
    1774:	90 93 d1 01 	sts	0x01D1, r25
    1778:	80 93 d0 01 	sts	0x01D0, r24
      USART_pvNotificationFunc = NotificationFunc;
    177c:	88 85       	ldd	r24, Y+8	; 0x08
    177e:	99 85       	ldd	r25, Y+9	; 0x09
    1780:	90 93 d3 01 	sts	0x01D3, r25
    1784:	80 93 d2 01 	sts	0x01D2, r24
      USART_u8BufferSize = Copy_u32BufferSize;
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	80 93 d5 01 	sts	0x01D5, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    178e:	10 92 d6 01 	sts	0x01D6, r1

      /*USART Recieve Interrupt Enable */
      SET_BIT(UCSRB, UCSRB_RXCIE);
    1792:	aa e2       	ldi	r26, 0x2A	; 42
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ea e2       	ldi	r30, 0x2A	; 42
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 68       	ori	r24, 0x80	; 128
    179e:	8c 93       	st	X, r24
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <USART_u8ReceiveBufferAsynch+0x80>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <USART_u8ReceiveBufferAsynch+0x80>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	29 96       	adiw	r28, 0x09	; 9
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <__vector_13>:
/*___________________________________________________________________________________________________________________*/

/* ISR for RX complete */
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    17c0:	1f 92       	push	r1
    17c2:	0f 92       	push	r0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	0f 92       	push	r0
    17c8:	11 24       	eor	r1, r1
    17ca:	2f 93       	push	r18
    17cc:	3f 93       	push	r19
    17ce:	4f 93       	push	r20
    17d0:	5f 93       	push	r21
    17d2:	6f 93       	push	r22
    17d4:	7f 93       	push	r23
    17d6:	8f 93       	push	r24
    17d8:	9f 93       	push	r25
    17da:	af 93       	push	r26
    17dc:	bf 93       	push	r27
    17de:	ef 93       	push	r30
    17e0:	ff 93       	push	r31
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
  /*Receive next Data*/
  USART_pu8ReceiveData[USART_u8Index] = UDR;
    17ea:	20 91 d0 01 	lds	r18, 0x01D0
    17ee:	30 91 d1 01 	lds	r19, 0x01D1
    17f2:	80 91 d6 01 	lds	r24, 0x01D6
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	d9 01       	movw	r26, r18
    17fc:	a8 0f       	add	r26, r24
    17fe:	b9 1f       	adc	r27, r25
    1800:	ec e2       	ldi	r30, 0x2C	; 44
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8c 93       	st	X, r24

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    1808:	80 91 d6 01 	lds	r24, 0x01D6
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	80 93 d6 01 	sts	0x01D6, r24

  if (USART_u8Index == USART_u8BufferSize)
    1812:	90 91 d6 01 	lds	r25, 0x01D6
    1816:	80 91 d5 01 	lds	r24, 0x01D5
    181a:	98 17       	cp	r25, r24
    181c:	b1 f4       	brne	.+44     	; 0x184a <__vector_13+0x8a>
  {
    /*Send Data Complete*/

    USART_u8Index = 0;
    181e:	10 92 d6 01 	sts	0x01D6, r1
    /*USART is now IDLE*/
    USART_u8State = IDLE;
    1822:	10 92 d4 01 	sts	0x01D4, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    1826:	80 91 d2 01 	lds	r24, 0x01D2
    182a:	90 91 d3 01 	lds	r25, 0x01D3
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	29 f0       	breq	.+10     	; 0x183c <__vector_13+0x7c>
    {
      USART_pvNotificationFunc();
    1832:	e0 91 d2 01 	lds	r30, 0x01D2
    1836:	f0 91 d3 01 	lds	r31, 0x01D3
    183a:	09 95       	icall
    }

    /*USART Recieve Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_RXCIE);
    183c:	aa e2       	ldi	r26, 0x2A	; 42
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ea e2       	ldi	r30, 0x2A	; 42
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8f 77       	andi	r24, 0x7F	; 127
    1848:	8c 93       	st	X, r24
  }
  else
  {
    /*Do Noting*/
  }
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    189a:	80 91 d6 01 	lds	r24, 0x01D6
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	80 93 d6 01 	sts	0x01D6, r24

  if (USART_pu8SendData[USART_u8Index] == '\0')
    18a4:	20 91 ce 01 	lds	r18, 0x01CE
    18a8:	30 91 cf 01 	lds	r19, 0x01CF
    18ac:	80 91 d6 01 	lds	r24, 0x01D6
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	f9 01       	movw	r30, r18
    18b6:	e8 0f       	add	r30, r24
    18b8:	f9 1f       	adc	r31, r25
    18ba:	80 81       	ld	r24, Z
    18bc:	88 23       	and	r24, r24
    18be:	b9 f4       	brne	.+46     	; 0x18ee <__vector_15+0x7e>
  {
    /*Receive Data Complete*/
    USART_u8Index = 0;
    18c0:	10 92 d6 01 	sts	0x01D6, r1

    /*USART is now IDLE*/
    USART_u8State = IDLE;
    18c4:	10 92 d4 01 	sts	0x01D4, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    18c8:	80 91 d2 01 	lds	r24, 0x01D2
    18cc:	90 91 d3 01 	lds	r25, 0x01D3
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	29 f0       	breq	.+10     	; 0x18de <__vector_15+0x6e>
    {
      USART_pvNotificationFunc();
    18d4:	e0 91 d2 01 	lds	r30, 0x01D2
    18d8:	f0 91 d3 01 	lds	r31, 0x01D3
    18dc:	09 95       	icall
    }

    /*USART Transmit Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_TXCIE);
    18de:	aa e2       	ldi	r26, 0x2A	; 42
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	ea e2       	ldi	r30, 0x2A	; 42
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7b       	andi	r24, 0xBF	; 191
    18ea:	8c 93       	st	X, r24
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <__vector_15+0x9c>
  }
  else
  {
    /*Send Data not Complete/
    /Send next Data*/
    UDR = USART_pu8SendData[USART_u8Index];
    18ee:	ac e2       	ldi	r26, 0x2C	; 44
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	20 91 ce 01 	lds	r18, 0x01CE
    18f6:	30 91 cf 01 	lds	r19, 0x01CF
    18fa:	80 91 d6 01 	lds	r24, 0x01D6
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	f9 01       	movw	r30, r18
    1904:	e8 0f       	add	r30, r24
    1906:	f9 1f       	adc	r31, r25
    1908:	80 81       	ld	r24, Z
    190a:	8c 93       	st	X, r24
  }
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	bf 91       	pop	r27
    1916:	af 91       	pop	r26
    1918:	9f 91       	pop	r25
    191a:	8f 91       	pop	r24
    191c:	7f 91       	pop	r23
    191e:	6f 91       	pop	r22
    1920:	5f 91       	pop	r21
    1922:	4f 91       	pop	r20
    1924:	3f 91       	pop	r19
    1926:	2f 91       	pop	r18
    1928:	0f 90       	pop	r0
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	0f 90       	pop	r0
    192e:	1f 90       	pop	r1
    1930:	18 95       	reti

00001932 <TIMER0_vInit>:
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_vInit(void)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    193a:	a3 e5       	ldi	r26, 0x53	; 83
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e3 e5       	ldi	r30, 0x53	; 83
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	8f 7b       	andi	r24, 0xBF	; 191
    1946:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    1948:	a3 e5       	ldi	r26, 0x53	; 83
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e3 e5       	ldi	r30, 0x53	; 83
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	87 7f       	andi	r24, 0xF7	; 247
    1954:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    1956:	e2 e5       	ldi	r30, 0x52	; 82
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 ec       	ldi	r24, 0xC0	; 192
    195c:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    195e:	a9 e5       	ldi	r26, 0x59	; 89
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e9 e5       	ldi	r30, 0x59	; 89
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	81 60       	ori	r24, 0x01	; 1
    196a:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    196c:	a3 e5       	ldi	r26, 0x53	; 83
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e3 e5       	ldi	r30, 0x53	; 83
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	88 7f       	andi	r24, 0xF8	; 248
    1978:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    197a:	a3 e5       	ldi	r26, 0x53	; 83
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e3 e5       	ldi	r30, 0x53	; 83
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	82 60       	ori	r24, 0x02	; 2
    1986:	8c 93       	st	X, r24
}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1996:	af e4       	ldi	r26, 0x4F	; 79
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	ef e4       	ldi	r30, 0x4F	; 79
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	8e 7f       	andi	r24, 0xFE	; 254
    19a2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    19a4:	af e4       	ldi	r26, 0x4F	; 79
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ef e4       	ldi	r30, 0x4F	; 79
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	82 60       	ori	r24, 0x02	; 2
    19b0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    19b2:	ae e4       	ldi	r26, 0x4E	; 78
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ee e4       	ldi	r30, 0x4E	; 78
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	88 60       	ori	r24, 0x08	; 8
    19be:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    19c0:	ae e4       	ldi	r26, 0x4E	; 78
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ee e4       	ldi	r30, 0x4E	; 78
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 61       	ori	r24, 0x10	; 16
    19cc:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    19ce:	ea e4       	ldi	r30, 0x4A	; 74
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	11 82       	std	Z+1, r1	; 0x01
    19d4:	10 82       	st	Z, r1
			OCR1B = TIMER1_CTCB_VAL ;
    19d6:	e8 e4       	ldi	r30, 0x48	; 72
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	11 82       	std	Z+1, r1	; 0x01
    19dc:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    19de:	e6 e4       	ldi	r30, 0x46	; 70
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 e2       	ldi	r24, 0x20	; 32
    19e4:	9e e4       	ldi	r25, 0x4E	; 78
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    19ea:	ae e4       	ldi	r26, 0x4E	; 78
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	ee e4       	ldi	r30, 0x4E	; 78
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	80 64       	ori	r24, 0x40	; 64
    19f6:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    19f8:	af e4       	ldi	r26, 0x4F	; 79
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	ef e4       	ldi	r30, 0x4F	; 79
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 7b       	andi	r24, 0xBF	; 191
    1a04:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    1a06:	af e4       	ldi	r26, 0x4F	; 79
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ef e4       	ldi	r30, 0x4F	; 79
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 68       	ori	r24, 0x80	; 128
    1a12:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    1a14:	af e4       	ldi	r26, 0x4F	; 79
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	ef e4       	ldi	r30, 0x4F	; 79
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8f 7e       	andi	r24, 0xEF	; 239
    1a20:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    1a22:	af e4       	ldi	r26, 0x4F	; 79
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	ef e4       	ldi	r30, 0x4F	; 79
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 62       	ori	r24, 0x20	; 32
    1a2e:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1a30:	a9 e5       	ldi	r26, 0x59	; 89
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e9 e5       	ldi	r30, 0x59	; 89
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8b 7f       	andi	r24, 0xFB	; 251
    1a3c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    1a3e:	a9 e5       	ldi	r26, 0x59	; 89
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e9 e5       	ldi	r30, 0x59	; 89
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8f 7e       	andi	r24, 0xEF	; 239
    1a4a:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    1a4c:	a9 e5       	ldi	r26, 0x59	; 89
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e9 e5       	ldi	r30, 0x59	; 89
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	87 7f       	andi	r24, 0xF7	; 247
    1a58:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    1a5a:	a9 e5       	ldi	r26, 0x59	; 89
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e9 e5       	ldi	r30, 0x59	; 89
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	8f 7d       	andi	r24, 0xDF	; 223
    1a66:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    1a68:	ae e4       	ldi	r26, 0x4E	; 78
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	ee e4       	ldi	r30, 0x4E	; 78
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	88 7f       	andi	r24, 0xF8	; 248
    1a74:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    1a76:	ae e4       	ldi	r26, 0x4E	; 78
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	ee e4       	ldi	r30, 0x4E	; 78
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	82 60       	ori	r24, 0x02	; 2
    1a82:	8c 93       	st	X, r24


}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	#if TIMER2_EXTERNAL_CLK == ENABLE
		SET_BIT(ASSR, ASSR_AS2);
    1a92:	a2 e4       	ldi	r26, 0x42	; 66
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e2 e4       	ldi	r30, 0x42	; 66
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	88 60       	ori	r24, 0x08	; 8
    1a9e:	8c 93       	st	X, r24
	#endif
	/*Set Configurable Modes*/
		#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1aa0:	a5 e4       	ldi	r26, 0x45	; 69
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e5 e4       	ldi	r30, 0x45	; 69
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8f 7b       	andi	r24, 0xBF	; 191
    1aac:	8c 93       	st	X, r24
			CLR_BIT(TCCR2 , TCCR2_WGM21) ;
    1aae:	a5 e4       	ldi	r26, 0x45	; 69
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e5 e4       	ldi	r30, 0x45	; 69
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	87 7f       	andi	r24, 0xF7	; 247
    1aba:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT2 = TIMER2_PRELOAD_VAL ;
    1abc:	e4 e4       	ldi	r30, 0x44	; 68
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	10 82       	st	Z, r1

			/*Timer2 Overflow Interrupt Enable*/
			#if TIMER2_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE2) ;
			#elif TIMER2_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE2) ;
    1ac2:	a9 e5       	ldi	r26, 0x59	; 89
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e9 e5       	ldi	r30, 0x59	; 89
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	80 64       	ori	r24, 0x40	; 64
    1ace:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1ad0:	a5 e4       	ldi	r26, 0x45	; 69
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e4       	ldi	r30, 0x45	; 69
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 7f       	andi	r24, 0xF8	; 248
    1adc:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    1ade:	a5 e4       	ldi	r26, 0x45	; 69
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e4       	ldi	r30, 0x45	; 69
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	81 60       	ori	r24, 0x01	; 1
    1aea:	8c 93       	st	X, r24
}
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	0f 92       	push	r0
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1afe:	e2 e5       	ldi	r30, 0x52	; 82
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	80 83       	st	Z, r24
}
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <TIMER1_vSetPreload+0x6>
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	9a 83       	std	Y+2, r25	; 0x02
    1b1a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1b1c:	ec e4       	ldi	r30, 0x4C	; 76
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
}
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	0f 92       	push	r0
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1b3e:	e4 e4       	ldi	r30, 0x44	; 68
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	80 83       	st	Z, r24
}
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	0f 92       	push	r0
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    1b5a:	ec e5       	ldi	r30, 0x5C	; 92
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	80 83       	st	Z, r24
}
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (u16 Copy_u16CTCA)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <TIMER1_vSetCTCA+0x6>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    1b78:	ea e4       	ldi	r30, 0x4A	; 74
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	80 83       	st	Z, r24
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <TIMER1_vSetCTCB+0x6>
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    1b9c:	e8 e4       	ldi	r30, 0x48	; 72
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	0f 92       	push	r0
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1bbe:	e3 e4       	ldi	r30, 0x43	; 67
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	80 83       	st	Z, r24
}
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <TIMER1_vSetICR1+0x6>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    1bdc:	e6 e4       	ldi	r30, 0x46	; 70
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	91 83       	std	Z+1, r25	; 0x01
    1be6:	80 83       	st	Z, r24
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    1bfa:	e2 e5       	ldi	r30, 0x52	; 82
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
}
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1c0e:	ec e4       	ldi	r30, 0x4C	; 76
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    1c24:	e4 e4       	ldi	r30, 0x44	; 68
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <TIMER_vSetPWM+0x6>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1c3e:	ea e4       	ldi	r30, 0x4A	; 74
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	80 83       	st	Z, r24
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1c5c:	ae e4       	ldi	r26, 0x4E	; 78
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	ee e4       	ldi	r30, 0x4E	; 78
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	80 64       	ori	r24, 0x40	; 64
    1c68:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1c6a:	a9 e5       	ldi	r26, 0x59	; 89
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e9 e5       	ldi	r30, 0x59	; 89
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	80 62       	ori	r24, 0x20	; 32
    1c76:	8c 93       	st	X, r24
}
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <TIMER_vICUSetTriggerEdge+0x6>
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    1c8a:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	41 f4       	brne	.+16     	; 0x1ca2 <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1c92:	ae e4       	ldi	r26, 0x4E	; 78
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	ee e4       	ldi	r30, 0x4E	; 78
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	80 64       	ori	r24, 0x40	; 64
    1c9e:	8c 93       	st	X, r24
    1ca0:	0d c0       	rjmp	.+26     	; 0x1cbc <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	88 23       	and	r24, r24
    1ca6:	41 f4       	brne	.+16     	; 0x1cb8 <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1ca8:	ae e4       	ldi	r26, 0x4E	; 78
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	ee e4       	ldi	r30, 0x4E	; 78
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8f 7b       	andi	r24, 0xBF	; 191
    1cb4:	8c 93       	st	X, r24
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1cd0:	a9 e5       	ldi	r26, 0x59	; 89
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e9 e5       	ldi	r30, 0x59	; 89
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 62       	ori	r24, 0x20	; 32
    1cdc:	8c 93       	st	X, r24
}
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1cec:	a9 e5       	ldi	r26, 0x59	; 89
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e9 e5       	ldi	r30, 0x59	; 89
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8f 7d       	andi	r24, 0xDF	; 223
    1cf8:	8c 93       	st	X, r24
}
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1d08:	e6 e4       	ldi	r30, 0x46	; 70
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <TIMER_vWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1d1e:	a1 e4       	ldi	r26, 0x41	; 65
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e1 e4       	ldi	r30, 0x41	; 65
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	88 7f       	andi	r24, 0xF8	; 248
    1d2a:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    1d2c:	a1 e4       	ldi	r26, 0x41	; 65
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e1 e4       	ldi	r30, 0x41	; 65
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	86 60       	ori	r24, 0x06	; 6
    1d38:	8c 93       	st	X, r24
}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    1d48:	a1 e4       	ldi	r26, 0x41	; 65
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e1 e4       	ldi	r30, 0x41	; 65
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	88 60       	ori	r24, 0x08	; 8
    1d54:	8c 93       	st	X, r24
}
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    1d64:	a1 e4       	ldi	r26, 0x41	; 65
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e1 e4       	ldi	r30, 0x41	; 65
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 61       	ori	r24, 0x18	; 24
    1d70:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    1d72:	e1 e4       	ldi	r30, 0x41	; 65
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	10 82       	st	Z, r1
}
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <TIMER_u8SetCallBack+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <TIMER_u8SetCallBack+0x8>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	9b 83       	std	Y+3, r25	; 0x03
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
    1d8e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    1d90:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	9b 81       	ldd	r25, Y+3	; 0x03
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	69 f0       	breq	.+26     	; 0x1db4 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	fc 01       	movw	r30, r24
    1da6:	e9 52       	subi	r30, 0x29	; 41
    1da8:	fe 4f       	sbci	r31, 0xFE	; 254
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    1dc8:	1f 92       	push	r1
    1dca:	0f 92       	push	r0
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	0f 92       	push	r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    1df2:	80 91 ed 01 	lds	r24, 0x01ED
    1df6:	90 91 ee 01 	lds	r25, 0x01EE
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    1dfe:	e0 91 ed 01 	lds	r30, 0x01ED
    1e02:	f0 91 ee 01 	lds	r31, 0x01EE
    1e06:	09 95       	icall
	}
}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	ff 91       	pop	r31
    1e0e:	ef 91       	pop	r30
    1e10:	bf 91       	pop	r27
    1e12:	af 91       	pop	r26
    1e14:	9f 91       	pop	r25
    1e16:	8f 91       	pop	r24
    1e18:	7f 91       	pop	r23
    1e1a:	6f 91       	pop	r22
    1e1c:	5f 91       	pop	r21
    1e1e:	4f 91       	pop	r20
    1e20:	3f 91       	pop	r19
    1e22:	2f 91       	pop	r18
    1e24:	0f 90       	pop	r0
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	0f 90       	pop	r0
    1e2a:	1f 90       	pop	r1
    1e2c:	18 95       	reti

00001e2e <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    1e2e:	1f 92       	push	r1
    1e30:	0f 92       	push	r0
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	0f 92       	push	r0
    1e36:	11 24       	eor	r1, r1
    1e38:	2f 93       	push	r18
    1e3a:	3f 93       	push	r19
    1e3c:	4f 93       	push	r20
    1e3e:	5f 93       	push	r21
    1e40:	6f 93       	push	r22
    1e42:	7f 93       	push	r23
    1e44:	8f 93       	push	r24
    1e46:	9f 93       	push	r25
    1e48:	af 93       	push	r26
    1e4a:	bf 93       	push	r27
    1e4c:	ef 93       	push	r30
    1e4e:	ff 93       	push	r31
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    1e58:	80 91 eb 01 	lds	r24, 0x01EB
    1e5c:	90 91 ec 01 	lds	r25, 0x01EC
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    1e64:	e0 91 eb 01 	lds	r30, 0x01EB
    1e68:	f0 91 ec 01 	lds	r31, 0x01EC
    1e6c:	09 95       	icall
	}
}
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	ff 91       	pop	r31
    1e74:	ef 91       	pop	r30
    1e76:	bf 91       	pop	r27
    1e78:	af 91       	pop	r26
    1e7a:	9f 91       	pop	r25
    1e7c:	8f 91       	pop	r24
    1e7e:	7f 91       	pop	r23
    1e80:	6f 91       	pop	r22
    1e82:	5f 91       	pop	r21
    1e84:	4f 91       	pop	r20
    1e86:	3f 91       	pop	r19
    1e88:	2f 91       	pop	r18
    1e8a:	0f 90       	pop	r0
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	0f 90       	pop	r0
    1e90:	1f 90       	pop	r1
    1e92:	18 95       	reti

00001e94 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    1e94:	1f 92       	push	r1
    1e96:	0f 92       	push	r0
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	0f 92       	push	r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	2f 93       	push	r18
    1ea0:	3f 93       	push	r19
    1ea2:	4f 93       	push	r20
    1ea4:	5f 93       	push	r21
    1ea6:	6f 93       	push	r22
    1ea8:	7f 93       	push	r23
    1eaa:	8f 93       	push	r24
    1eac:	9f 93       	push	r25
    1eae:	af 93       	push	r26
    1eb0:	bf 93       	push	r27
    1eb2:	ef 93       	push	r30
    1eb4:	ff 93       	push	r31
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    1ebe:	80 91 e9 01 	lds	r24, 0x01E9
    1ec2:	90 91 ea 01 	lds	r25, 0x01EA
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	29 f0       	breq	.+10     	; 0x1ed4 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    1eca:	e0 91 e9 01 	lds	r30, 0x01E9
    1ece:	f0 91 ea 01 	lds	r31, 0x01EA
    1ed2:	09 95       	icall
	}
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	ff 91       	pop	r31
    1eda:	ef 91       	pop	r30
    1edc:	bf 91       	pop	r27
    1ede:	af 91       	pop	r26
    1ee0:	9f 91       	pop	r25
    1ee2:	8f 91       	pop	r24
    1ee4:	7f 91       	pop	r23
    1ee6:	6f 91       	pop	r22
    1ee8:	5f 91       	pop	r21
    1eea:	4f 91       	pop	r20
    1eec:	3f 91       	pop	r19
    1eee:	2f 91       	pop	r18
    1ef0:	0f 90       	pop	r0
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	0f 90       	pop	r0
    1ef6:	1f 90       	pop	r1
    1ef8:	18 95       	reti

00001efa <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    1efa:	1f 92       	push	r1
    1efc:	0f 92       	push	r0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	0f 92       	push	r0
    1f02:	11 24       	eor	r1, r1
    1f04:	2f 93       	push	r18
    1f06:	3f 93       	push	r19
    1f08:	4f 93       	push	r20
    1f0a:	5f 93       	push	r21
    1f0c:	6f 93       	push	r22
    1f0e:	7f 93       	push	r23
    1f10:	8f 93       	push	r24
    1f12:	9f 93       	push	r25
    1f14:	af 93       	push	r26
    1f16:	bf 93       	push	r27
    1f18:	ef 93       	push	r30
    1f1a:	ff 93       	push	r31
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    1f24:	80 91 e7 01 	lds	r24, 0x01E7
    1f28:	90 91 e8 01 	lds	r25, 0x01E8
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	29 f0       	breq	.+10     	; 0x1f3a <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    1f30:	e0 91 e7 01 	lds	r30, 0x01E7
    1f34:	f0 91 e8 01 	lds	r31, 0x01E8
    1f38:	09 95       	icall
	}
}
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	ff 91       	pop	r31
    1f40:	ef 91       	pop	r30
    1f42:	bf 91       	pop	r27
    1f44:	af 91       	pop	r26
    1f46:	9f 91       	pop	r25
    1f48:	8f 91       	pop	r24
    1f4a:	7f 91       	pop	r23
    1f4c:	6f 91       	pop	r22
    1f4e:	5f 91       	pop	r21
    1f50:	4f 91       	pop	r20
    1f52:	3f 91       	pop	r19
    1f54:	2f 91       	pop	r18
    1f56:	0f 90       	pop	r0
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	0f 90       	pop	r0
    1f5c:	1f 90       	pop	r1
    1f5e:	18 95       	reti

00001f60 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    1f60:	1f 92       	push	r1
    1f62:	0f 92       	push	r0
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	0f 92       	push	r0
    1f68:	11 24       	eor	r1, r1
    1f6a:	2f 93       	push	r18
    1f6c:	3f 93       	push	r19
    1f6e:	4f 93       	push	r20
    1f70:	5f 93       	push	r21
    1f72:	6f 93       	push	r22
    1f74:	7f 93       	push	r23
    1f76:	8f 93       	push	r24
    1f78:	9f 93       	push	r25
    1f7a:	af 93       	push	r26
    1f7c:	bf 93       	push	r27
    1f7e:	ef 93       	push	r30
    1f80:	ff 93       	push	r31
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    1f8a:	80 91 e5 01 	lds	r24, 0x01E5
    1f8e:	90 91 e6 01 	lds	r25, 0x01E6
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	29 f0       	breq	.+10     	; 0x1fa0 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    1f96:	e0 91 e5 01 	lds	r30, 0x01E5
    1f9a:	f0 91 e6 01 	lds	r31, 0x01E6
    1f9e:	09 95       	icall
	}
}
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	ff 91       	pop	r31
    1fa6:	ef 91       	pop	r30
    1fa8:	bf 91       	pop	r27
    1faa:	af 91       	pop	r26
    1fac:	9f 91       	pop	r25
    1fae:	8f 91       	pop	r24
    1fb0:	7f 91       	pop	r23
    1fb2:	6f 91       	pop	r22
    1fb4:	5f 91       	pop	r21
    1fb6:	4f 91       	pop	r20
    1fb8:	3f 91       	pop	r19
    1fba:	2f 91       	pop	r18
    1fbc:	0f 90       	pop	r0
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	0f 90       	pop	r0
    1fc2:	1f 90       	pop	r1
    1fc4:	18 95       	reti

00001fc6 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    1fc6:	1f 92       	push	r1
    1fc8:	0f 92       	push	r0
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	0f 92       	push	r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	2f 93       	push	r18
    1fd2:	3f 93       	push	r19
    1fd4:	4f 93       	push	r20
    1fd6:	5f 93       	push	r21
    1fd8:	6f 93       	push	r22
    1fda:	7f 93       	push	r23
    1fdc:	8f 93       	push	r24
    1fde:	9f 93       	push	r25
    1fe0:	af 93       	push	r26
    1fe2:	bf 93       	push	r27
    1fe4:	ef 93       	push	r30
    1fe6:	ff 93       	push	r31
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    1ff0:	80 91 e3 01 	lds	r24, 0x01E3
    1ff4:	90 91 e4 01 	lds	r25, 0x01E4
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	29 f0       	breq	.+10     	; 0x2006 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    1ffc:	e0 91 e3 01 	lds	r30, 0x01E3
    2000:	f0 91 e4 01 	lds	r31, 0x01E4
    2004:	09 95       	icall
	}
}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	ff 91       	pop	r31
    200c:	ef 91       	pop	r30
    200e:	bf 91       	pop	r27
    2010:	af 91       	pop	r26
    2012:	9f 91       	pop	r25
    2014:	8f 91       	pop	r24
    2016:	7f 91       	pop	r23
    2018:	6f 91       	pop	r22
    201a:	5f 91       	pop	r21
    201c:	4f 91       	pop	r20
    201e:	3f 91       	pop	r19
    2020:	2f 91       	pop	r18
    2022:	0f 90       	pop	r0
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	0f 90       	pop	r0
    2028:	1f 90       	pop	r1
    202a:	18 95       	reti

0000202c <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    202c:	1f 92       	push	r1
    202e:	0f 92       	push	r0
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	0f 92       	push	r0
    2034:	11 24       	eor	r1, r1
    2036:	2f 93       	push	r18
    2038:	3f 93       	push	r19
    203a:	4f 93       	push	r20
    203c:	5f 93       	push	r21
    203e:	6f 93       	push	r22
    2040:	7f 93       	push	r23
    2042:	8f 93       	push	r24
    2044:	9f 93       	push	r25
    2046:	af 93       	push	r26
    2048:	bf 93       	push	r27
    204a:	ef 93       	push	r30
    204c:	ff 93       	push	r31
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    2056:	80 91 e1 01 	lds	r24, 0x01E1
    205a:	90 91 e2 01 	lds	r25, 0x01E2
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	29 f0       	breq	.+10     	; 0x206c <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    2062:	e0 91 e1 01 	lds	r30, 0x01E1
    2066:	f0 91 e2 01 	lds	r31, 0x01E2
    206a:	09 95       	icall
	}
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	ff 91       	pop	r31
    2072:	ef 91       	pop	r30
    2074:	bf 91       	pop	r27
    2076:	af 91       	pop	r26
    2078:	9f 91       	pop	r25
    207a:	8f 91       	pop	r24
    207c:	7f 91       	pop	r23
    207e:	6f 91       	pop	r22
    2080:	5f 91       	pop	r21
    2082:	4f 91       	pop	r20
    2084:	3f 91       	pop	r19
    2086:	2f 91       	pop	r18
    2088:	0f 90       	pop	r0
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	0f 90       	pop	r0
    208e:	1f 90       	pop	r1
    2090:	18 95       	reti

00002092 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    2092:	1f 92       	push	r1
    2094:	0f 92       	push	r0
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	0f 92       	push	r0
    209a:	11 24       	eor	r1, r1
    209c:	2f 93       	push	r18
    209e:	3f 93       	push	r19
    20a0:	4f 93       	push	r20
    20a2:	5f 93       	push	r21
    20a4:	6f 93       	push	r22
    20a6:	7f 93       	push	r23
    20a8:	8f 93       	push	r24
    20aa:	9f 93       	push	r25
    20ac:	af 93       	push	r26
    20ae:	bf 93       	push	r27
    20b0:	ef 93       	push	r30
    20b2:	ff 93       	push	r31
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    20bc:	80 91 df 01 	lds	r24, 0x01DF
    20c0:	90 91 e0 01 	lds	r25, 0x01E0
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	29 f0       	breq	.+10     	; 0x20d2 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    20c8:	e0 91 df 01 	lds	r30, 0x01DF
    20cc:	f0 91 e0 01 	lds	r31, 0x01E0
    20d0:	09 95       	icall
	}
}
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	ff 91       	pop	r31
    20d8:	ef 91       	pop	r30
    20da:	bf 91       	pop	r27
    20dc:	af 91       	pop	r26
    20de:	9f 91       	pop	r25
    20e0:	8f 91       	pop	r24
    20e2:	7f 91       	pop	r23
    20e4:	6f 91       	pop	r22
    20e6:	5f 91       	pop	r21
    20e8:	4f 91       	pop	r20
    20ea:	3f 91       	pop	r19
    20ec:	2f 91       	pop	r18
    20ee:	0f 90       	pop	r0
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	0f 90       	pop	r0
    20f4:	1f 90       	pop	r1
    20f6:	18 95       	reti

000020f8 <SPI_vInit>:
static u8 SPI_u8State = IDLE;

/*___________________________________________________________________________________________________________________*/

void SPI_vInit(void)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
/*Data Order*/
#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
	SET_BIT(SPCR, SPCR_DORD);
#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
	CLR_BIT(SPCR, SPCR_DORD);
    2100:	ad e2       	ldi	r26, 0x2D	; 45
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	ed e2       	ldi	r30, 0x2D	; 45
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	8f 7d       	andi	r24, 0xDF	; 223
    210c:	8c 93       	st	X, r24
#error "wrong SPI_DATA_ORDER config"
#endif

/*Master/Slave Select*/
#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
	SET_BIT(SPCR, SPCR_MSTR);
    210e:	ad e2       	ldi	r26, 0x2D	; 45
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ed e2       	ldi	r30, 0x2D	; 45
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	80 61       	ori	r24, 0x10	; 16
    211a:	8c 93       	st	X, r24
#error "wrong SPI_MASTER_SLAVE_SELECT config"
#endif

/*Clock Polarity*/
#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
	CLR_BIT(SPCR, SPCR_CPOL);
    211c:	ad e2       	ldi	r26, 0x2D	; 45
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ed e2       	ldi	r30, 0x2D	; 45
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	87 7f       	andi	r24, 0xF7	; 247
    2128:	8c 93       	st	X, r24
#error "wrong SPI_CLOCK_POLARITY config"
#endif

/*Clock Phase*/
#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
	CLR_BIT(SPCR, SPCR_CPHA);
    212a:	ad e2       	ldi	r26, 0x2D	; 45
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	ed e2       	ldi	r30, 0x2D	; 45
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8b 7f       	andi	r24, 0xFB	; 251
    2136:	8c 93       	st	X, r24
#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
	SET_BIT(SPCR, SPCR_SPR0);
	CLR_BIT(SPCR, SPCR_SPR1);
	SET_BIT(SPSR, SPSR_SPI2X);
#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
	SET_BIT(SPCR, SPCR_SPR0);
    2138:	ad e2       	ldi	r26, 0x2D	; 45
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ed e2       	ldi	r30, 0x2D	; 45
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	81 60       	ori	r24, 0x01	; 1
    2144:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
    2146:	ad e2       	ldi	r26, 0x2D	; 45
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	ed e2       	ldi	r30, 0x2D	; 45
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	8d 7f       	andi	r24, 0xFD	; 253
    2152:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
    2154:	ae e2       	ldi	r26, 0x2E	; 46
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	ee e2       	ldi	r30, 0x2E	; 46
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	8e 7f       	andi	r24, 0xFE	; 254
    2160:	8c 93       	st	X, r24
#error "wrong SPI_CLOCK_RATE config"
#endif

/*SPI Interrupt Enable*/
#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
	CLR_BIT(SPCR, SPCR_SPIE);
    2162:	ad e2       	ldi	r26, 0x2D	; 45
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	ed e2       	ldi	r30, 0x2D	; 45
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	8f 77       	andi	r24, 0x7F	; 127
    216e:	8c 93       	st	X, r24
#error "wrong SPI_INTERRUPT_ENABLE_MODE config"
#endif

/*SPI Enable*/
#if SPI_ENABLE_MODE == SPI_ENABLE
	SET_BIT(SPCR, SPCR_SPE);
    2170:	ad e2       	ldi	r26, 0x2D	; 45
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	ed e2       	ldi	r30, 0x2D	; 45
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	80 64       	ori	r24, 0x40	; 64
    217c:	8c 93       	st	X, r24
#elif SPI_ENABLE_MODE == SPI_DISABLE
	CLR_BIT(SPCR, SPCR_SPE);
#else
#error "wrong SPI_ENABLE_MODE config"
#endif
}
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <SPI_u8InitConfig>:
			6-SPI_FREQ_DIVIDED_BY_64
			7-SPI_FREQ_DIVIDED_BY_128
*/

u8 SPI_u8InitConfig(SPI_CONFIG *spi)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	61 97       	sbiw	r28, 0x11	; 17
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	9b 83       	std	Y+3, r25	; 0x03
    219a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    219c:	19 82       	std	Y+1, r1	; 0x01

	if (
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	9b 81       	ldd	r25, Y+3	; 0x03
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <SPI_u8InitConfig+0x24>
    21a6:	cd c1       	rjmp	.+922    	; 0x2542 <SPI_u8InitConfig+0x3be>
    21a8:	ea 81       	ldd	r30, Y+2	; 0x02
    21aa:	fb 81       	ldd	r31, Y+3	; 0x03
    21ac:	85 81       	ldd	r24, Z+5	; 0x05
    21ae:	88 23       	and	r24, r24
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <SPI_u8InitConfig+0x30>
    21b2:	c7 c1       	rjmp	.+910    	; 0x2542 <SPI_u8InitConfig+0x3be>
    21b4:	ea 81       	ldd	r30, Y+2	; 0x02
    21b6:	fb 81       	ldd	r31, Y+3	; 0x03
    21b8:	84 81       	ldd	r24, Z+4	; 0x04
    21ba:	88 23       	and	r24, r24
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <SPI_u8InitConfig+0x3c>
    21be:	c1 c1       	rjmp	.+898    	; 0x2542 <SPI_u8InitConfig+0x3be>
    21c0:	ea 81       	ldd	r30, Y+2	; 0x02
    21c2:	fb 81       	ldd	r31, Y+3	; 0x03
    21c4:	86 81       	ldd	r24, Z+6	; 0x06
    21c6:	88 23       	and	r24, r24
    21c8:	09 f4       	brne	.+2      	; 0x21cc <SPI_u8InitConfig+0x48>
    21ca:	bb c1       	rjmp	.+886    	; 0x2542 <SPI_u8InitConfig+0x3be>
    21cc:	ea 81       	ldd	r30, Y+2	; 0x02
    21ce:	fb 81       	ldd	r31, Y+3	; 0x03
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	88 23       	and	r24, r24
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <SPI_u8InitConfig+0x54>
    21d6:	b5 c1       	rjmp	.+874    	; 0x2542 <SPI_u8InitConfig+0x3be>
    21d8:	ea 81       	ldd	r30, Y+2	; 0x02
    21da:	fb 81       	ldd	r31, Y+3	; 0x03
    21dc:	80 81       	ld	r24, Z
    21de:	88 23       	and	r24, r24
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <SPI_u8InitConfig+0x60>
    21e2:	af c1       	rjmp	.+862    	; 0x2542 <SPI_u8InitConfig+0x3be>
    21e4:	ea 81       	ldd	r30, Y+2	; 0x02
    21e6:	fb 81       	ldd	r31, Y+3	; 0x03
    21e8:	83 81       	ldd	r24, Z+3	; 0x03
    21ea:	88 23       	and	r24, r24
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <SPI_u8InitConfig+0x6c>
    21ee:	a9 c1       	rjmp	.+850    	; 0x2542 <SPI_u8InitConfig+0x3be>
    21f0:	ea 81       	ldd	r30, Y+2	; 0x02
    21f2:	fb 81       	ldd	r31, Y+3	; 0x03
    21f4:	81 81       	ldd	r24, Z+1	; 0x01
    21f6:	88 23       	and	r24, r24
    21f8:	09 f4       	brne	.+2      	; 0x21fc <SPI_u8InitConfig+0x78>
    21fa:	a3 c1       	rjmp	.+838    	; 0x2542 <SPI_u8InitConfig+0x3be>
			(spi->SPI_u8DataOrder != NULL)         &&
			(spi->SPI_u8InterruptEnable != NULL)   &&
			(spi->SPI_u8MasterSlaveSelect != NULL) &&
			(spi->SPI_u8SPIEnable != NULL))
	{
		switch (spi->SPI_u8ClockPhase)
    21fc:	ea 81       	ldd	r30, Y+2	; 0x02
    21fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2200:	85 81       	ldd	r24, Z+5	; 0x05
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	39 8b       	std	Y+17, r19	; 0x11
    2208:	28 8b       	std	Y+16, r18	; 0x10
    220a:	88 89       	ldd	r24, Y+16	; 0x10
    220c:	99 89       	ldd	r25, Y+17	; 0x11
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	31 f0       	breq	.+12     	; 0x221e <SPI_u8InitConfig+0x9a>
    2212:	28 89       	ldd	r18, Y+16	; 0x10
    2214:	39 89       	ldd	r19, Y+17	; 0x11
    2216:	21 30       	cpi	r18, 0x01	; 1
    2218:	31 05       	cpc	r19, r1
    221a:	49 f0       	breq	.+18     	; 0x222e <SPI_u8InitConfig+0xaa>
    221c:	10 c0       	rjmp	.+32     	; 0x223e <SPI_u8InitConfig+0xba>
		{
		case SPI_SAMPLE_LEADING_SETUP_TRAILING:
			CLR_BIT(SPCR, SPCR_CPHA);
    221e:	ad e2       	ldi	r26, 0x2D	; 45
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	ed e2       	ldi	r30, 0x2D	; 45
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	8b 7f       	andi	r24, 0xFB	; 251
    222a:	8c 93       	st	X, r24
    222c:	0a c0       	rjmp	.+20     	; 0x2242 <SPI_u8InitConfig+0xbe>
			break;
		case SPI_SETUP_LEADING_SAMPLE_TRAILING:
			SET_BIT(SPCR, SPCR_CPHA);
    222e:	ad e2       	ldi	r26, 0x2D	; 45
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ed e2       	ldi	r30, 0x2D	; 45
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	84 60       	ori	r24, 0x04	; 4
    223a:	8c 93       	st	X, r24
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <SPI_u8InitConfig+0xbe>
			break;
		default:
			Local_u8ErrorState = NOK;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8ClockPolarity)
    2242:	ea 81       	ldd	r30, Y+2	; 0x02
    2244:	fb 81       	ldd	r31, Y+3	; 0x03
    2246:	84 81       	ldd	r24, Z+4	; 0x04
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	3f 87       	std	Y+15, r19	; 0x0f
    224e:	2e 87       	std	Y+14, r18	; 0x0e
    2250:	8e 85       	ldd	r24, Y+14	; 0x0e
    2252:	9f 85       	ldd	r25, Y+15	; 0x0f
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	31 f0       	breq	.+12     	; 0x2264 <SPI_u8InitConfig+0xe0>
    2258:	2e 85       	ldd	r18, Y+14	; 0x0e
    225a:	3f 85       	ldd	r19, Y+15	; 0x0f
    225c:	21 30       	cpi	r18, 0x01	; 1
    225e:	31 05       	cpc	r19, r1
    2260:	49 f0       	breq	.+18     	; 0x2274 <SPI_u8InitConfig+0xf0>
    2262:	10 c0       	rjmp	.+32     	; 0x2284 <SPI_u8InitConfig+0x100>
		{
		case SPI_RISING_LEADING_FALLING_TRAILING:
			CLR_BIT(SPCR, SPCR_CPOL);
    2264:	ad e2       	ldi	r26, 0x2D	; 45
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	ed e2       	ldi	r30, 0x2D	; 45
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	87 7f       	andi	r24, 0xF7	; 247
    2270:	8c 93       	st	X, r24
    2272:	0a c0       	rjmp	.+20     	; 0x2288 <SPI_u8InitConfig+0x104>
			break;
		case SPI_FALLING_LEADING_RISING_TRAILING:
			SET_BIT(SPCR, SPCR_CPOL);
    2274:	ad e2       	ldi	r26, 0x2D	; 45
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	ed e2       	ldi	r30, 0x2D	; 45
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	88 60       	ori	r24, 0x08	; 8
    2280:	8c 93       	st	X, r24
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <SPI_u8InitConfig+0x104>
			break;
		default:
			Local_u8ErrorState = NOK;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8ClockRate)
    2288:	ea 81       	ldd	r30, Y+2	; 0x02
    228a:	fb 81       	ldd	r31, Y+3	; 0x03
    228c:	86 81       	ldd	r24, Z+6	; 0x06
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	3d 87       	std	Y+13, r19	; 0x0d
    2294:	2c 87       	std	Y+12, r18	; 0x0c
    2296:	8c 85       	ldd	r24, Y+12	; 0x0c
    2298:	9d 85       	ldd	r25, Y+13	; 0x0d
    229a:	83 30       	cpi	r24, 0x03	; 3
    229c:	91 05       	cpc	r25, r1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <SPI_u8InitConfig+0x11e>
    22a0:	6a c0       	rjmp	.+212    	; 0x2376 <SPI_u8InitConfig+0x1f2>
    22a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    22a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    22a6:	24 30       	cpi	r18, 0x04	; 4
    22a8:	31 05       	cpc	r19, r1
    22aa:	84 f4       	brge	.+32     	; 0x22cc <SPI_u8InitConfig+0x148>
    22ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    22ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	91 05       	cpc	r25, r1
    22b4:	a1 f1       	breq	.+104    	; 0x231e <SPI_u8InitConfig+0x19a>
    22b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    22b8:	3d 85       	ldd	r19, Y+13	; 0x0d
    22ba:	22 30       	cpi	r18, 0x02	; 2
    22bc:	31 05       	cpc	r19, r1
    22be:	0c f0       	brlt	.+2      	; 0x22c2 <SPI_u8InitConfig+0x13e>
    22c0:	44 c0       	rjmp	.+136    	; 0x234a <SPI_u8InitConfig+0x1c6>
    22c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    22c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	a1 f0       	breq	.+40     	; 0x22f2 <SPI_u8InitConfig+0x16e>
    22ca:	ad c0       	rjmp	.+346    	; 0x2426 <SPI_u8InitConfig+0x2a2>
    22cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    22ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    22d0:	25 30       	cpi	r18, 0x05	; 5
    22d2:	31 05       	cpc	r19, r1
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <SPI_u8InitConfig+0x154>
    22d6:	7b c0       	rjmp	.+246    	; 0x23ce <SPI_u8InitConfig+0x24a>
    22d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    22da:	9d 85       	ldd	r25, Y+13	; 0x0d
    22dc:	85 30       	cpi	r24, 0x05	; 5
    22de:	91 05       	cpc	r25, r1
    22e0:	0c f4       	brge	.+2      	; 0x22e4 <SPI_u8InitConfig+0x160>
    22e2:	5f c0       	rjmp	.+190    	; 0x23a2 <SPI_u8InitConfig+0x21e>
    22e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    22e6:	3d 85       	ldd	r19, Y+13	; 0x0d
    22e8:	26 30       	cpi	r18, 0x06	; 6
    22ea:	31 05       	cpc	r19, r1
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <SPI_u8InitConfig+0x16c>
    22ee:	85 c0       	rjmp	.+266    	; 0x23fa <SPI_u8InitConfig+0x276>
    22f0:	9a c0       	rjmp	.+308    	; 0x2426 <SPI_u8InitConfig+0x2a2>
		{
		case SPI_FREQ_DIVIDED_BY_2:
			CLR_BIT(SPCR, SPCR_SPR0);
    22f2:	ad e2       	ldi	r26, 0x2D	; 45
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	ed e2       	ldi	r30, 0x2D	; 45
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	8e 7f       	andi	r24, 0xFE	; 254
    22fe:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    2300:	ad e2       	ldi	r26, 0x2D	; 45
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	ed e2       	ldi	r30, 0x2D	; 45
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	8d 7f       	andi	r24, 0xFD	; 253
    230c:	8c 93       	st	X, r24
			SET_BIT(SPSR, SPSR_SPI2X);
    230e:	ae e2       	ldi	r26, 0x2E	; 46
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	ee e2       	ldi	r30, 0x2E	; 46
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	81 60       	ori	r24, 0x01	; 1
    231a:	8c 93       	st	X, r24
    231c:	86 c0       	rjmp	.+268    	; 0x242a <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_4:
			CLR_BIT(SPCR, SPCR_SPR0);
    231e:	ad e2       	ldi	r26, 0x2D	; 45
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	ed e2       	ldi	r30, 0x2D	; 45
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	8e 7f       	andi	r24, 0xFE	; 254
    232a:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    232c:	ad e2       	ldi	r26, 0x2D	; 45
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ed e2       	ldi	r30, 0x2D	; 45
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	8d 7f       	andi	r24, 0xFD	; 253
    2338:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    233a:	ae e2       	ldi	r26, 0x2E	; 46
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	ee e2       	ldi	r30, 0x2E	; 46
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	8e 7f       	andi	r24, 0xFE	; 254
    2346:	8c 93       	st	X, r24
    2348:	70 c0       	rjmp	.+224    	; 0x242a <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_8:
			SET_BIT(SPCR, SPCR_SPR0);
    234a:	ad e2       	ldi	r26, 0x2D	; 45
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	ed e2       	ldi	r30, 0x2D	; 45
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	81 60       	ori	r24, 0x01	; 1
    2356:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    2358:	ad e2       	ldi	r26, 0x2D	; 45
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	ed e2       	ldi	r30, 0x2D	; 45
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	8d 7f       	andi	r24, 0xFD	; 253
    2364:	8c 93       	st	X, r24
			SET_BIT(SPSR, SPSR_SPI2X);
    2366:	ae e2       	ldi	r26, 0x2E	; 46
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	ee e2       	ldi	r30, 0x2E	; 46
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	81 60       	ori	r24, 0x01	; 1
    2372:	8c 93       	st	X, r24
    2374:	5a c0       	rjmp	.+180    	; 0x242a <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_16:
			SET_BIT(SPCR, SPCR_SPR0);
    2376:	ad e2       	ldi	r26, 0x2D	; 45
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	ed e2       	ldi	r30, 0x2D	; 45
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	81 60       	ori	r24, 0x01	; 1
    2382:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    2384:	ad e2       	ldi	r26, 0x2D	; 45
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	ed e2       	ldi	r30, 0x2D	; 45
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	8d 7f       	andi	r24, 0xFD	; 253
    2390:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    2392:	ae e2       	ldi	r26, 0x2E	; 46
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	ee e2       	ldi	r30, 0x2E	; 46
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	8e 7f       	andi	r24, 0xFE	; 254
    239e:	8c 93       	st	X, r24
    23a0:	44 c0       	rjmp	.+136    	; 0x242a <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_32:
			CLR_BIT(SPCR, SPCR_SPR0);
    23a2:	ad e2       	ldi	r26, 0x2D	; 45
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	ed e2       	ldi	r30, 0x2D	; 45
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	8e 7f       	andi	r24, 0xFE	; 254
    23ae:	8c 93       	st	X, r24
			SET_BIT(SPCR, SPCR_SPR1);
    23b0:	ad e2       	ldi	r26, 0x2D	; 45
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	ed e2       	ldi	r30, 0x2D	; 45
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	82 60       	ori	r24, 0x02	; 2
    23bc:	8c 93       	st	X, r24
			SET_BIT(SPSR, SPSR_SPI2X);
    23be:	ae e2       	ldi	r26, 0x2E	; 46
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	ee e2       	ldi	r30, 0x2E	; 46
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	81 60       	ori	r24, 0x01	; 1
    23ca:	8c 93       	st	X, r24
    23cc:	2e c0       	rjmp	.+92     	; 0x242a <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_64:
			CLR_BIT(SPCR, SPCR_SPR0);
    23ce:	ad e2       	ldi	r26, 0x2D	; 45
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ed e2       	ldi	r30, 0x2D	; 45
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8e 7f       	andi	r24, 0xFE	; 254
    23da:	8c 93       	st	X, r24
			SET_BIT(SPCR, SPCR_SPR1);
    23dc:	ad e2       	ldi	r26, 0x2D	; 45
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	ed e2       	ldi	r30, 0x2D	; 45
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	82 60       	ori	r24, 0x02	; 2
    23e8:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    23ea:	ae e2       	ldi	r26, 0x2E	; 46
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	ee e2       	ldi	r30, 0x2E	; 46
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8e 7f       	andi	r24, 0xFE	; 254
    23f6:	8c 93       	st	X, r24
    23f8:	18 c0       	rjmp	.+48     	; 0x242a <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_128:
			SET_BIT(SPCR, SPCR_SPR0);
    23fa:	ad e2       	ldi	r26, 0x2D	; 45
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	ed e2       	ldi	r30, 0x2D	; 45
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	81 60       	ori	r24, 0x01	; 1
    2406:	8c 93       	st	X, r24
			SET_BIT(SPCR, SPCR_SPR1);
    2408:	ad e2       	ldi	r26, 0x2D	; 45
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	ed e2       	ldi	r30, 0x2D	; 45
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	82 60       	ori	r24, 0x02	; 2
    2414:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    2416:	ae e2       	ldi	r26, 0x2E	; 46
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	ee e2       	ldi	r30, 0x2E	; 46
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	8e 7f       	andi	r24, 0xFE	; 254
    2422:	8c 93       	st	X, r24
    2424:	02 c0       	rjmp	.+4      	; 0x242a <SPI_u8InitConfig+0x2a6>
			break;
		default:
			Local_u8ErrorState = NOK;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8DataOrder)
    242a:	ea 81       	ldd	r30, Y+2	; 0x02
    242c:	fb 81       	ldd	r31, Y+3	; 0x03
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	3b 87       	std	Y+11, r19	; 0x0b
    2436:	2a 87       	std	Y+10, r18	; 0x0a
    2438:	8a 85       	ldd	r24, Y+10	; 0x0a
    243a:	9b 85       	ldd	r25, Y+11	; 0x0b
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	69 f0       	breq	.+26     	; 0x245a <SPI_u8InitConfig+0x2d6>
    2440:	2a 85       	ldd	r18, Y+10	; 0x0a
    2442:	3b 85       	ldd	r19, Y+11	; 0x0b
    2444:	21 30       	cpi	r18, 0x01	; 1
    2446:	31 05       	cpc	r19, r1
    2448:	81 f4       	brne	.+32     	; 0x246a <SPI_u8InitConfig+0x2e6>
		{
		case SPI_DATA_MSP_FIRST:
			CLR_BIT(SPCR, SPCR_DORD);
    244a:	ad e2       	ldi	r26, 0x2D	; 45
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	ed e2       	ldi	r30, 0x2D	; 45
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	8f 7d       	andi	r24, 0xDF	; 223
    2456:	8c 93       	st	X, r24
    2458:	0a c0       	rjmp	.+20     	; 0x246e <SPI_u8InitConfig+0x2ea>
			break;
		case SPI_DATA_LSB_FIRST:
			SET_BIT(SPCR, SPCR_DORD);
    245a:	ad e2       	ldi	r26, 0x2D	; 45
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	ed e2       	ldi	r30, 0x2D	; 45
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	80 62       	ori	r24, 0x20	; 32
    2466:	8c 93       	st	X, r24
    2468:	02 c0       	rjmp	.+4      	; 0x246e <SPI_u8InitConfig+0x2ea>
			break;
		default:
			Local_u8ErrorState = NOK;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8MasterSlaveSelect)
    246e:	ea 81       	ldd	r30, Y+2	; 0x02
    2470:	fb 81       	ldd	r31, Y+3	; 0x03
    2472:	83 81       	ldd	r24, Z+3	; 0x03
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	39 87       	std	Y+9, r19	; 0x09
    247a:	28 87       	std	Y+8, r18	; 0x08
    247c:	88 85       	ldd	r24, Y+8	; 0x08
    247e:	99 85       	ldd	r25, Y+9	; 0x09
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	31 f0       	breq	.+12     	; 0x2490 <SPI_u8InitConfig+0x30c>
    2484:	28 85       	ldd	r18, Y+8	; 0x08
    2486:	39 85       	ldd	r19, Y+9	; 0x09
    2488:	21 30       	cpi	r18, 0x01	; 1
    248a:	31 05       	cpc	r19, r1
    248c:	49 f0       	breq	.+18     	; 0x24a0 <SPI_u8InitConfig+0x31c>
    248e:	10 c0       	rjmp	.+32     	; 0x24b0 <SPI_u8InitConfig+0x32c>
		{
		case SPI_MASTER:
			SET_BIT(SPCR, SPCR_MSTR);
    2490:	ad e2       	ldi	r26, 0x2D	; 45
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	ed e2       	ldi	r30, 0x2D	; 45
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	80 61       	ori	r24, 0x10	; 16
    249c:	8c 93       	st	X, r24
    249e:	0a c0       	rjmp	.+20     	; 0x24b4 <SPI_u8InitConfig+0x330>
			break;
		case SPI_SLAVE:
			CLR_BIT(SPCR, SPCR_MSTR);
    24a0:	ad e2       	ldi	r26, 0x2D	; 45
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	ed e2       	ldi	r30, 0x2D	; 45
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	8f 7e       	andi	r24, 0xEF	; 239
    24ac:	8c 93       	st	X, r24
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <SPI_u8InitConfig+0x330>
			break;
		default:
			Local_u8ErrorState = NOK;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8InterruptEnable)
    24b4:	ea 81       	ldd	r30, Y+2	; 0x02
    24b6:	fb 81       	ldd	r31, Y+3	; 0x03
    24b8:	80 81       	ld	r24, Z
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	3f 83       	std	Y+7, r19	; 0x07
    24c0:	2e 83       	std	Y+6, r18	; 0x06
    24c2:	8e 81       	ldd	r24, Y+6	; 0x06
    24c4:	9f 81       	ldd	r25, Y+7	; 0x07
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	31 f0       	breq	.+12     	; 0x24d6 <SPI_u8InitConfig+0x352>
    24ca:	2e 81       	ldd	r18, Y+6	; 0x06
    24cc:	3f 81       	ldd	r19, Y+7	; 0x07
    24ce:	21 30       	cpi	r18, 0x01	; 1
    24d0:	31 05       	cpc	r19, r1
    24d2:	49 f0       	breq	.+18     	; 0x24e6 <SPI_u8InitConfig+0x362>
    24d4:	10 c0       	rjmp	.+32     	; 0x24f6 <SPI_u8InitConfig+0x372>
		{
		case SPI_INTERRUPT_DISABLE:
			CLR_BIT(SPCR, SPCR_SPIE);
    24d6:	ad e2       	ldi	r26, 0x2D	; 45
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ed e2       	ldi	r30, 0x2D	; 45
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 77       	andi	r24, 0x7F	; 127
    24e2:	8c 93       	st	X, r24
    24e4:	0a c0       	rjmp	.+20     	; 0x24fa <SPI_u8InitConfig+0x376>
			break;
		case SPI_INTERRUPT_ENABLE:
			SET_BIT(SPCR, SPCR_SPIE);
    24e6:	ad e2       	ldi	r26, 0x2D	; 45
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	ed e2       	ldi	r30, 0x2D	; 45
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	80 68       	ori	r24, 0x80	; 128
    24f2:	8c 93       	st	X, r24
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <SPI_u8InitConfig+0x376>
			break;
		default:
			Local_u8ErrorState = NOK;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8SPIEnable)
    24fa:	ea 81       	ldd	r30, Y+2	; 0x02
    24fc:	fb 81       	ldd	r31, Y+3	; 0x03
    24fe:	81 81       	ldd	r24, Z+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3d 83       	std	Y+5, r19	; 0x05
    2506:	2c 83       	std	Y+4, r18	; 0x04
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	31 f0       	breq	.+12     	; 0x251c <SPI_u8InitConfig+0x398>
    2510:	2c 81       	ldd	r18, Y+4	; 0x04
    2512:	3d 81       	ldd	r19, Y+5	; 0x05
    2514:	21 30       	cpi	r18, 0x01	; 1
    2516:	31 05       	cpc	r19, r1
    2518:	49 f0       	breq	.+18     	; 0x252c <SPI_u8InitConfig+0x3a8>
    251a:	10 c0       	rjmp	.+32     	; 0x253c <SPI_u8InitConfig+0x3b8>
		{
		case SPI_DISABLE:
			CLR_BIT(SPCR, SPCR_SPE);
    251c:	ad e2       	ldi	r26, 0x2D	; 45
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	ed e2       	ldi	r30, 0x2D	; 45
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	8f 7b       	andi	r24, 0xBF	; 191
    2528:	8c 93       	st	X, r24
    252a:	0d c0       	rjmp	.+26     	; 0x2546 <SPI_u8InitConfig+0x3c2>
			break;
		case SPI_ENABLE:
			SET_BIT(SPCR, SPCR_SPE);
    252c:	ad e2       	ldi	r26, 0x2D	; 45
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	ed e2       	ldi	r30, 0x2D	; 45
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	80 64       	ori	r24, 0x40	; 64
    2538:	8c 93       	st	X, r24
    253a:	05 c0       	rjmp	.+10     	; 0x2546 <SPI_u8InitConfig+0x3c2>
			break;
		default:
			Local_u8ErrorState = NOK;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <SPI_u8InitConfig+0x3c2>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2546:	89 81       	ldd	r24, Y+1	; 0x01
}
    2548:	61 96       	adiw	r28, 0x11	; 17
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <SPI_u8Tranceive>:
 *		Copy_u8RData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 SPI_u8Tranceive(u8 Copy_u8TData, u8 *Copy_u8RData)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	28 97       	sbiw	r28, 0x08	; 8
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	8e 83       	std	Y+6, r24	; 0x06
    2570:	78 87       	std	Y+8, r23	; 0x08
    2572:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK;
    2574:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32TimeoutCounter = 0;
    2576:	19 82       	std	Y+1, r1	; 0x01
    2578:	1a 82       	std	Y+2, r1	; 0x02
    257a:	1b 82       	std	Y+3, r1	; 0x03
    257c:	1c 82       	std	Y+4, r1	; 0x04

	if (SPI_u8State == IDLE)
    257e:	80 91 ed 01 	lds	r24, 0x01ED
    2582:	88 23       	and	r24, r24
    2584:	09 f0       	breq	.+2      	; 0x2588 <SPI_u8Tranceive+0x2e>
    2586:	42 c0       	rjmp	.+132    	; 0x260c <SPI_u8Tranceive+0xb2>
	{
		SPI_u8State = BUSY;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	80 93 ed 01 	sts	0x01ED, r24

		SPDR = Copy_u8TData;
    258e:	ef e2       	ldi	r30, 0x2F	; 47
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	8e 81       	ldd	r24, Y+6	; 0x06
    2594:	80 83       	st	Z, r24
    2596:	0b c0       	rjmp	.+22     	; 0x25ae <SPI_u8Tranceive+0x54>

		while (((READ_BIT(SPSR, SPSR_SPIF)) == 0) &&
		      (Local_u32TimeoutCounter < SPI_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	ab 81       	ldd	r26, Y+3	; 0x03
    259e:	bc 81       	ldd	r27, Y+4	; 0x04
    25a0:	01 96       	adiw	r24, 0x01	; 1
    25a2:	a1 1d       	adc	r26, r1
    25a4:	b1 1d       	adc	r27, r1
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	ab 83       	std	Y+3, r26	; 0x03
    25ac:	bc 83       	std	Y+4, r27	; 0x04
	{
		SPI_u8State = BUSY;

		SPDR = Copy_u8TData;

		while (((READ_BIT(SPSR, SPSR_SPIF)) == 0) &&
    25ae:	ee e2       	ldi	r30, 0x2E	; 46
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	88 1f       	adc	r24, r24
    25b6:	88 27       	eor	r24, r24
    25b8:	88 1f       	adc	r24, r24
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	90 70       	andi	r25, 0x00	; 0
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	61 f4       	brne	.+24     	; 0x25dc <SPI_u8Tranceive+0x82>
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	ab 81       	ldd	r26, Y+3	; 0x03
    25ca:	bc 81       	ldd	r27, Y+4	; 0x04
    25cc:	80 31       	cpi	r24, 0x10	; 16
    25ce:	27 e2       	ldi	r18, 0x27	; 39
    25d0:	92 07       	cpc	r25, r18
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	a2 07       	cpc	r26, r18
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	b2 07       	cpc	r27, r18
    25da:	f0 f2       	brcs	.-68     	; 0x2598 <SPI_u8Tranceive+0x3e>
		      (Local_u32TimeoutCounter < SPI_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
		}
		if (Local_u32TimeoutCounter == SPI_u32TIMEOUT)
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	ab 81       	ldd	r26, Y+3	; 0x03
    25e2:	bc 81       	ldd	r27, Y+4	; 0x04
    25e4:	80 31       	cpi	r24, 0x10	; 16
    25e6:	27 e2       	ldi	r18, 0x27	; 39
    25e8:	92 07       	cpc	r25, r18
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	a2 07       	cpc	r26, r18
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	b2 07       	cpc	r27, r18
    25f2:	19 f4       	brne	.+6      	; 0x25fa <SPI_u8Tranceive+0xa0>
		{
			Local_u8ErrorState = TIMEOUT_STATE;
    25f4:	84 e0       	ldi	r24, 0x04	; 4
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	06 c0       	rjmp	.+12     	; 0x2606 <SPI_u8Tranceive+0xac>
		}
		else
		{
			*Copy_u8RData = SPDR;
    25fa:	ef e2       	ldi	r30, 0x2F	; 47
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	ef 81       	ldd	r30, Y+7	; 0x07
    2602:	f8 85       	ldd	r31, Y+8	; 0x08
    2604:	80 83       	st	Z, r24
		}
		SPI_u8State = IDLE;
    2606:	10 92 ed 01 	sts	0x01ED, r1
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <SPI_u8Tranceive+0xb6>
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE;
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrorState;
    2610:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2612:	28 96       	adiw	r28, 0x08	; 8
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <SPI_u8BufferTranceiverSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 SPI_u8BufferTranceiverSynch(u8 *Copy_u8TData, u8 *Copy_u8RData, u8 Copy_u8BufferSize)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	27 97       	sbiw	r28, 0x07	; 7
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
    263c:	7e 83       	std	Y+6, r23	; 0x06
    263e:	6d 83       	std	Y+5, r22	; 0x05
    2640:	4f 83       	std	Y+7, r20	; 0x07
	u8 Local_u8ErrorState = OK;
    2642:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter = 0;
    2644:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	09 f1       	breq	.+66     	; 0x2690 <SPI_u8BufferTranceiverSynch+0x6c>
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	e9 f0       	breq	.+58     	; 0x2690 <SPI_u8BufferTranceiverSynch+0x6c>
    2656:	17 c0       	rjmp	.+46     	; 0x2686 <SPI_u8BufferTranceiverSynch+0x62>
	{
		while (Local_u8Counter < Copy_u8BufferSize)
		{
			SPI_u8Tranceive(Copy_u8TData[Local_u8Counter], &Copy_u8RData[Local_u8Counter]);
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	fc 01       	movw	r30, r24
    2664:	e2 0f       	add	r30, r18
    2666:	f3 1f       	adc	r31, r19
    2668:	40 81       	ld	r20, Z
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	28 0f       	add	r18, r24
    2676:	39 1f       	adc	r19, r25
    2678:	84 2f       	mov	r24, r20
    267a:	b9 01       	movw	r22, r18
    267c:	0e 94 ad 12 	call	0x255a	; 0x255a <SPI_u8Tranceive>
			Local_u8Counter++;
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	8f 5f       	subi	r24, 0xFF	; 255
    2684:	89 83       	std	Y+1, r24	; 0x01
{
	u8 Local_u8ErrorState = OK;
	u8 Local_u8Counter = 0;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
	{
		while (Local_u8Counter < Copy_u8BufferSize)
    2686:	99 81       	ldd	r25, Y+1	; 0x01
    2688:	8f 81       	ldd	r24, Y+7	; 0x07
    268a:	98 17       	cp	r25, r24
    268c:	28 f3       	brcs	.-54     	; 0x2658 <SPI_u8BufferTranceiverSynch+0x34>
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <SPI_u8BufferTranceiverSynch+0x70>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2696:	27 96       	adiw	r28, 0x07	; 7
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <SPI_u8BufferTranceiverAsynch>:
 *		      NotificationFuncn => function that called after the tranceive complete
 *
 * return     : Error status with type u8
 */
u8 SPI_u8BufferTranceiverAsynch(SPI_BUFFER *spi_buffer)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <SPI_u8BufferTranceiverAsynch+0x6>
    26ae:	0f 92       	push	r0
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	9b 83       	std	Y+3, r25	; 0x03
    26b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    26b8:	19 82       	std	Y+1, r1	; 0x01

	if (SPI_u8State == IDLE)
    26ba:	80 91 ed 01 	lds	r24, 0x01ED
    26be:	88 23       	and	r24, r24
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <SPI_u8BufferTranceiverAsynch+0x1c>
    26c2:	55 c0       	rjmp	.+170    	; 0x276e <SPI_u8BufferTranceiverAsynch+0xc6>
	{
		if ((spi_buffer != NULL) &&
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	9b 81       	ldd	r25, Y+3	; 0x03
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	09 f4       	brne	.+2      	; 0x26ce <SPI_u8BufferTranceiverAsynch+0x26>
    26cc:	4d c0       	rjmp	.+154    	; 0x2768 <SPI_u8BufferTranceiverAsynch+0xc0>
    26ce:	ea 81       	ldd	r30, Y+2	; 0x02
    26d0:	fb 81       	ldd	r31, Y+3	; 0x03
    26d2:	80 81       	ld	r24, Z
    26d4:	91 81       	ldd	r25, Z+1	; 0x01
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	09 f4       	brne	.+2      	; 0x26dc <SPI_u8BufferTranceiverAsynch+0x34>
    26da:	46 c0       	rjmp	.+140    	; 0x2768 <SPI_u8BufferTranceiverAsynch+0xc0>
    26dc:	ea 81       	ldd	r30, Y+2	; 0x02
    26de:	fb 81       	ldd	r31, Y+3	; 0x03
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	09 f4       	brne	.+2      	; 0x26ea <SPI_u8BufferTranceiverAsynch+0x42>
    26e8:	3f c0       	rjmp	.+126    	; 0x2768 <SPI_u8BufferTranceiverAsynch+0xc0>
    26ea:	ea 81       	ldd	r30, Y+2	; 0x02
    26ec:	fb 81       	ldd	r31, Y+3	; 0x03
    26ee:	85 81       	ldd	r24, Z+5	; 0x05
    26f0:	96 81       	ldd	r25, Z+6	; 0x06
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	c9 f1       	breq	.+114    	; 0x2768 <SPI_u8BufferTranceiverAsynch+0xc0>
		(spi_buffer->Copy_u8TData != NULL) &&
		(spi_buffer->Copy_u8RData != NULL) &&
		(spi_buffer->NotificationFuncn != NULL))
		{
			/*SPI is now Busy*/
			SPI_u8State = BUSY;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	80 93 ed 01 	sts	0x01ED, r24

			/*Assign the SPI data globally*/
			SPI_pu8TData           = spi_buffer->Copy_u8TData     ;
    26fc:	ea 81       	ldd	r30, Y+2	; 0x02
    26fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2700:	80 81       	ld	r24, Z
    2702:	91 81       	ldd	r25, Z+1	; 0x01
    2704:	90 93 e8 01 	sts	0x01E8, r25
    2708:	80 93 e7 01 	sts	0x01E7, r24
			SPI_pu8RData           = spi_buffer->Copy_u8RData     ;
    270c:	ea 81       	ldd	r30, Y+2	; 0x02
    270e:	fb 81       	ldd	r31, Y+3	; 0x03
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	90 93 ea 01 	sts	0x01EA, r25
    2718:	80 93 e9 01 	sts	0x01E9, r24
			SPI_u8BufferSize       = spi_buffer->Copy_u8BufferSize;
    271c:	ea 81       	ldd	r30, Y+2	; 0x02
    271e:	fb 81       	ldd	r31, Y+3	; 0x03
    2720:	84 81       	ldd	r24, Z+4	; 0x04
    2722:	80 93 ee 01 	sts	0x01EE, r24
			SPI_pvNotificationFunc = spi_buffer->NotificationFuncn;
    2726:	ea 81       	ldd	r30, Y+2	; 0x02
    2728:	fb 81       	ldd	r31, Y+3	; 0x03
    272a:	85 81       	ldd	r24, Z+5	; 0x05
    272c:	96 81       	ldd	r25, Z+6	; 0x06
    272e:	90 93 ec 01 	sts	0x01EC, r25
    2732:	80 93 eb 01 	sts	0x01EB, r24

			/*Set Index to first element*/
			SPI_u8Index = 0;
    2736:	10 92 ef 01 	sts	0x01EF, r1

			/*Transmit first Data */
			SPDR = SPI_pu8TData[SPI_u8Index];
    273a:	af e2       	ldi	r26, 0x2F	; 47
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	20 91 e7 01 	lds	r18, 0x01E7
    2742:	30 91 e8 01 	lds	r19, 0x01E8
    2746:	80 91 ef 01 	lds	r24, 0x01EF
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	f9 01       	movw	r30, r18
    2750:	e8 0f       	add	r30, r24
    2752:	f9 1f       	adc	r31, r25
    2754:	80 81       	ld	r24, Z
    2756:	8c 93       	st	X, r24

			/*SPI Interrupt Enable*/
			SET_BIT(SPCR, SPCR_SPIE);
    2758:	ad e2       	ldi	r26, 0x2D	; 45
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ed e2       	ldi	r30, 0x2D	; 45
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	80 68       	ori	r24, 0x80	; 128
    2764:	8c 93       	st	X, r24
    2766:	05 c0       	rjmp	.+10     	; 0x2772 <SPI_u8BufferTranceiverAsynch+0xca>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER;
    2768:	82 e0       	ldi	r24, 0x02	; 2
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <SPI_u8BufferTranceiverAsynch+0xca>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE;
    276e:	83 e0       	ldi	r24, 0x03	; 3
    2770:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2772:	89 81       	ldd	r24, Y+1	; 0x01
}
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <__vector_12>:

//-------------------------------------------------------------------------------------------------------------------------------

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    2780:	1f 92       	push	r1
    2782:	0f 92       	push	r0
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	0f 92       	push	r0
    2788:	11 24       	eor	r1, r1
    278a:	2f 93       	push	r18
    278c:	3f 93       	push	r19
    278e:	4f 93       	push	r20
    2790:	5f 93       	push	r21
    2792:	6f 93       	push	r22
    2794:	7f 93       	push	r23
    2796:	8f 93       	push	r24
    2798:	9f 93       	push	r25
    279a:	af 93       	push	r26
    279c:	bf 93       	push	r27
    279e:	ef 93       	push	r30
    27a0:	ff 93       	push	r31
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
	/*Receive Data*/
	SPI_pu8RData[SPI_u8Index] = SPDR;
    27aa:	20 91 e9 01 	lds	r18, 0x01E9
    27ae:	30 91 ea 01 	lds	r19, 0x01EA
    27b2:	80 91 ef 01 	lds	r24, 0x01EF
    27b6:	88 2f       	mov	r24, r24
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	d9 01       	movw	r26, r18
    27bc:	a8 0f       	add	r26, r24
    27be:	b9 1f       	adc	r27, r25
    27c0:	ef e2       	ldi	r30, 0x2F	; 47
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8c 93       	st	X, r24

	/*Increment Data index of the buffer*/
	SPI_u8Index++;
    27c8:	80 91 ef 01 	lds	r24, 0x01EF
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	80 93 ef 01 	sts	0x01EF, r24

	if (SPI_u8Index == SPI_u8BufferSize)
    27d2:	90 91 ef 01 	lds	r25, 0x01EF
    27d6:	80 91 ee 01 	lds	r24, 0x01EE
    27da:	98 17       	cp	r25, r24
    27dc:	a9 f4       	brne	.+42     	; 0x2808 <__vector_12+0x88>
	{
		/*Buffer Complete*/

		/*SPI is now IDLE*/
		SPI_u8State = IDLE;
    27de:	10 92 ed 01 	sts	0x01ED, r1

		/*SPI Interrupt Disable*/
		CLR_BIT(SPCR, SPCR_SPIE);
    27e2:	ad e2       	ldi	r26, 0x2D	; 45
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	ed e2       	ldi	r30, 0x2D	; 45
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	8f 77       	andi	r24, 0x7F	; 127
    27ee:	8c 93       	st	X, r24

		/*Call Notification Function*/
		if (SPI_pvNotificationFunc != NULL)
    27f0:	80 91 eb 01 	lds	r24, 0x01EB
    27f4:	90 91 ec 01 	lds	r25, 0x01EC
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	a9 f0       	breq	.+42     	; 0x2826 <__vector_12+0xa6>
		{
			SPI_pvNotificationFunc();
    27fc:	e0 91 eb 01 	lds	r30, 0x01EB
    2800:	f0 91 ec 01 	lds	r31, 0x01EC
    2804:	09 95       	icall
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <__vector_12+0xa6>
	else
	{
		/*Buffer not Complete*/

		/*Transmit next Data*/
		SPDR = SPI_pu8TData[SPI_u8Index];
    2808:	af e2       	ldi	r26, 0x2F	; 47
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	20 91 e7 01 	lds	r18, 0x01E7
    2810:	30 91 e8 01 	lds	r19, 0x01E8
    2814:	80 91 ef 01 	lds	r24, 0x01EF
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	f9 01       	movw	r30, r18
    281e:	e8 0f       	add	r30, r24
    2820:	f9 1f       	adc	r31, r25
    2822:	80 81       	ld	r24, Z
    2824:	8c 93       	st	X, r24
	}
}
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	ff 91       	pop	r31
    282c:	ef 91       	pop	r30
    282e:	bf 91       	pop	r27
    2830:	af 91       	pop	r26
    2832:	9f 91       	pop	r25
    2834:	8f 91       	pop	r24
    2836:	7f 91       	pop	r23
    2838:	6f 91       	pop	r22
    283a:	5f 91       	pop	r21
    283c:	4f 91       	pop	r20
    283e:	3f 91       	pop	r19
    2840:	2f 91       	pop	r18
    2842:	0f 90       	pop	r0
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	0f 90       	pop	r0
    2848:	1f 90       	pop	r1
    284a:	18 95       	reti

0000284c <GIE_vEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vEnable(void)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG, SREG_I_BIT);
    2854:	af e5       	ldi	r26, 0x5F	; 95
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	ef e5       	ldi	r30, 0x5F	; 95
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	80 68       	ori	r24, 0x80	; 128
    2860:	8c 93       	st	X, r24
}
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <GIE_vDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vDisable(void)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG, SREG_I_BIT);
    2870:	af e5       	ldi	r26, 0x5F	; 95
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	ef e5       	ldi	r30, 0x5F	; 95
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	8f 77       	andi	r24, 0x7F	; 127
    287c:	8c 93       	st	X, r24
}
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <EEPROM_vWrite>:
Function Returns     : void
Function Arguments   : unsigned short address, unsigned char data
Function Description :  write one byte to the given  address.
*/
void EEPROM_vWrite(u16 address, u8 data)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	00 d0       	rcall	.+0      	; 0x288a <EEPROM_vWrite+0x6>
    288a:	0f 92       	push	r0
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	6b 83       	std	Y+3, r22	; 0x03
  /*set up address register*/
  EEAR_REG = address;
    2896:	ee e3       	ldi	r30, 0x3E	; 62
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	9a 81       	ldd	r25, Y+2	; 0x02
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
  /*set up data register*/
  EEDR_REG = data;
    28a2:	ed e3       	ldi	r30, 0x3D	; 61
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	80 83       	st	Z, r24
  /*write logical one to EEMWE*/
  SET_BIT(EECR_REG, EECR_EEMWE);
    28aa:	ac e3       	ldi	r26, 0x3C	; 60
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	ec e3       	ldi	r30, 0x3C	; 60
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	84 60       	ori	r24, 0x04	; 4
    28b6:	8c 93       	st	X, r24
  /*start EEPROM write by setting EEWE*/
  SET_BIT(EECR_REG, EECR_EEWE );
    28b8:	ac e3       	ldi	r26, 0x3C	; 60
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	ec e3       	ldi	r30, 0x3C	; 60
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	82 60       	ori	r24, 0x02	; 2
    28c4:	8c 93       	st	X, r24
  /* wait for completion of  write operation*/
  while (READ_BIT(EECR_REG, EECR_EEWE) == 1);
    28c6:	ec e3       	ldi	r30, 0x3C	; 60
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	88 2f       	mov	r24, r24
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	82 70       	andi	r24, 0x02	; 2
    28d2:	90 70       	andi	r25, 0x00	; 0
    28d4:	95 95       	asr	r25
    28d6:	87 95       	ror	r24
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	91 05       	cpc	r25, r1
    28dc:	a1 f3       	breq	.-24     	; 0x28c6 <EEPROM_vWrite+0x42>
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <EEPROM_vRead>:
Function Returns     : unsigned char
Function Arguments   :  unsigned short address
Function Description :  read one byte from the given  address.
*/
u8 EEPROM_vRead(u16 address)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <EEPROM_vRead+0x6>
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	9a 83       	std	Y+2, r25	; 0x02
    28f6:	89 83       	std	Y+1, r24	; 0x01
  /*set up address register*/
  EEARL_REG = (char)address;
    28f8:	ee e3       	ldi	r30, 0x3E	; 62
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	80 83       	st	Z, r24
  EEARH_REG = (char)(address >> 8);
    2900:	ef e3       	ldi	r30, 0x3F	; 63
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	89 2f       	mov	r24, r25
    290a:	99 27       	eor	r25, r25
    290c:	80 83       	st	Z, r24
  /*start EEPROM read by setting EERE*/
  SET_BIT(EECR_REG, EECR_EERE);
    290e:	ac e3       	ldi	r26, 0x3C	; 60
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ec e3       	ldi	r30, 0x3C	; 60
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	81 60       	ori	r24, 0x01	; 1
    291a:	8c 93       	st	X, r24
  /*return data from data register*/
  return EEDR_REG;
    291c:	ed e3       	ldi	r30, 0x3D	; 61
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
}
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	28 97       	sbiw	r28, 0x08	; 8
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	8a 83       	std	Y+2, r24	; 0x02
    2942:	6b 83       	std	Y+3, r22	; 0x03
    2944:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	84 30       	cpi	r24, 0x04	; 4
    294e:	08 f0       	brcs	.+2      	; 0x2952 <DIO_enumSetPinDir+0x26>
    2950:	f1 c0       	rjmp	.+482    	; 0x2b34 <DIO_enumSetPinDir+0x208>
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	88 30       	cpi	r24, 0x08	; 8
    2956:	08 f0       	brcs	.+2      	; 0x295a <DIO_enumSetPinDir+0x2e>
    2958:	ed c0       	rjmp	.+474    	; 0x2b34 <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    295a:	8c 81       	ldd	r24, Y+4	; 0x04
    295c:	81 30       	cpi	r24, 0x01	; 1
    295e:	09 f0       	breq	.+2      	; 0x2962 <DIO_enumSetPinDir+0x36>
    2960:	6f c0       	rjmp	.+222    	; 0x2a40 <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	38 87       	std	Y+8, r19	; 0x08
    296a:	2f 83       	std	Y+7, r18	; 0x07
    296c:	8f 81       	ldd	r24, Y+7	; 0x07
    296e:	98 85       	ldd	r25, Y+8	; 0x08
    2970:	81 30       	cpi	r24, 0x01	; 1
    2972:	91 05       	cpc	r25, r1
    2974:	49 f1       	breq	.+82     	; 0x29c8 <DIO_enumSetPinDir+0x9c>
    2976:	2f 81       	ldd	r18, Y+7	; 0x07
    2978:	38 85       	ldd	r19, Y+8	; 0x08
    297a:	22 30       	cpi	r18, 0x02	; 2
    297c:	31 05       	cpc	r19, r1
    297e:	2c f4       	brge	.+10     	; 0x298a <DIO_enumSetPinDir+0x5e>
    2980:	8f 81       	ldd	r24, Y+7	; 0x07
    2982:	98 85       	ldd	r25, Y+8	; 0x08
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	61 f0       	breq	.+24     	; 0x29a0 <DIO_enumSetPinDir+0x74>
    2988:	d6 c0       	rjmp	.+428    	; 0x2b36 <DIO_enumSetPinDir+0x20a>
    298a:	2f 81       	ldd	r18, Y+7	; 0x07
    298c:	38 85       	ldd	r19, Y+8	; 0x08
    298e:	22 30       	cpi	r18, 0x02	; 2
    2990:	31 05       	cpc	r19, r1
    2992:	71 f1       	breq	.+92     	; 0x29f0 <DIO_enumSetPinDir+0xc4>
    2994:	8f 81       	ldd	r24, Y+7	; 0x07
    2996:	98 85       	ldd	r25, Y+8	; 0x08
    2998:	83 30       	cpi	r24, 0x03	; 3
    299a:	91 05       	cpc	r25, r1
    299c:	e9 f1       	breq	.+122    	; 0x2a18 <DIO_enumSetPinDir+0xec>
    299e:	cb c0       	rjmp	.+406    	; 0x2b36 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    29a0:	aa e3       	ldi	r26, 0x3A	; 58
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	ea e3       	ldi	r30, 0x3A	; 58
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	48 2f       	mov	r20, r24
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	02 2e       	mov	r0, r18
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <DIO_enumSetPinDir+0x92>
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	0a 94       	dec	r0
    29c0:	e2 f7       	brpl	.-8      	; 0x29ba <DIO_enumSetPinDir+0x8e>
    29c2:	84 2b       	or	r24, r20
    29c4:	8c 93       	st	X, r24
    29c6:	b7 c0       	rjmp	.+366    	; 0x2b36 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    29c8:	a7 e3       	ldi	r26, 0x37	; 55
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e7 e3       	ldi	r30, 0x37	; 55
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	48 2f       	mov	r20, r24
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	02 2e       	mov	r0, r18
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <DIO_enumSetPinDir+0xba>
    29e2:	88 0f       	add	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	0a 94       	dec	r0
    29e8:	e2 f7       	brpl	.-8      	; 0x29e2 <DIO_enumSetPinDir+0xb6>
    29ea:	84 2b       	or	r24, r20
    29ec:	8c 93       	st	X, r24
    29ee:	a3 c0       	rjmp	.+326    	; 0x2b36 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    29f0:	a4 e3       	ldi	r26, 0x34	; 52
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e4 e3       	ldi	r30, 0x34	; 52
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	48 2f       	mov	r20, r24
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	28 2f       	mov	r18, r24
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	02 2e       	mov	r0, r18
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <DIO_enumSetPinDir+0xe2>
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	0a 94       	dec	r0
    2a10:	e2 f7       	brpl	.-8      	; 0x2a0a <DIO_enumSetPinDir+0xde>
    2a12:	84 2b       	or	r24, r20
    2a14:	8c 93       	st	X, r24
    2a16:	8f c0       	rjmp	.+286    	; 0x2b36 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    2a18:	a1 e3       	ldi	r26, 0x31	; 49
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e1 e3       	ldi	r30, 0x31	; 49
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	48 2f       	mov	r20, r24
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	02 2e       	mov	r0, r18
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <DIO_enumSetPinDir+0x10a>
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	0a 94       	dec	r0
    2a38:	e2 f7       	brpl	.-8      	; 0x2a32 <DIO_enumSetPinDir+0x106>
    2a3a:	84 2b       	or	r24, r20
    2a3c:	8c 93       	st	X, r24
    2a3e:	7b c0       	rjmp	.+246    	; 0x2b36 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    2a40:	8c 81       	ldd	r24, Y+4	; 0x04
    2a42:	88 23       	and	r24, r24
    2a44:	09 f0       	breq	.+2      	; 0x2a48 <DIO_enumSetPinDir+0x11c>
    2a46:	74 c0       	rjmp	.+232    	; 0x2b30 <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	3e 83       	std	Y+6, r19	; 0x06
    2a50:	2d 83       	std	Y+5, r18	; 0x05
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	9e 81       	ldd	r25, Y+6	; 0x06
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	91 05       	cpc	r25, r1
    2a5a:	59 f1       	breq	.+86     	; 0x2ab2 <DIO_enumSetPinDir+0x186>
    2a5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a5e:	3e 81       	ldd	r19, Y+6	; 0x06
    2a60:	22 30       	cpi	r18, 0x02	; 2
    2a62:	31 05       	cpc	r19, r1
    2a64:	2c f4       	brge	.+10     	; 0x2a70 <DIO_enumSetPinDir+0x144>
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	69 f0       	breq	.+26     	; 0x2a88 <DIO_enumSetPinDir+0x15c>
    2a6e:	63 c0       	rjmp	.+198    	; 0x2b36 <DIO_enumSetPinDir+0x20a>
    2a70:	2d 81       	ldd	r18, Y+5	; 0x05
    2a72:	3e 81       	ldd	r19, Y+6	; 0x06
    2a74:	22 30       	cpi	r18, 0x02	; 2
    2a76:	31 05       	cpc	r19, r1
    2a78:	89 f1       	breq	.+98     	; 0x2adc <DIO_enumSetPinDir+0x1b0>
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	83 30       	cpi	r24, 0x03	; 3
    2a80:	91 05       	cpc	r25, r1
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <DIO_enumSetPinDir+0x15a>
    2a84:	40 c0       	rjmp	.+128    	; 0x2b06 <DIO_enumSetPinDir+0x1da>
    2a86:	57 c0       	rjmp	.+174    	; 0x2b36 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    2a88:	aa e3       	ldi	r26, 0x3A	; 58
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	ea e3       	ldi	r30, 0x3A	; 58
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	48 2f       	mov	r20, r24
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	02 2e       	mov	r0, r18
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <DIO_enumSetPinDir+0x17a>
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	0a 94       	dec	r0
    2aa8:	e2 f7       	brpl	.-8      	; 0x2aa2 <DIO_enumSetPinDir+0x176>
    2aaa:	80 95       	com	r24
    2aac:	84 23       	and	r24, r20
    2aae:	8c 93       	st	X, r24
    2ab0:	42 c0       	rjmp	.+132    	; 0x2b36 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    2ab2:	a7 e3       	ldi	r26, 0x37	; 55
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e7 e3       	ldi	r30, 0x37	; 55
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	48 2f       	mov	r20, r24
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	02 2e       	mov	r0, r18
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <DIO_enumSetPinDir+0x1a4>
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	0a 94       	dec	r0
    2ad2:	e2 f7       	brpl	.-8      	; 0x2acc <DIO_enumSetPinDir+0x1a0>
    2ad4:	80 95       	com	r24
    2ad6:	84 23       	and	r24, r20
    2ad8:	8c 93       	st	X, r24
    2ada:	2d c0       	rjmp	.+90     	; 0x2b36 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    2adc:	a4 e3       	ldi	r26, 0x34	; 52
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e4 e3       	ldi	r30, 0x34	; 52
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	48 2f       	mov	r20, r24
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	02 2e       	mov	r0, r18
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <DIO_enumSetPinDir+0x1ce>
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	0a 94       	dec	r0
    2afc:	e2 f7       	brpl	.-8      	; 0x2af6 <DIO_enumSetPinDir+0x1ca>
    2afe:	80 95       	com	r24
    2b00:	84 23       	and	r24, r20
    2b02:	8c 93       	st	X, r24
    2b04:	18 c0       	rjmp	.+48     	; 0x2b36 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    2b06:	a1 e3       	ldi	r26, 0x31	; 49
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	e1 e3       	ldi	r30, 0x31	; 49
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	48 2f       	mov	r20, r24
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	02 2e       	mov	r0, r18
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <DIO_enumSetPinDir+0x1f8>
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	0a 94       	dec	r0
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <DIO_enumSetPinDir+0x1f4>
    2b28:	80 95       	com	r24
    2b2a:	84 23       	and	r24, r20
    2b2c:	8c 93       	st	X, r24
    2b2e:	03 c0       	rjmp	.+6      	; 0x2b36 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	01 c0       	rjmp	.+2      	; 0x2b36 <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2b34:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b38:	28 96       	adiw	r28, 0x08	; 8
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	28 97       	sbiw	r28, 0x08	; 8
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	8a 83       	std	Y+2, r24	; 0x02
    2b60:	6b 83       	std	Y+3, r22	; 0x03
    2b62:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	84 30       	cpi	r24, 0x04	; 4
    2b6c:	08 f0       	brcs	.+2      	; 0x2b70 <DIO_enumWritePinVal+0x26>
    2b6e:	f1 c0       	rjmp	.+482    	; 0x2d52 <DIO_enumWritePinVal+0x208>
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	88 30       	cpi	r24, 0x08	; 8
    2b74:	08 f0       	brcs	.+2      	; 0x2b78 <DIO_enumWritePinVal+0x2e>
    2b76:	ed c0       	rjmp	.+474    	; 0x2d52 <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    2b78:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7a:	81 30       	cpi	r24, 0x01	; 1
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <DIO_enumWritePinVal+0x36>
    2b7e:	6f c0       	rjmp	.+222    	; 0x2c5e <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	28 2f       	mov	r18, r24
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	38 87       	std	Y+8, r19	; 0x08
    2b88:	2f 83       	std	Y+7, r18	; 0x07
    2b8a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b8c:	98 85       	ldd	r25, Y+8	; 0x08
    2b8e:	81 30       	cpi	r24, 0x01	; 1
    2b90:	91 05       	cpc	r25, r1
    2b92:	49 f1       	breq	.+82     	; 0x2be6 <DIO_enumWritePinVal+0x9c>
    2b94:	2f 81       	ldd	r18, Y+7	; 0x07
    2b96:	38 85       	ldd	r19, Y+8	; 0x08
    2b98:	22 30       	cpi	r18, 0x02	; 2
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	2c f4       	brge	.+10     	; 0x2ba8 <DIO_enumWritePinVal+0x5e>
    2b9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2ba0:	98 85       	ldd	r25, Y+8	; 0x08
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	61 f0       	breq	.+24     	; 0x2bbe <DIO_enumWritePinVal+0x74>
    2ba6:	d6 c0       	rjmp	.+428    	; 0x2d54 <DIO_enumWritePinVal+0x20a>
    2ba8:	2f 81       	ldd	r18, Y+7	; 0x07
    2baa:	38 85       	ldd	r19, Y+8	; 0x08
    2bac:	22 30       	cpi	r18, 0x02	; 2
    2bae:	31 05       	cpc	r19, r1
    2bb0:	71 f1       	breq	.+92     	; 0x2c0e <DIO_enumWritePinVal+0xc4>
    2bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb4:	98 85       	ldd	r25, Y+8	; 0x08
    2bb6:	83 30       	cpi	r24, 0x03	; 3
    2bb8:	91 05       	cpc	r25, r1
    2bba:	e9 f1       	breq	.+122    	; 0x2c36 <DIO_enumWritePinVal+0xec>
    2bbc:	cb c0       	rjmp	.+406    	; 0x2d54 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    2bbe:	ab e3       	ldi	r26, 0x3B	; 59
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	eb e3       	ldi	r30, 0x3B	; 59
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	48 2f       	mov	r20, r24
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	02 2e       	mov	r0, r18
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <DIO_enumWritePinVal+0x92>
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	0a 94       	dec	r0
    2bde:	e2 f7       	brpl	.-8      	; 0x2bd8 <DIO_enumWritePinVal+0x8e>
    2be0:	84 2b       	or	r24, r20
    2be2:	8c 93       	st	X, r24
    2be4:	b7 c0       	rjmp	.+366    	; 0x2d54 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    2be6:	a8 e3       	ldi	r26, 0x38	; 56
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e8 e3       	ldi	r30, 0x38	; 56
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	48 2f       	mov	r20, r24
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	02 2e       	mov	r0, r18
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <DIO_enumWritePinVal+0xba>
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	0a 94       	dec	r0
    2c06:	e2 f7       	brpl	.-8      	; 0x2c00 <DIO_enumWritePinVal+0xb6>
    2c08:	84 2b       	or	r24, r20
    2c0a:	8c 93       	st	X, r24
    2c0c:	a3 c0       	rjmp	.+326    	; 0x2d54 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    2c0e:	a5 e3       	ldi	r26, 0x35	; 53
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e5 e3       	ldi	r30, 0x35	; 53
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	48 2f       	mov	r20, r24
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	02 2e       	mov	r0, r18
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <DIO_enumWritePinVal+0xe2>
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	0a 94       	dec	r0
    2c2e:	e2 f7       	brpl	.-8      	; 0x2c28 <DIO_enumWritePinVal+0xde>
    2c30:	84 2b       	or	r24, r20
    2c32:	8c 93       	st	X, r24
    2c34:	8f c0       	rjmp	.+286    	; 0x2d54 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    2c36:	a2 e3       	ldi	r26, 0x32	; 50
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e2 e3       	ldi	r30, 0x32	; 50
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	48 2f       	mov	r20, r24
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	02 2e       	mov	r0, r18
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <DIO_enumWritePinVal+0x10a>
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	0a 94       	dec	r0
    2c56:	e2 f7       	brpl	.-8      	; 0x2c50 <DIO_enumWritePinVal+0x106>
    2c58:	84 2b       	or	r24, r20
    2c5a:	8c 93       	st	X, r24
    2c5c:	7b c0       	rjmp	.+246    	; 0x2d54 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	88 23       	and	r24, r24
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <DIO_enumWritePinVal+0x11c>
    2c64:	74 c0       	rjmp	.+232    	; 0x2d4e <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	3e 83       	std	Y+6, r19	; 0x06
    2c6e:	2d 83       	std	Y+5, r18	; 0x05
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	91 05       	cpc	r25, r1
    2c78:	59 f1       	breq	.+86     	; 0x2cd0 <DIO_enumWritePinVal+0x186>
    2c7a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c7c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c7e:	22 30       	cpi	r18, 0x02	; 2
    2c80:	31 05       	cpc	r19, r1
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <DIO_enumWritePinVal+0x144>
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	69 f0       	breq	.+26     	; 0x2ca6 <DIO_enumWritePinVal+0x15c>
    2c8c:	63 c0       	rjmp	.+198    	; 0x2d54 <DIO_enumWritePinVal+0x20a>
    2c8e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c90:	3e 81       	ldd	r19, Y+6	; 0x06
    2c92:	22 30       	cpi	r18, 0x02	; 2
    2c94:	31 05       	cpc	r19, r1
    2c96:	89 f1       	breq	.+98     	; 0x2cfa <DIO_enumWritePinVal+0x1b0>
    2c98:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9c:	83 30       	cpi	r24, 0x03	; 3
    2c9e:	91 05       	cpc	r25, r1
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <DIO_enumWritePinVal+0x15a>
    2ca2:	40 c0       	rjmp	.+128    	; 0x2d24 <DIO_enumWritePinVal+0x1da>
    2ca4:	57 c0       	rjmp	.+174    	; 0x2d54 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    2ca6:	ab e3       	ldi	r26, 0x3B	; 59
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	eb e3       	ldi	r30, 0x3B	; 59
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	48 2f       	mov	r20, r24
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	02 2e       	mov	r0, r18
    2cbe:	02 c0       	rjmp	.+4      	; 0x2cc4 <DIO_enumWritePinVal+0x17a>
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	0a 94       	dec	r0
    2cc6:	e2 f7       	brpl	.-8      	; 0x2cc0 <DIO_enumWritePinVal+0x176>
    2cc8:	80 95       	com	r24
    2cca:	84 23       	and	r24, r20
    2ccc:	8c 93       	st	X, r24
    2cce:	42 c0       	rjmp	.+132    	; 0x2d54 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    2cd0:	a8 e3       	ldi	r26, 0x38	; 56
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e8 e3       	ldi	r30, 0x38	; 56
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	48 2f       	mov	r20, r24
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	02 2e       	mov	r0, r18
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <DIO_enumWritePinVal+0x1a4>
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	0a 94       	dec	r0
    2cf0:	e2 f7       	brpl	.-8      	; 0x2cea <DIO_enumWritePinVal+0x1a0>
    2cf2:	80 95       	com	r24
    2cf4:	84 23       	and	r24, r20
    2cf6:	8c 93       	st	X, r24
    2cf8:	2d c0       	rjmp	.+90     	; 0x2d54 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    2cfa:	a5 e3       	ldi	r26, 0x35	; 53
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e5 e3       	ldi	r30, 0x35	; 53
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	48 2f       	mov	r20, r24
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	02 2e       	mov	r0, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <DIO_enumWritePinVal+0x1ce>
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	0a 94       	dec	r0
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <DIO_enumWritePinVal+0x1ca>
    2d1c:	80 95       	com	r24
    2d1e:	84 23       	and	r24, r20
    2d20:	8c 93       	st	X, r24
    2d22:	18 c0       	rjmp	.+48     	; 0x2d54 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    2d24:	a2 e3       	ldi	r26, 0x32	; 50
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	e2 e3       	ldi	r30, 0x32	; 50
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	48 2f       	mov	r20, r24
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	02 2e       	mov	r0, r18
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <DIO_enumWritePinVal+0x1f8>
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	0a 94       	dec	r0
    2d44:	e2 f7       	brpl	.-8      	; 0x2d3e <DIO_enumWritePinVal+0x1f4>
    2d46:	80 95       	com	r24
    2d48:	84 23       	and	r24, r20
    2d4a:	8c 93       	st	X, r24
    2d4c:	03 c0       	rjmp	.+6      	; 0x2d54 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    2d4e:	19 82       	std	Y+1, r1	; 0x01
    2d50:	01 c0       	rjmp	.+2      	; 0x2d54 <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2d52:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d56:	28 96       	adiw	r28, 0x08	; 8
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	27 97       	sbiw	r28, 0x07	; 7
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	f8 94       	cli
    2d76:	de bf       	out	0x3e, r29	; 62
    2d78:	0f be       	out	0x3f, r0	; 63
    2d7a:	cd bf       	out	0x3d, r28	; 61
    2d7c:	8a 83       	std	Y+2, r24	; 0x02
    2d7e:	6b 83       	std	Y+3, r22	; 0x03
    2d80:	5d 83       	std	Y+5, r21	; 0x05
    2d82:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	84 30       	cpi	r24, 0x04	; 4
    2d8c:	08 f0       	brcs	.+2      	; 0x2d90 <DIO_enumReadPinVal+0x28>
    2d8e:	a6 c0       	rjmp	.+332    	; 0x2edc <DIO_enumReadPinVal+0x174>
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	88 30       	cpi	r24, 0x08	; 8
    2d94:	08 f0       	brcs	.+2      	; 0x2d98 <DIO_enumReadPinVal+0x30>
    2d96:	a2 c0       	rjmp	.+324    	; 0x2edc <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	28 2f       	mov	r18, r24
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	3f 83       	std	Y+7, r19	; 0x07
    2da0:	2e 83       	std	Y+6, r18	; 0x06
    2da2:	4e 81       	ldd	r20, Y+6	; 0x06
    2da4:	5f 81       	ldd	r21, Y+7	; 0x07
    2da6:	41 30       	cpi	r20, 0x01	; 1
    2da8:	51 05       	cpc	r21, r1
    2daa:	c1 f1       	breq	.+112    	; 0x2e1c <DIO_enumReadPinVal+0xb4>
    2dac:	8e 81       	ldd	r24, Y+6	; 0x06
    2dae:	9f 81       	ldd	r25, Y+7	; 0x07
    2db0:	82 30       	cpi	r24, 0x02	; 2
    2db2:	91 05       	cpc	r25, r1
    2db4:	34 f4       	brge	.+12     	; 0x2dc2 <DIO_enumReadPinVal+0x5a>
    2db6:	2e 81       	ldd	r18, Y+6	; 0x06
    2db8:	3f 81       	ldd	r19, Y+7	; 0x07
    2dba:	21 15       	cp	r18, r1
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	71 f0       	breq	.+28     	; 0x2ddc <DIO_enumReadPinVal+0x74>
    2dc0:	8e c0       	rjmp	.+284    	; 0x2ede <DIO_enumReadPinVal+0x176>
    2dc2:	4e 81       	ldd	r20, Y+6	; 0x06
    2dc4:	5f 81       	ldd	r21, Y+7	; 0x07
    2dc6:	42 30       	cpi	r20, 0x02	; 2
    2dc8:	51 05       	cpc	r21, r1
    2dca:	09 f4       	brne	.+2      	; 0x2dce <DIO_enumReadPinVal+0x66>
    2dcc:	47 c0       	rjmp	.+142    	; 0x2e5c <DIO_enumReadPinVal+0xf4>
    2dce:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd0:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd2:	83 30       	cpi	r24, 0x03	; 3
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <DIO_enumReadPinVal+0x72>
    2dd8:	61 c0       	rjmp	.+194    	; 0x2e9c <DIO_enumReadPinVal+0x134>
    2dda:	81 c0       	rjmp	.+258    	; 0x2ede <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    2ddc:	e9 e3       	ldi	r30, 0x39	; 57
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	48 2f       	mov	r20, r24
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	28 2f       	mov	r18, r24
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <DIO_enumReadPinVal+0x8e>
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	2a 95       	dec	r18
    2df8:	e2 f7       	brpl	.-8      	; 0x2df2 <DIO_enumReadPinVal+0x8a>
    2dfa:	9a 01       	movw	r18, r20
    2dfc:	28 23       	and	r18, r24
    2dfe:	39 23       	and	r19, r25
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	88 2f       	mov	r24, r24
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a9 01       	movw	r20, r18
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <DIO_enumReadPinVal+0xa6>
    2e0a:	55 95       	asr	r21
    2e0c:	47 95       	ror	r20
    2e0e:	8a 95       	dec	r24
    2e10:	e2 f7       	brpl	.-8      	; 0x2e0a <DIO_enumReadPinVal+0xa2>
    2e12:	ca 01       	movw	r24, r20
    2e14:	ec 81       	ldd	r30, Y+4	; 0x04
    2e16:	fd 81       	ldd	r31, Y+5	; 0x05
    2e18:	80 83       	st	Z, r24
    2e1a:	61 c0       	rjmp	.+194    	; 0x2ede <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    2e1c:	e6 e3       	ldi	r30, 0x36	; 54
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	48 2f       	mov	r20, r24
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	28 2f       	mov	r18, r24
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <DIO_enumReadPinVal+0xce>
    2e32:	88 0f       	add	r24, r24
    2e34:	99 1f       	adc	r25, r25
    2e36:	2a 95       	dec	r18
    2e38:	e2 f7       	brpl	.-8      	; 0x2e32 <DIO_enumReadPinVal+0xca>
    2e3a:	9a 01       	movw	r18, r20
    2e3c:	28 23       	and	r18, r24
    2e3e:	39 23       	and	r19, r25
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a9 01       	movw	r20, r18
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <DIO_enumReadPinVal+0xe6>
    2e4a:	55 95       	asr	r21
    2e4c:	47 95       	ror	r20
    2e4e:	8a 95       	dec	r24
    2e50:	e2 f7       	brpl	.-8      	; 0x2e4a <DIO_enumReadPinVal+0xe2>
    2e52:	ca 01       	movw	r24, r20
    2e54:	ec 81       	ldd	r30, Y+4	; 0x04
    2e56:	fd 81       	ldd	r31, Y+5	; 0x05
    2e58:	80 83       	st	Z, r24
    2e5a:	41 c0       	rjmp	.+130    	; 0x2ede <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    2e5c:	e3 e3       	ldi	r30, 0x33	; 51
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	48 2f       	mov	r20, r24
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <DIO_enumReadPinVal+0x10e>
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	2a 95       	dec	r18
    2e78:	e2 f7       	brpl	.-8      	; 0x2e72 <DIO_enumReadPinVal+0x10a>
    2e7a:	9a 01       	movw	r18, r20
    2e7c:	28 23       	and	r18, r24
    2e7e:	39 23       	and	r19, r25
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	88 2f       	mov	r24, r24
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	a9 01       	movw	r20, r18
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <DIO_enumReadPinVal+0x126>
    2e8a:	55 95       	asr	r21
    2e8c:	47 95       	ror	r20
    2e8e:	8a 95       	dec	r24
    2e90:	e2 f7       	brpl	.-8      	; 0x2e8a <DIO_enumReadPinVal+0x122>
    2e92:	ca 01       	movw	r24, r20
    2e94:	ec 81       	ldd	r30, Y+4	; 0x04
    2e96:	fd 81       	ldd	r31, Y+5	; 0x05
    2e98:	80 83       	st	Z, r24
    2e9a:	21 c0       	rjmp	.+66     	; 0x2ede <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    2e9c:	e0 e3       	ldi	r30, 0x30	; 48
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	48 2f       	mov	r20, r24
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <DIO_enumReadPinVal+0x14e>
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	2a 95       	dec	r18
    2eb8:	e2 f7       	brpl	.-8      	; 0x2eb2 <DIO_enumReadPinVal+0x14a>
    2eba:	9a 01       	movw	r18, r20
    2ebc:	28 23       	and	r18, r24
    2ebe:	39 23       	and	r19, r25
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	88 2f       	mov	r24, r24
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a9 01       	movw	r20, r18
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <DIO_enumReadPinVal+0x166>
    2eca:	55 95       	asr	r21
    2ecc:	47 95       	ror	r20
    2ece:	8a 95       	dec	r24
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <DIO_enumReadPinVal+0x162>
    2ed2:	ca 01       	movw	r24, r20
    2ed4:	ec 81       	ldd	r30, Y+4	; 0x04
    2ed6:	fd 81       	ldd	r31, Y+5	; 0x05
    2ed8:	80 83       	st	Z, r24
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    2edc:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee0:	27 96       	adiw	r28, 0x07	; 7
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	00 d0       	rcall	.+0      	; 0x2ef8 <DIO_enumTogglePinVal+0x6>
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <DIO_enumTogglePinVal+0x8>
    2efa:	0f 92       	push	r0
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	8a 83       	std	Y+2, r24	; 0x02
    2f02:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2f08:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0a:	84 30       	cpi	r24, 0x04	; 4
    2f0c:	08 f0       	brcs	.+2      	; 0x2f10 <DIO_enumTogglePinVal+0x1e>
    2f0e:	73 c0       	rjmp	.+230    	; 0x2ff6 <DIO_enumTogglePinVal+0x104>
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	88 30       	cpi	r24, 0x08	; 8
    2f14:	08 f0       	brcs	.+2      	; 0x2f18 <DIO_enumTogglePinVal+0x26>
    2f16:	6f c0       	rjmp	.+222    	; 0x2ff6 <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	3d 83       	std	Y+5, r19	; 0x05
    2f20:	2c 83       	std	Y+4, r18	; 0x04
    2f22:	8c 81       	ldd	r24, Y+4	; 0x04
    2f24:	9d 81       	ldd	r25, Y+5	; 0x05
    2f26:	81 30       	cpi	r24, 0x01	; 1
    2f28:	91 05       	cpc	r25, r1
    2f2a:	49 f1       	breq	.+82     	; 0x2f7e <DIO_enumTogglePinVal+0x8c>
    2f2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f30:	22 30       	cpi	r18, 0x02	; 2
    2f32:	31 05       	cpc	r19, r1
    2f34:	2c f4       	brge	.+10     	; 0x2f40 <DIO_enumTogglePinVal+0x4e>
    2f36:	8c 81       	ldd	r24, Y+4	; 0x04
    2f38:	9d 81       	ldd	r25, Y+5	; 0x05
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	61 f0       	breq	.+24     	; 0x2f56 <DIO_enumTogglePinVal+0x64>
    2f3e:	5c c0       	rjmp	.+184    	; 0x2ff8 <DIO_enumTogglePinVal+0x106>
    2f40:	2c 81       	ldd	r18, Y+4	; 0x04
    2f42:	3d 81       	ldd	r19, Y+5	; 0x05
    2f44:	22 30       	cpi	r18, 0x02	; 2
    2f46:	31 05       	cpc	r19, r1
    2f48:	71 f1       	breq	.+92     	; 0x2fa6 <DIO_enumTogglePinVal+0xb4>
    2f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4e:	83 30       	cpi	r24, 0x03	; 3
    2f50:	91 05       	cpc	r25, r1
    2f52:	e9 f1       	breq	.+122    	; 0x2fce <DIO_enumTogglePinVal+0xdc>
    2f54:	51 c0       	rjmp	.+162    	; 0x2ff8 <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    2f56:	ab e3       	ldi	r26, 0x3B	; 59
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	eb e3       	ldi	r30, 0x3B	; 59
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	48 2f       	mov	r20, r24
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	28 2f       	mov	r18, r24
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	02 2e       	mov	r0, r18
    2f6e:	02 c0       	rjmp	.+4      	; 0x2f74 <DIO_enumTogglePinVal+0x82>
    2f70:	88 0f       	add	r24, r24
    2f72:	99 1f       	adc	r25, r25
    2f74:	0a 94       	dec	r0
    2f76:	e2 f7       	brpl	.-8      	; 0x2f70 <DIO_enumTogglePinVal+0x7e>
    2f78:	84 27       	eor	r24, r20
    2f7a:	8c 93       	st	X, r24
    2f7c:	3d c0       	rjmp	.+122    	; 0x2ff8 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    2f7e:	a8 e3       	ldi	r26, 0x38	; 56
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e8 e3       	ldi	r30, 0x38	; 56
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	48 2f       	mov	r20, r24
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	02 2e       	mov	r0, r18
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <DIO_enumTogglePinVal+0xaa>
    2f98:	88 0f       	add	r24, r24
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	0a 94       	dec	r0
    2f9e:	e2 f7       	brpl	.-8      	; 0x2f98 <DIO_enumTogglePinVal+0xa6>
    2fa0:	84 27       	eor	r24, r20
    2fa2:	8c 93       	st	X, r24
    2fa4:	29 c0       	rjmp	.+82     	; 0x2ff8 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    2fa6:	a5 e3       	ldi	r26, 0x35	; 53
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e5 e3       	ldi	r30, 0x35	; 53
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	48 2f       	mov	r20, r24
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	28 2f       	mov	r18, r24
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	02 2e       	mov	r0, r18
    2fbe:	02 c0       	rjmp	.+4      	; 0x2fc4 <DIO_enumTogglePinVal+0xd2>
    2fc0:	88 0f       	add	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	0a 94       	dec	r0
    2fc6:	e2 f7       	brpl	.-8      	; 0x2fc0 <DIO_enumTogglePinVal+0xce>
    2fc8:	84 27       	eor	r24, r20
    2fca:	8c 93       	st	X, r24
    2fcc:	15 c0       	rjmp	.+42     	; 0x2ff8 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    2fce:	a2 e3       	ldi	r26, 0x32	; 50
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	e2 e3       	ldi	r30, 0x32	; 50
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	48 2f       	mov	r20, r24
    2fda:	8b 81       	ldd	r24, Y+3	; 0x03
    2fdc:	28 2f       	mov	r18, r24
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	02 2e       	mov	r0, r18
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <DIO_enumTogglePinVal+0xfa>
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	0a 94       	dec	r0
    2fee:	e2 f7       	brpl	.-8      	; 0x2fe8 <DIO_enumTogglePinVal+0xf6>
    2ff0:	84 27       	eor	r24, r20
    2ff2:	8c 93       	st	X, r24
    2ff4:	01 c0       	rjmp	.+2      	; 0x2ff8 <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    2ff6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <DIO_enumConnectPullUp+0x6>
    3010:	00 d0       	rcall	.+0      	; 0x3012 <DIO_enumConnectPullUp+0x8>
    3012:	00 d0       	rcall	.+0      	; 0x3014 <DIO_enumConnectPullUp+0xa>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	8a 83       	std	Y+2, r24	; 0x02
    301a:	6b 83       	std	Y+3, r22	; 0x03
    301c:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	84 30       	cpi	r24, 0x04	; 4
    3026:	08 f0       	brcs	.+2      	; 0x302a <DIO_enumConnectPullUp+0x20>
    3028:	3e c1       	rjmp	.+636    	; 0x32a6 <DIO_enumConnectPullUp+0x29c>
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	88 30       	cpi	r24, 0x08	; 8
    302e:	08 f0       	brcs	.+2      	; 0x3032 <DIO_enumConnectPullUp+0x28>
    3030:	3a c1       	rjmp	.+628    	; 0x32a6 <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	3e 83       	std	Y+6, r19	; 0x06
    303a:	2d 83       	std	Y+5, r18	; 0x05
    303c:	8d 81       	ldd	r24, Y+5	; 0x05
    303e:	9e 81       	ldd	r25, Y+6	; 0x06
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	91 05       	cpc	r25, r1
    3044:	09 f4       	brne	.+2      	; 0x3048 <DIO_enumConnectPullUp+0x3e>
    3046:	5d c0       	rjmp	.+186    	; 0x3102 <DIO_enumConnectPullUp+0xf8>
    3048:	2d 81       	ldd	r18, Y+5	; 0x05
    304a:	3e 81       	ldd	r19, Y+6	; 0x06
    304c:	22 30       	cpi	r18, 0x02	; 2
    304e:	31 05       	cpc	r19, r1
    3050:	2c f4       	brge	.+10     	; 0x305c <DIO_enumConnectPullUp+0x52>
    3052:	8d 81       	ldd	r24, Y+5	; 0x05
    3054:	9e 81       	ldd	r25, Y+6	; 0x06
    3056:	00 97       	sbiw	r24, 0x00	; 0
    3058:	71 f0       	breq	.+28     	; 0x3076 <DIO_enumConnectPullUp+0x6c>
    305a:	26 c1       	rjmp	.+588    	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
    305c:	2d 81       	ldd	r18, Y+5	; 0x05
    305e:	3e 81       	ldd	r19, Y+6	; 0x06
    3060:	22 30       	cpi	r18, 0x02	; 2
    3062:	31 05       	cpc	r19, r1
    3064:	09 f4       	brne	.+2      	; 0x3068 <DIO_enumConnectPullUp+0x5e>
    3066:	93 c0       	rjmp	.+294    	; 0x318e <DIO_enumConnectPullUp+0x184>
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	9e 81       	ldd	r25, Y+6	; 0x06
    306c:	83 30       	cpi	r24, 0x03	; 3
    306e:	91 05       	cpc	r25, r1
    3070:	09 f4       	brne	.+2      	; 0x3074 <DIO_enumConnectPullUp+0x6a>
    3072:	d3 c0       	rjmp	.+422    	; 0x321a <DIO_enumConnectPullUp+0x210>
    3074:	19 c1       	rjmp	.+562    	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    3076:	8c 81       	ldd	r24, Y+4	; 0x04
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	71 f5       	brne	.+92     	; 0x30d8 <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    307c:	a0 e5       	ldi	r26, 0x50	; 80
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	e0 e5       	ldi	r30, 0x50	; 80
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	8b 7f       	andi	r24, 0xFB	; 251
    3088:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    308a:	aa e3       	ldi	r26, 0x3A	; 58
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	ea e3       	ldi	r30, 0x3A	; 58
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
    3094:	48 2f       	mov	r20, r24
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	28 2f       	mov	r18, r24
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <DIO_enumConnectPullUp+0x9c>
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	2a 95       	dec	r18
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <DIO_enumConnectPullUp+0x98>
    30aa:	80 95       	com	r24
    30ac:	84 23       	and	r24, r20
    30ae:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    30b0:	ab e3       	ldi	r26, 0x3B	; 59
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	eb e3       	ldi	r30, 0x3B	; 59
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	48 2f       	mov	r20, r24
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	28 2f       	mov	r18, r24
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	02 2e       	mov	r0, r18
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <DIO_enumConnectPullUp+0xc4>
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	0a 94       	dec	r0
    30d0:	e2 f7       	brpl	.-8      	; 0x30ca <DIO_enumConnectPullUp+0xc0>
    30d2:	84 2b       	or	r24, r20
    30d4:	8c 93       	st	X, r24
    30d6:	e8 c0       	rjmp	.+464    	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    30d8:	ab e3       	ldi	r26, 0x3B	; 59
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	eb e3       	ldi	r30, 0x3B	; 59
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	48 2f       	mov	r20, r24
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	28 2f       	mov	r18, r24
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	02 2e       	mov	r0, r18
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <DIO_enumConnectPullUp+0xec>
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	0a 94       	dec	r0
    30f8:	e2 f7       	brpl	.-8      	; 0x30f2 <DIO_enumConnectPullUp+0xe8>
    30fa:	80 95       	com	r24
    30fc:	84 23       	and	r24, r20
    30fe:	8c 93       	st	X, r24
    3100:	d3 c0       	rjmp	.+422    	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    3102:	8c 81       	ldd	r24, Y+4	; 0x04
    3104:	81 30       	cpi	r24, 0x01	; 1
    3106:	71 f5       	brne	.+92     	; 0x3164 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    3108:	a0 e5       	ldi	r26, 0x50	; 80
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e0 e5       	ldi	r30, 0x50	; 80
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	8b 7f       	andi	r24, 0xFB	; 251
    3114:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    3116:	a7 e3       	ldi	r26, 0x37	; 55
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e7 e3       	ldi	r30, 0x37	; 55
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	48 2f       	mov	r20, r24
    3122:	8b 81       	ldd	r24, Y+3	; 0x03
    3124:	28 2f       	mov	r18, r24
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <DIO_enumConnectPullUp+0x128>
    312e:	88 0f       	add	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	2a 95       	dec	r18
    3134:	e2 f7       	brpl	.-8      	; 0x312e <DIO_enumConnectPullUp+0x124>
    3136:	80 95       	com	r24
    3138:	84 23       	and	r24, r20
    313a:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    313c:	a8 e3       	ldi	r26, 0x38	; 56
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e8 e3       	ldi	r30, 0x38	; 56
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	48 2f       	mov	r20, r24
    3148:	8b 81       	ldd	r24, Y+3	; 0x03
    314a:	28 2f       	mov	r18, r24
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	02 2e       	mov	r0, r18
    3154:	02 c0       	rjmp	.+4      	; 0x315a <DIO_enumConnectPullUp+0x150>
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	0a 94       	dec	r0
    315c:	e2 f7       	brpl	.-8      	; 0x3156 <DIO_enumConnectPullUp+0x14c>
    315e:	84 2b       	or	r24, r20
    3160:	8c 93       	st	X, r24
    3162:	a2 c0       	rjmp	.+324    	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    3164:	a8 e3       	ldi	r26, 0x38	; 56
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e8 e3       	ldi	r30, 0x38	; 56
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	48 2f       	mov	r20, r24
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
    3172:	28 2f       	mov	r18, r24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	02 2e       	mov	r0, r18
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <DIO_enumConnectPullUp+0x178>
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	0a 94       	dec	r0
    3184:	e2 f7       	brpl	.-8      	; 0x317e <DIO_enumConnectPullUp+0x174>
    3186:	80 95       	com	r24
    3188:	84 23       	and	r24, r20
    318a:	8c 93       	st	X, r24
    318c:	8d c0       	rjmp	.+282    	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    318e:	8c 81       	ldd	r24, Y+4	; 0x04
    3190:	81 30       	cpi	r24, 0x01	; 1
    3192:	71 f5       	brne	.+92     	; 0x31f0 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    3194:	a0 e5       	ldi	r26, 0x50	; 80
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	e0 e5       	ldi	r30, 0x50	; 80
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	8b 7f       	andi	r24, 0xFB	; 251
    31a0:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    31a2:	a4 e3       	ldi	r26, 0x34	; 52
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e4 e3       	ldi	r30, 0x34	; 52
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	48 2f       	mov	r20, r24
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <DIO_enumConnectPullUp+0x1b4>
    31ba:	88 0f       	add	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	2a 95       	dec	r18
    31c0:	e2 f7       	brpl	.-8      	; 0x31ba <DIO_enumConnectPullUp+0x1b0>
    31c2:	80 95       	com	r24
    31c4:	84 23       	and	r24, r20
    31c6:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    31c8:	a5 e3       	ldi	r26, 0x35	; 53
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	e5 e3       	ldi	r30, 0x35	; 53
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	48 2f       	mov	r20, r24
    31d4:	8b 81       	ldd	r24, Y+3	; 0x03
    31d6:	28 2f       	mov	r18, r24
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	02 2e       	mov	r0, r18
    31e0:	02 c0       	rjmp	.+4      	; 0x31e6 <DIO_enumConnectPullUp+0x1dc>
    31e2:	88 0f       	add	r24, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	0a 94       	dec	r0
    31e8:	e2 f7       	brpl	.-8      	; 0x31e2 <DIO_enumConnectPullUp+0x1d8>
    31ea:	84 2b       	or	r24, r20
    31ec:	8c 93       	st	X, r24
    31ee:	5c c0       	rjmp	.+184    	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    31f0:	a5 e3       	ldi	r26, 0x35	; 53
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	e5 e3       	ldi	r30, 0x35	; 53
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	48 2f       	mov	r20, r24
    31fc:	8b 81       	ldd	r24, Y+3	; 0x03
    31fe:	28 2f       	mov	r18, r24
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	02 2e       	mov	r0, r18
    3208:	02 c0       	rjmp	.+4      	; 0x320e <DIO_enumConnectPullUp+0x204>
    320a:	88 0f       	add	r24, r24
    320c:	99 1f       	adc	r25, r25
    320e:	0a 94       	dec	r0
    3210:	e2 f7       	brpl	.-8      	; 0x320a <DIO_enumConnectPullUp+0x200>
    3212:	80 95       	com	r24
    3214:	84 23       	and	r24, r20
    3216:	8c 93       	st	X, r24
    3218:	47 c0       	rjmp	.+142    	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    321a:	8c 81       	ldd	r24, Y+4	; 0x04
    321c:	81 30       	cpi	r24, 0x01	; 1
    321e:	71 f5       	brne	.+92     	; 0x327c <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    3220:	a0 e5       	ldi	r26, 0x50	; 80
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e0 e5       	ldi	r30, 0x50	; 80
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	8b 7f       	andi	r24, 0xFB	; 251
    322c:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    322e:	a1 e3       	ldi	r26, 0x31	; 49
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	e1 e3       	ldi	r30, 0x31	; 49
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	80 81       	ld	r24, Z
    3238:	48 2f       	mov	r20, r24
    323a:	8b 81       	ldd	r24, Y+3	; 0x03
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	02 c0       	rjmp	.+4      	; 0x324a <DIO_enumConnectPullUp+0x240>
    3246:	88 0f       	add	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	2a 95       	dec	r18
    324c:	e2 f7       	brpl	.-8      	; 0x3246 <DIO_enumConnectPullUp+0x23c>
    324e:	80 95       	com	r24
    3250:	84 23       	and	r24, r20
    3252:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    3254:	a2 e3       	ldi	r26, 0x32	; 50
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e2 e3       	ldi	r30, 0x32	; 50
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	48 2f       	mov	r20, r24
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	02 2e       	mov	r0, r18
    326c:	02 c0       	rjmp	.+4      	; 0x3272 <DIO_enumConnectPullUp+0x268>
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	0a 94       	dec	r0
    3274:	e2 f7       	brpl	.-8      	; 0x326e <DIO_enumConnectPullUp+0x264>
    3276:	84 2b       	or	r24, r20
    3278:	8c 93       	st	X, r24
    327a:	16 c0       	rjmp	.+44     	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    327c:	a2 e3       	ldi	r26, 0x32	; 50
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	e2 e3       	ldi	r30, 0x32	; 50
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	48 2f       	mov	r20, r24
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	02 2e       	mov	r0, r18
    3294:	02 c0       	rjmp	.+4      	; 0x329a <DIO_enumConnectPullUp+0x290>
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	0a 94       	dec	r0
    329c:	e2 f7       	brpl	.-8      	; 0x3296 <DIO_enumConnectPullUp+0x28c>
    329e:	80 95       	com	r24
    32a0:	84 23       	and	r24, r20
    32a2:	8c 93       	st	X, r24
    32a4:	01 c0       	rjmp	.+2      	; 0x32a8 <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    32a6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    32aa:	26 96       	adiw	r28, 0x06	; 6
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	cf 91       	pop	r28
    32b8:	df 91       	pop	r29
    32ba:	08 95       	ret

000032bc <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <DIO_enumSetPortDir+0x6>
    32c2:	00 d0       	rcall	.+0      	; 0x32c4 <DIO_enumSetPortDir+0x8>
    32c4:	0f 92       	push	r0
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	8a 83       	std	Y+2, r24	; 0x02
    32cc:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    32d2:	8a 81       	ldd	r24, Y+2	; 0x02
    32d4:	84 30       	cpi	r24, 0x04	; 4
    32d6:	a8 f5       	brcc	.+106    	; 0x3342 <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    32d8:	8a 81       	ldd	r24, Y+2	; 0x02
    32da:	28 2f       	mov	r18, r24
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	3d 83       	std	Y+5, r19	; 0x05
    32e0:	2c 83       	std	Y+4, r18	; 0x04
    32e2:	8c 81       	ldd	r24, Y+4	; 0x04
    32e4:	9d 81       	ldd	r25, Y+5	; 0x05
    32e6:	81 30       	cpi	r24, 0x01	; 1
    32e8:	91 05       	cpc	r25, r1
    32ea:	d1 f0       	breq	.+52     	; 0x3320 <DIO_enumSetPortDir+0x64>
    32ec:	2c 81       	ldd	r18, Y+4	; 0x04
    32ee:	3d 81       	ldd	r19, Y+5	; 0x05
    32f0:	22 30       	cpi	r18, 0x02	; 2
    32f2:	31 05       	cpc	r19, r1
    32f4:	2c f4       	brge	.+10     	; 0x3300 <DIO_enumSetPortDir+0x44>
    32f6:	8c 81       	ldd	r24, Y+4	; 0x04
    32f8:	9d 81       	ldd	r25, Y+5	; 0x05
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	61 f0       	breq	.+24     	; 0x3316 <DIO_enumSetPortDir+0x5a>
    32fe:	1f c0       	rjmp	.+62     	; 0x333e <DIO_enumSetPortDir+0x82>
    3300:	2c 81       	ldd	r18, Y+4	; 0x04
    3302:	3d 81       	ldd	r19, Y+5	; 0x05
    3304:	22 30       	cpi	r18, 0x02	; 2
    3306:	31 05       	cpc	r19, r1
    3308:	81 f0       	breq	.+32     	; 0x332a <DIO_enumSetPortDir+0x6e>
    330a:	8c 81       	ldd	r24, Y+4	; 0x04
    330c:	9d 81       	ldd	r25, Y+5	; 0x05
    330e:	83 30       	cpi	r24, 0x03	; 3
    3310:	91 05       	cpc	r25, r1
    3312:	81 f0       	breq	.+32     	; 0x3334 <DIO_enumSetPortDir+0x78>
    3314:	14 c0       	rjmp	.+40     	; 0x333e <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    3316:	ea e3       	ldi	r30, 0x3A	; 58
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	8b 81       	ldd	r24, Y+3	; 0x03
    331c:	80 83       	st	Z, r24
    331e:	12 c0       	rjmp	.+36     	; 0x3344 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    3320:	e7 e3       	ldi	r30, 0x37	; 55
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	80 83       	st	Z, r24
    3328:	0d c0       	rjmp	.+26     	; 0x3344 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    332a:	e4 e3       	ldi	r30, 0x34	; 52
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	8b 81       	ldd	r24, Y+3	; 0x03
    3330:	80 83       	st	Z, r24
    3332:	08 c0       	rjmp	.+16     	; 0x3344 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    3334:	e1 e3       	ldi	r30, 0x31	; 49
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	80 83       	st	Z, r24
    333c:	03 c0       	rjmp	.+6      	; 0x3344 <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    333e:	19 82       	std	Y+1, r1	; 0x01
    3340:	01 c0       	rjmp	.+2      	; 0x3344 <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3342:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    3344:	89 81       	ldd	r24, Y+1	; 0x01
}
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	00 d0       	rcall	.+0      	; 0x335c <DIO_enumWritePortVal+0x6>
    335c:	00 d0       	rcall	.+0      	; 0x335e <DIO_enumWritePortVal+0x8>
    335e:	0f 92       	push	r0
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	8a 83       	std	Y+2, r24	; 0x02
    3366:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    336c:	8a 81       	ldd	r24, Y+2	; 0x02
    336e:	84 30       	cpi	r24, 0x04	; 4
    3370:	a8 f5       	brcc	.+106    	; 0x33dc <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	28 2f       	mov	r18, r24
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	3d 83       	std	Y+5, r19	; 0x05
    337a:	2c 83       	std	Y+4, r18	; 0x04
    337c:	8c 81       	ldd	r24, Y+4	; 0x04
    337e:	9d 81       	ldd	r25, Y+5	; 0x05
    3380:	81 30       	cpi	r24, 0x01	; 1
    3382:	91 05       	cpc	r25, r1
    3384:	d1 f0       	breq	.+52     	; 0x33ba <DIO_enumWritePortVal+0x64>
    3386:	2c 81       	ldd	r18, Y+4	; 0x04
    3388:	3d 81       	ldd	r19, Y+5	; 0x05
    338a:	22 30       	cpi	r18, 0x02	; 2
    338c:	31 05       	cpc	r19, r1
    338e:	2c f4       	brge	.+10     	; 0x339a <DIO_enumWritePortVal+0x44>
    3390:	8c 81       	ldd	r24, Y+4	; 0x04
    3392:	9d 81       	ldd	r25, Y+5	; 0x05
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	61 f0       	breq	.+24     	; 0x33b0 <DIO_enumWritePortVal+0x5a>
    3398:	1f c0       	rjmp	.+62     	; 0x33d8 <DIO_enumWritePortVal+0x82>
    339a:	2c 81       	ldd	r18, Y+4	; 0x04
    339c:	3d 81       	ldd	r19, Y+5	; 0x05
    339e:	22 30       	cpi	r18, 0x02	; 2
    33a0:	31 05       	cpc	r19, r1
    33a2:	81 f0       	breq	.+32     	; 0x33c4 <DIO_enumWritePortVal+0x6e>
    33a4:	8c 81       	ldd	r24, Y+4	; 0x04
    33a6:	9d 81       	ldd	r25, Y+5	; 0x05
    33a8:	83 30       	cpi	r24, 0x03	; 3
    33aa:	91 05       	cpc	r25, r1
    33ac:	81 f0       	breq	.+32     	; 0x33ce <DIO_enumWritePortVal+0x78>
    33ae:	14 c0       	rjmp	.+40     	; 0x33d8 <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    33b0:	eb e3       	ldi	r30, 0x3B	; 59
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	80 83       	st	Z, r24
    33b8:	12 c0       	rjmp	.+36     	; 0x33de <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    33ba:	e8 e3       	ldi	r30, 0x38	; 56
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	80 83       	st	Z, r24
    33c2:	0d c0       	rjmp	.+26     	; 0x33de <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    33c4:	e5 e3       	ldi	r30, 0x35	; 53
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ca:	80 83       	st	Z, r24
    33cc:	08 c0       	rjmp	.+16     	; 0x33de <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    33ce:	e2 e3       	ldi	r30, 0x32	; 50
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	80 83       	st	Z, r24
    33d6:	03 c0       	rjmp	.+6      	; 0x33de <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    33d8:	19 82       	std	Y+1, r1	; 0x01
    33da:	01 c0       	rjmp	.+2      	; 0x33de <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    33dc:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    33de:	89 81       	ldd	r24, Y+1	; 0x01
}
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	cf 91       	pop	r28
    33ec:	df 91       	pop	r29
    33ee:	08 95       	ret

000033f0 <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    33f0:	df 93       	push	r29
    33f2:	cf 93       	push	r28
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	27 97       	sbiw	r28, 0x07	; 7
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	8a 83       	std	Y+2, r24	; 0x02
    3406:	7c 83       	std	Y+4, r23	; 0x04
    3408:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	84 30       	cpi	r24, 0x04	; 4
    3412:	08 f0       	brcs	.+2      	; 0x3416 <DIO_enumReadPorVal+0x26>
    3414:	3f c0       	rjmp	.+126    	; 0x3494 <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	28 2f       	mov	r18, r24
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	3f 83       	std	Y+7, r19	; 0x07
    341e:	2e 83       	std	Y+6, r18	; 0x06
    3420:	8e 81       	ldd	r24, Y+6	; 0x06
    3422:	9f 81       	ldd	r25, Y+7	; 0x07
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	91 05       	cpc	r25, r1
    3428:	e1 f0       	breq	.+56     	; 0x3462 <DIO_enumReadPorVal+0x72>
    342a:	2e 81       	ldd	r18, Y+6	; 0x06
    342c:	3f 81       	ldd	r19, Y+7	; 0x07
    342e:	22 30       	cpi	r18, 0x02	; 2
    3430:	31 05       	cpc	r19, r1
    3432:	2c f4       	brge	.+10     	; 0x343e <DIO_enumReadPorVal+0x4e>
    3434:	8e 81       	ldd	r24, Y+6	; 0x06
    3436:	9f 81       	ldd	r25, Y+7	; 0x07
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	61 f0       	breq	.+24     	; 0x3454 <DIO_enumReadPorVal+0x64>
    343c:	27 c0       	rjmp	.+78     	; 0x348c <DIO_enumReadPorVal+0x9c>
    343e:	2e 81       	ldd	r18, Y+6	; 0x06
    3440:	3f 81       	ldd	r19, Y+7	; 0x07
    3442:	22 30       	cpi	r18, 0x02	; 2
    3444:	31 05       	cpc	r19, r1
    3446:	a1 f0       	breq	.+40     	; 0x3470 <DIO_enumReadPorVal+0x80>
    3448:	8e 81       	ldd	r24, Y+6	; 0x06
    344a:	9f 81       	ldd	r25, Y+7	; 0x07
    344c:	83 30       	cpi	r24, 0x03	; 3
    344e:	91 05       	cpc	r25, r1
    3450:	b1 f0       	breq	.+44     	; 0x347e <DIO_enumReadPorVal+0x8e>
    3452:	1c c0       	rjmp	.+56     	; 0x348c <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    3454:	e9 e3       	ldi	r30, 0x39	; 57
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	eb 81       	ldd	r30, Y+3	; 0x03
    345c:	fc 81       	ldd	r31, Y+4	; 0x04
    345e:	80 83       	st	Z, r24
    3460:	16 c0       	rjmp	.+44     	; 0x348e <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    3462:	e6 e3       	ldi	r30, 0x36	; 54
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	eb 81       	ldd	r30, Y+3	; 0x03
    346a:	fc 81       	ldd	r31, Y+4	; 0x04
    346c:	80 83       	st	Z, r24
    346e:	0f c0       	rjmp	.+30     	; 0x348e <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    3470:	e3 e3       	ldi	r30, 0x33	; 51
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	eb 81       	ldd	r30, Y+3	; 0x03
    3478:	fc 81       	ldd	r31, Y+4	; 0x04
    347a:	80 83       	st	Z, r24
    347c:	08 c0       	rjmp	.+16     	; 0x348e <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    347e:	e0 e3       	ldi	r30, 0x30	; 48
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	eb 81       	ldd	r30, Y+3	; 0x03
    3486:	fc 81       	ldd	r31, Y+4	; 0x04
    3488:	80 83       	st	Z, r24
    348a:	01 c0       	rjmp	.+2      	; 0x348e <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    348c:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    348e:	99 81       	ldd	r25, Y+1	; 0x01
    3490:	9d 83       	std	Y+5, r25	; 0x05
    3492:	03 c0       	rjmp	.+6      	; 0x349a <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3494:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    3496:	29 81       	ldd	r18, Y+1	; 0x01
    3498:	2d 83       	std	Y+5, r18	; 0x05
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    349c:	27 96       	adiw	r28, 0x07	; 7
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	f8 94       	cli
    34a2:	de bf       	out	0x3e, r29	; 62
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	cd bf       	out	0x3d, r28	; 61
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <DIO_enumTogglePortValue+0x6>
    34b4:	00 d0       	rcall	.+0      	; 0x34b6 <DIO_enumTogglePortValue+0x8>
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	84 30       	cpi	r24, 0x04	; 4
    34c4:	08 f0       	brcs	.+2      	; 0x34c8 <DIO_enumTogglePortValue+0x1a>
    34c6:	3f c0       	rjmp	.+126    	; 0x3546 <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	28 2f       	mov	r18, r24
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	3c 83       	std	Y+4, r19	; 0x04
    34d0:	2b 83       	std	Y+3, r18	; 0x03
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	9c 81       	ldd	r25, Y+4	; 0x04
    34d6:	81 30       	cpi	r24, 0x01	; 1
    34d8:	91 05       	cpc	r25, r1
    34da:	e9 f0       	breq	.+58     	; 0x3516 <DIO_enumTogglePortValue+0x68>
    34dc:	2b 81       	ldd	r18, Y+3	; 0x03
    34de:	3c 81       	ldd	r19, Y+4	; 0x04
    34e0:	22 30       	cpi	r18, 0x02	; 2
    34e2:	31 05       	cpc	r19, r1
    34e4:	2c f4       	brge	.+10     	; 0x34f0 <DIO_enumTogglePortValue+0x42>
    34e6:	8b 81       	ldd	r24, Y+3	; 0x03
    34e8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	61 f0       	breq	.+24     	; 0x3506 <DIO_enumTogglePortValue+0x58>
    34ee:	2c c0       	rjmp	.+88     	; 0x3548 <DIO_enumTogglePortValue+0x9a>
    34f0:	2b 81       	ldd	r18, Y+3	; 0x03
    34f2:	3c 81       	ldd	r19, Y+4	; 0x04
    34f4:	22 30       	cpi	r18, 0x02	; 2
    34f6:	31 05       	cpc	r19, r1
    34f8:	b1 f0       	breq	.+44     	; 0x3526 <DIO_enumTogglePortValue+0x78>
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	9c 81       	ldd	r25, Y+4	; 0x04
    34fe:	83 30       	cpi	r24, 0x03	; 3
    3500:	91 05       	cpc	r25, r1
    3502:	c9 f0       	breq	.+50     	; 0x3536 <DIO_enumTogglePortValue+0x88>
    3504:	21 c0       	rjmp	.+66     	; 0x3548 <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    3506:	ab e3       	ldi	r26, 0x3B	; 59
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	eb e3       	ldi	r30, 0x3B	; 59
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	80 95       	com	r24
    3512:	8c 93       	st	X, r24
    3514:	19 c0       	rjmp	.+50     	; 0x3548 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    3516:	a8 e3       	ldi	r26, 0x38	; 56
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e8 e3       	ldi	r30, 0x38	; 56
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	80 95       	com	r24
    3522:	8c 93       	st	X, r24
    3524:	11 c0       	rjmp	.+34     	; 0x3548 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    3526:	a5 e3       	ldi	r26, 0x35	; 53
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	e5 e3       	ldi	r30, 0x35	; 53
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	80 81       	ld	r24, Z
    3530:	80 95       	com	r24
    3532:	8c 93       	st	X, r24
    3534:	09 c0       	rjmp	.+18     	; 0x3548 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    3536:	a2 e3       	ldi	r26, 0x32	; 50
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	e2 e3       	ldi	r30, 0x32	; 50
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	80 95       	com	r24
    3542:	8c 93       	st	X, r24
    3544:	01 c0       	rjmp	.+2      	; 0x3548 <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3546:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    3548:	89 81       	ldd	r24, Y+1	; 0x01
}
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	cf 91       	pop	r28
    3554:	df 91       	pop	r29
    3556:	08 95       	ret

00003558 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	00 d0       	rcall	.+0      	; 0x355e <DIO_vWriteLowNibble+0x6>
    355e:	00 d0       	rcall	.+0      	; 0x3560 <DIO_vWriteLowNibble+0x8>
    3560:	0f 92       	push	r0
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	8a 83       	std	Y+2, r24	; 0x02
    3568:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    356e:	8a 81       	ldd	r24, Y+2	; 0x02
    3570:	84 30       	cpi	r24, 0x04	; 4
    3572:	08 f0       	brcs	.+2      	; 0x3576 <DIO_vWriteLowNibble+0x1e>
    3574:	62 c0       	rjmp	.+196    	; 0x363a <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	8f 70       	andi	r24, 0x0F	; 15
    357a:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	28 2f       	mov	r18, r24
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	3d 83       	std	Y+5, r19	; 0x05
    3584:	2c 83       	std	Y+4, r18	; 0x04
    3586:	8c 81       	ldd	r24, Y+4	; 0x04
    3588:	9d 81       	ldd	r25, Y+5	; 0x05
    358a:	81 30       	cpi	r24, 0x01	; 1
    358c:	91 05       	cpc	r25, r1
    358e:	29 f1       	breq	.+74     	; 0x35da <DIO_vWriteLowNibble+0x82>
    3590:	2c 81       	ldd	r18, Y+4	; 0x04
    3592:	3d 81       	ldd	r19, Y+5	; 0x05
    3594:	22 30       	cpi	r18, 0x02	; 2
    3596:	31 05       	cpc	r19, r1
    3598:	2c f4       	brge	.+10     	; 0x35a4 <DIO_vWriteLowNibble+0x4c>
    359a:	8c 81       	ldd	r24, Y+4	; 0x04
    359c:	9d 81       	ldd	r25, Y+5	; 0x05
    359e:	00 97       	sbiw	r24, 0x00	; 0
    35a0:	61 f0       	breq	.+24     	; 0x35ba <DIO_vWriteLowNibble+0x62>
    35a2:	4c c0       	rjmp	.+152    	; 0x363c <DIO_vWriteLowNibble+0xe4>
    35a4:	2c 81       	ldd	r18, Y+4	; 0x04
    35a6:	3d 81       	ldd	r19, Y+5	; 0x05
    35a8:	22 30       	cpi	r18, 0x02	; 2
    35aa:	31 05       	cpc	r19, r1
    35ac:	31 f1       	breq	.+76     	; 0x35fa <DIO_vWriteLowNibble+0xa2>
    35ae:	8c 81       	ldd	r24, Y+4	; 0x04
    35b0:	9d 81       	ldd	r25, Y+5	; 0x05
    35b2:	83 30       	cpi	r24, 0x03	; 3
    35b4:	91 05       	cpc	r25, r1
    35b6:	89 f1       	breq	.+98     	; 0x361a <DIO_vWriteLowNibble+0xc2>
    35b8:	41 c0       	rjmp	.+130    	; 0x363c <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    35ba:	ab e3       	ldi	r26, 0x3B	; 59
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	eb e3       	ldi	r30, 0x3B	; 59
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	80 7f       	andi	r24, 0xF0	; 240
    35c6:	8c 93       	st	X, r24
      PORTA_REG |= value;
    35c8:	ab e3       	ldi	r26, 0x3B	; 59
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	eb e3       	ldi	r30, 0x3B	; 59
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	90 81       	ld	r25, Z
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	89 2b       	or	r24, r25
    35d6:	8c 93       	st	X, r24
    35d8:	31 c0       	rjmp	.+98     	; 0x363c <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    35da:	a8 e3       	ldi	r26, 0x38	; 56
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	e8 e3       	ldi	r30, 0x38	; 56
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	80 7f       	andi	r24, 0xF0	; 240
    35e6:	8c 93       	st	X, r24
      PORTB_REG |= value;
    35e8:	a8 e3       	ldi	r26, 0x38	; 56
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	e8 e3       	ldi	r30, 0x38	; 56
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	90 81       	ld	r25, Z
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	89 2b       	or	r24, r25
    35f6:	8c 93       	st	X, r24
    35f8:	21 c0       	rjmp	.+66     	; 0x363c <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    35fa:	a5 e3       	ldi	r26, 0x35	; 53
    35fc:	b0 e0       	ldi	r27, 0x00	; 0
    35fe:	e5 e3       	ldi	r30, 0x35	; 53
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	80 81       	ld	r24, Z
    3604:	80 7f       	andi	r24, 0xF0	; 240
    3606:	8c 93       	st	X, r24
      PORTC_REG |= value;
    3608:	a5 e3       	ldi	r26, 0x35	; 53
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	e5 e3       	ldi	r30, 0x35	; 53
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	90 81       	ld	r25, Z
    3612:	8b 81       	ldd	r24, Y+3	; 0x03
    3614:	89 2b       	or	r24, r25
    3616:	8c 93       	st	X, r24
    3618:	11 c0       	rjmp	.+34     	; 0x363c <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    361a:	a2 e3       	ldi	r26, 0x32	; 50
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	e2 e3       	ldi	r30, 0x32	; 50
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	80 81       	ld	r24, Z
    3624:	80 7f       	andi	r24, 0xF0	; 240
    3626:	8c 93       	st	X, r24
      PORTD_REG |= value;
    3628:	a2 e3       	ldi	r26, 0x32	; 50
    362a:	b0 e0       	ldi	r27, 0x00	; 0
    362c:	e2 e3       	ldi	r30, 0x32	; 50
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	90 81       	ld	r25, Z
    3632:	8b 81       	ldd	r24, Y+3	; 0x03
    3634:	89 2b       	or	r24, r25
    3636:	8c 93       	st	X, r24
    3638:	01 c0       	rjmp	.+2      	; 0x363c <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    363a:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    363c:	89 81       	ldd	r24, Y+1	; 0x01
}
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	cf 91       	pop	r28
    364a:	df 91       	pop	r29
    364c:	08 95       	ret

0000364e <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	00 d0       	rcall	.+0      	; 0x3654 <DIO_vWriteHighNibble+0x6>
    3654:	00 d0       	rcall	.+0      	; 0x3656 <DIO_vWriteHighNibble+0x8>
    3656:	0f 92       	push	r0
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	8a 83       	std	Y+2, r24	; 0x02
    365e:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	84 30       	cpi	r24, 0x04	; 4
    3668:	08 f0       	brcs	.+2      	; 0x366c <DIO_vWriteHighNibble+0x1e>
    366a:	63 c0       	rjmp	.+198    	; 0x3732 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    366c:	8b 81       	ldd	r24, Y+3	; 0x03
    366e:	82 95       	swap	r24
    3670:	80 7f       	andi	r24, 0xF0	; 240
    3672:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	28 2f       	mov	r18, r24
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	3d 83       	std	Y+5, r19	; 0x05
    367c:	2c 83       	std	Y+4, r18	; 0x04
    367e:	8c 81       	ldd	r24, Y+4	; 0x04
    3680:	9d 81       	ldd	r25, Y+5	; 0x05
    3682:	81 30       	cpi	r24, 0x01	; 1
    3684:	91 05       	cpc	r25, r1
    3686:	29 f1       	breq	.+74     	; 0x36d2 <DIO_vWriteHighNibble+0x84>
    3688:	2c 81       	ldd	r18, Y+4	; 0x04
    368a:	3d 81       	ldd	r19, Y+5	; 0x05
    368c:	22 30       	cpi	r18, 0x02	; 2
    368e:	31 05       	cpc	r19, r1
    3690:	2c f4       	brge	.+10     	; 0x369c <DIO_vWriteHighNibble+0x4e>
    3692:	8c 81       	ldd	r24, Y+4	; 0x04
    3694:	9d 81       	ldd	r25, Y+5	; 0x05
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	61 f0       	breq	.+24     	; 0x36b2 <DIO_vWriteHighNibble+0x64>
    369a:	4c c0       	rjmp	.+152    	; 0x3734 <DIO_vWriteHighNibble+0xe6>
    369c:	2c 81       	ldd	r18, Y+4	; 0x04
    369e:	3d 81       	ldd	r19, Y+5	; 0x05
    36a0:	22 30       	cpi	r18, 0x02	; 2
    36a2:	31 05       	cpc	r19, r1
    36a4:	31 f1       	breq	.+76     	; 0x36f2 <DIO_vWriteHighNibble+0xa4>
    36a6:	8c 81       	ldd	r24, Y+4	; 0x04
    36a8:	9d 81       	ldd	r25, Y+5	; 0x05
    36aa:	83 30       	cpi	r24, 0x03	; 3
    36ac:	91 05       	cpc	r25, r1
    36ae:	89 f1       	breq	.+98     	; 0x3712 <DIO_vWriteHighNibble+0xc4>
    36b0:	41 c0       	rjmp	.+130    	; 0x3734 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    36b2:	ab e3       	ldi	r26, 0x3B	; 59
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	eb e3       	ldi	r30, 0x3B	; 59
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	80 81       	ld	r24, Z
    36bc:	8f 70       	andi	r24, 0x0F	; 15
    36be:	8c 93       	st	X, r24
      PORTA_REG|= value;
    36c0:	ab e3       	ldi	r26, 0x3B	; 59
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	eb e3       	ldi	r30, 0x3B	; 59
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	90 81       	ld	r25, Z
    36ca:	8b 81       	ldd	r24, Y+3	; 0x03
    36cc:	89 2b       	or	r24, r25
    36ce:	8c 93       	st	X, r24
    36d0:	31 c0       	rjmp	.+98     	; 0x3734 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    36d2:	a8 e3       	ldi	r26, 0x38	; 56
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e8 e3       	ldi	r30, 0x38	; 56
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	8f 70       	andi	r24, 0x0F	; 15
    36de:	8c 93       	st	X, r24
      PORTB_REG |= value;
    36e0:	a8 e3       	ldi	r26, 0x38	; 56
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e8 e3       	ldi	r30, 0x38	; 56
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	90 81       	ld	r25, Z
    36ea:	8b 81       	ldd	r24, Y+3	; 0x03
    36ec:	89 2b       	or	r24, r25
    36ee:	8c 93       	st	X, r24
    36f0:	21 c0       	rjmp	.+66     	; 0x3734 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    36f2:	a5 e3       	ldi	r26, 0x35	; 53
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	e5 e3       	ldi	r30, 0x35	; 53
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	8f 70       	andi	r24, 0x0F	; 15
    36fe:	8c 93       	st	X, r24
      PORTC_REG |= value;
    3700:	a5 e3       	ldi	r26, 0x35	; 53
    3702:	b0 e0       	ldi	r27, 0x00	; 0
    3704:	e5 e3       	ldi	r30, 0x35	; 53
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	90 81       	ld	r25, Z
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	89 2b       	or	r24, r25
    370e:	8c 93       	st	X, r24
    3710:	11 c0       	rjmp	.+34     	; 0x3734 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    3712:	a2 e3       	ldi	r26, 0x32	; 50
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	e2 e3       	ldi	r30, 0x32	; 50
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	8f 70       	andi	r24, 0x0F	; 15
    371e:	8c 93       	st	X, r24
      PORTD_REG |= value;
    3720:	a2 e3       	ldi	r26, 0x32	; 50
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	e2 e3       	ldi	r30, 0x32	; 50
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	90 81       	ld	r25, Z
    372a:	8b 81       	ldd	r24, Y+3	; 0x03
    372c:	89 2b       	or	r24, r25
    372e:	8c 93       	st	X, r24
    3730:	01 c0       	rjmp	.+2      	; 0x3734 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3732:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    3734:	89 81       	ldd	r24, Y+1	; 0x01
}
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	cf 91       	pop	r28
    3742:	df 91       	pop	r29
    3744:	08 95       	ret

00003746 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    3746:	df 93       	push	r29
    3748:	cf 93       	push	r28
    374a:	00 d0       	rcall	.+0      	; 0x374c <DIO_vSetLowNibbleDir+0x6>
    374c:	00 d0       	rcall	.+0      	; 0x374e <DIO_vSetLowNibbleDir+0x8>
    374e:	0f 92       	push	r0
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	8a 83       	std	Y+2, r24	; 0x02
    3756:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    375c:	8a 81       	ldd	r24, Y+2	; 0x02
    375e:	84 30       	cpi	r24, 0x04	; 4
    3760:	08 f0       	brcs	.+2      	; 0x3764 <DIO_vSetLowNibbleDir+0x1e>
    3762:	62 c0       	rjmp	.+196    	; 0x3828 <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	8f 70       	andi	r24, 0x0F	; 15
    3768:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	3d 83       	std	Y+5, r19	; 0x05
    3772:	2c 83       	std	Y+4, r18	; 0x04
    3774:	8c 81       	ldd	r24, Y+4	; 0x04
    3776:	9d 81       	ldd	r25, Y+5	; 0x05
    3778:	81 30       	cpi	r24, 0x01	; 1
    377a:	91 05       	cpc	r25, r1
    377c:	29 f1       	breq	.+74     	; 0x37c8 <DIO_vSetLowNibbleDir+0x82>
    377e:	2c 81       	ldd	r18, Y+4	; 0x04
    3780:	3d 81       	ldd	r19, Y+5	; 0x05
    3782:	22 30       	cpi	r18, 0x02	; 2
    3784:	31 05       	cpc	r19, r1
    3786:	2c f4       	brge	.+10     	; 0x3792 <DIO_vSetLowNibbleDir+0x4c>
    3788:	8c 81       	ldd	r24, Y+4	; 0x04
    378a:	9d 81       	ldd	r25, Y+5	; 0x05
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	61 f0       	breq	.+24     	; 0x37a8 <DIO_vSetLowNibbleDir+0x62>
    3790:	4c c0       	rjmp	.+152    	; 0x382a <DIO_vSetLowNibbleDir+0xe4>
    3792:	2c 81       	ldd	r18, Y+4	; 0x04
    3794:	3d 81       	ldd	r19, Y+5	; 0x05
    3796:	22 30       	cpi	r18, 0x02	; 2
    3798:	31 05       	cpc	r19, r1
    379a:	31 f1       	breq	.+76     	; 0x37e8 <DIO_vSetLowNibbleDir+0xa2>
    379c:	8c 81       	ldd	r24, Y+4	; 0x04
    379e:	9d 81       	ldd	r25, Y+5	; 0x05
    37a0:	83 30       	cpi	r24, 0x03	; 3
    37a2:	91 05       	cpc	r25, r1
    37a4:	89 f1       	breq	.+98     	; 0x3808 <DIO_vSetLowNibbleDir+0xc2>
    37a6:	41 c0       	rjmp	.+130    	; 0x382a <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    37a8:	aa e3       	ldi	r26, 0x3A	; 58
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	ea e3       	ldi	r30, 0x3A	; 58
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 81       	ld	r24, Z
    37b2:	80 7f       	andi	r24, 0xF0	; 240
    37b4:	8c 93       	st	X, r24
      DDRA_REG |= value;
    37b6:	aa e3       	ldi	r26, 0x3A	; 58
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	ea e3       	ldi	r30, 0x3A	; 58
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	90 81       	ld	r25, Z
    37c0:	8b 81       	ldd	r24, Y+3	; 0x03
    37c2:	89 2b       	or	r24, r25
    37c4:	8c 93       	st	X, r24
    37c6:	31 c0       	rjmp	.+98     	; 0x382a <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    37c8:	a7 e3       	ldi	r26, 0x37	; 55
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	e7 e3       	ldi	r30, 0x37	; 55
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	80 81       	ld	r24, Z
    37d2:	80 7f       	andi	r24, 0xF0	; 240
    37d4:	8c 93       	st	X, r24
      DDRB_REG |= value;
    37d6:	a7 e3       	ldi	r26, 0x37	; 55
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	e7 e3       	ldi	r30, 0x37	; 55
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	90 81       	ld	r25, Z
    37e0:	8b 81       	ldd	r24, Y+3	; 0x03
    37e2:	89 2b       	or	r24, r25
    37e4:	8c 93       	st	X, r24
    37e6:	21 c0       	rjmp	.+66     	; 0x382a <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    37e8:	a4 e3       	ldi	r26, 0x34	; 52
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	e4 e3       	ldi	r30, 0x34	; 52
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	80 7f       	andi	r24, 0xF0	; 240
    37f4:	8c 93       	st	X, r24
      DDRC_REG |= value;
    37f6:	a4 e3       	ldi	r26, 0x34	; 52
    37f8:	b0 e0       	ldi	r27, 0x00	; 0
    37fa:	e4 e3       	ldi	r30, 0x34	; 52
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	90 81       	ld	r25, Z
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	89 2b       	or	r24, r25
    3804:	8c 93       	st	X, r24
    3806:	11 c0       	rjmp	.+34     	; 0x382a <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    3808:	a1 e3       	ldi	r26, 0x31	; 49
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	e1 e3       	ldi	r30, 0x31	; 49
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
    3812:	80 7f       	andi	r24, 0xF0	; 240
    3814:	8c 93       	st	X, r24
      DDRD_REG|= value;
    3816:	a1 e3       	ldi	r26, 0x31	; 49
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	e1 e3       	ldi	r30, 0x31	; 49
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	90 81       	ld	r25, Z
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	89 2b       	or	r24, r25
    3824:	8c 93       	st	X, r24
    3826:	01 c0       	rjmp	.+2      	; 0x382a <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    3828:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    382a:	89 81       	ldd	r24, Y+1	; 0x01
}
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	cf 91       	pop	r28
    3838:	df 91       	pop	r29
    383a:	08 95       	ret

0000383c <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	00 d0       	rcall	.+0      	; 0x3842 <DIO_vSetHighNibbleDir+0x6>
    3842:	00 d0       	rcall	.+0      	; 0x3844 <DIO_vSetHighNibbleDir+0x8>
    3844:	0f 92       	push	r0
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	8a 83       	std	Y+2, r24	; 0x02
    384c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	84 30       	cpi	r24, 0x04	; 4
    3856:	08 f0       	brcs	.+2      	; 0x385a <DIO_vSetHighNibbleDir+0x1e>
    3858:	63 c0       	rjmp	.+198    	; 0x3920 <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	82 95       	swap	r24
    385e:	80 7f       	andi	r24, 0xF0	; 240
    3860:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    3862:	8a 81       	ldd	r24, Y+2	; 0x02
    3864:	28 2f       	mov	r18, r24
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	3d 83       	std	Y+5, r19	; 0x05
    386a:	2c 83       	std	Y+4, r18	; 0x04
    386c:	8c 81       	ldd	r24, Y+4	; 0x04
    386e:	9d 81       	ldd	r25, Y+5	; 0x05
    3870:	81 30       	cpi	r24, 0x01	; 1
    3872:	91 05       	cpc	r25, r1
    3874:	29 f1       	breq	.+74     	; 0x38c0 <DIO_vSetHighNibbleDir+0x84>
    3876:	2c 81       	ldd	r18, Y+4	; 0x04
    3878:	3d 81       	ldd	r19, Y+5	; 0x05
    387a:	22 30       	cpi	r18, 0x02	; 2
    387c:	31 05       	cpc	r19, r1
    387e:	2c f4       	brge	.+10     	; 0x388a <DIO_vSetHighNibbleDir+0x4e>
    3880:	8c 81       	ldd	r24, Y+4	; 0x04
    3882:	9d 81       	ldd	r25, Y+5	; 0x05
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	61 f0       	breq	.+24     	; 0x38a0 <DIO_vSetHighNibbleDir+0x64>
    3888:	4c c0       	rjmp	.+152    	; 0x3922 <DIO_vSetHighNibbleDir+0xe6>
    388a:	2c 81       	ldd	r18, Y+4	; 0x04
    388c:	3d 81       	ldd	r19, Y+5	; 0x05
    388e:	22 30       	cpi	r18, 0x02	; 2
    3890:	31 05       	cpc	r19, r1
    3892:	31 f1       	breq	.+76     	; 0x38e0 <DIO_vSetHighNibbleDir+0xa4>
    3894:	8c 81       	ldd	r24, Y+4	; 0x04
    3896:	9d 81       	ldd	r25, Y+5	; 0x05
    3898:	83 30       	cpi	r24, 0x03	; 3
    389a:	91 05       	cpc	r25, r1
    389c:	89 f1       	breq	.+98     	; 0x3900 <DIO_vSetHighNibbleDir+0xc4>
    389e:	41 c0       	rjmp	.+130    	; 0x3922 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    38a0:	aa e3       	ldi	r26, 0x3A	; 58
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
    38a4:	ea e3       	ldi	r30, 0x3A	; 58
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	80 81       	ld	r24, Z
    38aa:	8f 70       	andi	r24, 0x0F	; 15
    38ac:	8c 93       	st	X, r24
      DDRA_REG |= value;
    38ae:	aa e3       	ldi	r26, 0x3A	; 58
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	ea e3       	ldi	r30, 0x3A	; 58
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	90 81       	ld	r25, Z
    38b8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ba:	89 2b       	or	r24, r25
    38bc:	8c 93       	st	X, r24
    38be:	31 c0       	rjmp	.+98     	; 0x3922 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    38c0:	a7 e3       	ldi	r26, 0x37	; 55
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	e7 e3       	ldi	r30, 0x37	; 55
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	80 81       	ld	r24, Z
    38ca:	8f 70       	andi	r24, 0x0F	; 15
    38cc:	8c 93       	st	X, r24
      DDRB_REG |= value;
    38ce:	a7 e3       	ldi	r26, 0x37	; 55
    38d0:	b0 e0       	ldi	r27, 0x00	; 0
    38d2:	e7 e3       	ldi	r30, 0x37	; 55
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	90 81       	ld	r25, Z
    38d8:	8b 81       	ldd	r24, Y+3	; 0x03
    38da:	89 2b       	or	r24, r25
    38dc:	8c 93       	st	X, r24
    38de:	21 c0       	rjmp	.+66     	; 0x3922 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    38e0:	a4 e3       	ldi	r26, 0x34	; 52
    38e2:	b0 e0       	ldi	r27, 0x00	; 0
    38e4:	e4 e3       	ldi	r30, 0x34	; 52
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	80 81       	ld	r24, Z
    38ea:	8f 70       	andi	r24, 0x0F	; 15
    38ec:	8c 93       	st	X, r24
      DDRC_REG |= value;
    38ee:	a4 e3       	ldi	r26, 0x34	; 52
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	e4 e3       	ldi	r30, 0x34	; 52
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	90 81       	ld	r25, Z
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	89 2b       	or	r24, r25
    38fc:	8c 93       	st	X, r24
    38fe:	11 c0       	rjmp	.+34     	; 0x3922 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    3900:	a1 e3       	ldi	r26, 0x31	; 49
    3902:	b0 e0       	ldi	r27, 0x00	; 0
    3904:	e1 e3       	ldi	r30, 0x31	; 49
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	80 81       	ld	r24, Z
    390a:	8f 70       	andi	r24, 0x0F	; 15
    390c:	8c 93       	st	X, r24
      DDRD_REG |= value;
    390e:	a1 e3       	ldi	r26, 0x31	; 49
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e1 e3       	ldi	r30, 0x31	; 49
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	90 81       	ld	r25, Z
    3918:	8b 81       	ldd	r24, Y+3	; 0x03
    391a:	89 2b       	or	r24, r25
    391c:	8c 93       	st	X, r24
    391e:	01 c0       	rjmp	.+2      	; 0x3922 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3920:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    3922:	89 81       	ldd	r24, Y+1	; 0x01
}
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	cf 91       	pop	r28
    3930:	df 91       	pop	r29
    3932:	08 95       	ret

00003934 <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
    3934:	df 93       	push	r29
    3936:	cf 93       	push	r28
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
    393c:	a7 e2       	ldi	r26, 0x27	; 39
    393e:	b0 e0       	ldi	r27, 0x00	; 0
    3940:	e7 e2       	ldi	r30, 0x27	; 39
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	80 81       	ld	r24, Z
    3946:	80 64       	ori	r24, 0x40	; 64
    3948:	8c 93       	st	X, r24
      CLR_BIT(ADMUX, ADMUX_REFS1);
    394a:	a7 e2       	ldi	r26, 0x27	; 39
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	e7 e2       	ldi	r30, 0x27	; 39
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	8f 77       	andi	r24, 0x7F	; 127
    3956:	8c 93       	st	X, r24
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
    3958:	a7 e2       	ldi	r26, 0x27	; 39
    395a:	b0 e0       	ldi	r27, 0x00	; 0
    395c:	e7 e2       	ldi	r30, 0x27	; 39
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	80 81       	ld	r24, Z
    3962:	8f 7d       	andi	r24, 0xDF	; 223
    3964:	8c 93       	st	X, r24
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
    3966:	a6 e2       	ldi	r26, 0x26	; 38
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	e6 e2       	ldi	r30, 0x26	; 38
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	88 7f       	andi	r24, 0xF8	; 248
    3972:	8c 93       	st	X, r24
      ADCSRA |= ADC_PRESCALLER;
    3974:	a6 e2       	ldi	r26, 0x26	; 38
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	e6 e2       	ldi	r30, 0x26	; 38
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	87 60       	ori	r24, 0x07	; 7
    3980:	8c 93       	st	X, r24

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    3982:	a6 e2       	ldi	r26, 0x26	; 38
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	e6 e2       	ldi	r30, 0x26	; 38
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	8f 7d       	andi	r24, 0xDF	; 223
    398e:	8c 93       	st	X, r24

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
    3990:	a6 e2       	ldi	r26, 0x26	; 38
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e6 e2       	ldi	r30, 0x26	; 38
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	80 68       	ori	r24, 0x80	; 128
    399c:	8c 93       	st	X, r24
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    399e:	a6 e2       	ldi	r26, 0x26	; 38
    39a0:	b0 e0       	ldi	r27, 0x00	; 0
    39a2:	e6 e2       	ldi	r30, 0x26	; 38
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	80 81       	ld	r24, Z
    39a8:	87 7f       	andi	r24, 0xF7	; 247
    39aa:	8c 93       	st	X, r24
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
    39ac:	cf 91       	pop	r28
    39ae:	df 91       	pop	r29
    39b0:	08 95       	ret

000039b2 <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
    39b2:	df 93       	push	r29
    39b4:	cf 93       	push	r28
    39b6:	cd b7       	in	r28, 0x3d	; 61
    39b8:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
    39ba:	a6 e2       	ldi	r26, 0x26	; 38
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e6 e2       	ldi	r30, 0x26	; 38
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	80 81       	ld	r24, Z
    39c4:	80 68       	ori	r24, 0x80	; 128
    39c6:	8c 93       	st	X, r24
}
    39c8:	cf 91       	pop	r28
    39ca:	df 91       	pop	r29
    39cc:	08 95       	ret

000039ce <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
    39ce:	df 93       	push	r29
    39d0:	cf 93       	push	r28
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
    39d6:	a6 e2       	ldi	r26, 0x26	; 38
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	e6 e2       	ldi	r30, 0x26	; 38
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	80 81       	ld	r24, Z
    39e0:	8f 77       	andi	r24, 0x7F	; 127
    39e2:	8c 93       	st	X, r24
}
    39e4:	cf 91       	pop	r28
    39e6:	df 91       	pop	r29
    39e8:	08 95       	ret

000039ea <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
    39ea:	df 93       	push	r29
    39ec:	cf 93       	push	r28
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
    39f2:	a6 e2       	ldi	r26, 0x26	; 38
    39f4:	b0 e0       	ldi	r27, 0x00	; 0
    39f6:	e6 e2       	ldi	r30, 0x26	; 38
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	80 81       	ld	r24, Z
    39fc:	88 60       	ori	r24, 0x08	; 8
    39fe:	8c 93       	st	X, r24
}
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
    3a0e:	a6 e2       	ldi	r26, 0x26	; 38
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	e6 e2       	ldi	r30, 0x26	; 38
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	80 81       	ld	r24, Z
    3a18:	87 7f       	andi	r24, 0xF7	; 247
    3a1a:	8c 93       	st	X, r24
}
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <ADC_u8VoltageReference+0x6>
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
    3a32:	8a 81       	ldd	r24, Y+2	; 0x02
    3a34:	88 23       	and	r24, r24
    3a36:	31 f0       	breq	.+12     	; 0x3a44 <ADC_u8VoltageReference+0x22>
    3a38:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3a:	81 30       	cpi	r24, 0x01	; 1
    3a3c:	19 f0       	breq	.+6      	; 0x3a44 <ADC_u8VoltageReference+0x22>
    3a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a40:	83 30       	cpi	r24, 0x03	; 3
    3a42:	e1 f4       	brne	.+56     	; 0x3a7c <ADC_u8VoltageReference+0x5a>
  {

    ADMUX &= 0b00111111;
    3a44:	a7 e2       	ldi	r26, 0x27	; 39
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	e7 e2       	ldi	r30, 0x27	; 39
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	80 81       	ld	r24, Z
    3a4e:	8f 73       	andi	r24, 0x3F	; 63
    3a50:	8c 93       	st	X, r24
    ADMUX |= (Copy_u8VREF << 6);
    3a52:	a7 e2       	ldi	r26, 0x27	; 39
    3a54:	b0 e0       	ldi	r27, 0x00	; 0
    3a56:	e7 e2       	ldi	r30, 0x27	; 39
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	28 2f       	mov	r18, r24
    3a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a60:	88 2f       	mov	r24, r24
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	00 24       	eor	r0, r0
    3a66:	96 95       	lsr	r25
    3a68:	87 95       	ror	r24
    3a6a:	07 94       	ror	r0
    3a6c:	96 95       	lsr	r25
    3a6e:	87 95       	ror	r24
    3a70:	07 94       	ror	r0
    3a72:	98 2f       	mov	r25, r24
    3a74:	80 2d       	mov	r24, r0
    3a76:	82 2b       	or	r24, r18
    3a78:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    3a7a:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    3a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	cf 91       	pop	r28
    3a84:	df 91       	pop	r29
    3a86:	08 95       	ret

00003a88 <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	00 d0       	rcall	.+0      	; 0x3a8e <ADC_u8SetPrescaler+0x6>
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
    3a92:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
    3a98:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9a:	88 30       	cpi	r24, 0x08	; 8
    3a9c:	80 f4       	brcc	.+32     	; 0x3abe <ADC_u8SetPrescaler+0x36>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
    3a9e:	a6 e2       	ldi	r26, 0x26	; 38
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	e6 e2       	ldi	r30, 0x26	; 38
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	80 81       	ld	r24, Z
    3aa8:	88 7f       	andi	r24, 0xF8	; 248
    3aaa:	8c 93       	st	X, r24
    ADCSRA |= Copy_u8Prescaler;
    3aac:	a6 e2       	ldi	r26, 0x26	; 38
    3aae:	b0 e0       	ldi	r27, 0x00	; 0
    3ab0:	e6 e2       	ldi	r30, 0x26	; 38
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	90 81       	ld	r25, Z
    3ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab8:	89 2b       	or	r24, r25
    3aba:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    3abc:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ac0:	0f 90       	pop	r0
    3ac2:	0f 90       	pop	r0
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	00 d0       	rcall	.+0      	; 0x3ad0 <ADC_u8SetAdjustment+0x6>
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
    3ad6:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
    3ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    3ada:	88 23       	and	r24, r24
    3adc:	41 f4       	brne	.+16     	; 0x3aee <ADC_u8SetAdjustment+0x24>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    3ade:	a7 e2       	ldi	r26, 0x27	; 39
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	e7 e2       	ldi	r30, 0x27	; 39
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	8f 7d       	andi	r24, 0xDF	; 223
    3aea:	8c 93       	st	X, r24
    3aec:	0d c0       	rjmp	.+26     	; 0x3b08 <ADC_u8SetAdjustment+0x3e>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
    3aee:	8a 81       	ldd	r24, Y+2	; 0x02
    3af0:	81 30       	cpi	r24, 0x01	; 1
    3af2:	41 f4       	brne	.+16     	; 0x3b04 <ADC_u8SetAdjustment+0x3a>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
    3af4:	a7 e2       	ldi	r26, 0x27	; 39
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	e7 e2       	ldi	r30, 0x27	; 39
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	80 62       	ori	r24, 0x20	; 32
    3b00:	8c 93       	st	X, r24
    3b02:	02 c0       	rjmp	.+4      	; 0x3b08 <ADC_u8SetAdjustment+0x3e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	cf 91       	pop	r28
    3b10:	df 91       	pop	r29
    3b12:	08 95       	ret

00003b14 <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	00 d0       	rcall	.+0      	; 0x3b1a <ADC_u8SetTriggerSource+0x6>
    3b1a:	cd b7       	in	r28, 0x3d	; 61
    3b1c:	de b7       	in	r29, 0x3e	; 62
    3b1e:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    3b20:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
    3b22:	8a 81       	ldd	r24, Y+2	; 0x02
    3b24:	88 30       	cpi	r24, 0x08	; 8
    3b26:	41 f4       	brne	.+16     	; 0x3b38 <ADC_u8SetTriggerSource+0x24>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    3b28:	a6 e2       	ldi	r26, 0x26	; 38
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	e6 e2       	ldi	r30, 0x26	; 38
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	80 81       	ld	r24, Z
    3b32:	8f 7d       	andi	r24, 0xDF	; 223
    3b34:	8c 93       	st	X, r24
    3b36:	1a c0       	rjmp	.+52     	; 0x3b6c <ADC_u8SetTriggerSource+0x58>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	88 30       	cpi	r24, 0x08	; 8
    3b3c:	a8 f4       	brcc	.+42     	; 0x3b68 <ADC_u8SetTriggerSource+0x54>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
    3b3e:	a6 e2       	ldi	r26, 0x26	; 38
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e6 e2       	ldi	r30, 0x26	; 38
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	80 62       	ori	r24, 0x20	; 32
    3b4a:	8c 93       	st	X, r24
    SFIOR &= 0b00011111;
    3b4c:	a0 e5       	ldi	r26, 0x50	; 80
    3b4e:	b0 e0       	ldi	r27, 0x00	; 0
    3b50:	e0 e5       	ldi	r30, 0x50	; 80
    3b52:	f0 e0       	ldi	r31, 0x00	; 0
    3b54:	80 81       	ld	r24, Z
    3b56:	8f 71       	andi	r24, 0x1F	; 31
    3b58:	8c 93       	st	X, r24
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
    3b5a:	a0 e5       	ldi	r26, 0x50	; 80
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e0 e5       	ldi	r30, 0x50	; 80
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	80 81       	ld	r24, Z
    3b64:	8c 93       	st	X, r24
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <ADC_u8SetTriggerSource+0x58>
  }
  else
  {
    Local_u8ErrorState = NOK;
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	cf 91       	pop	r28
    3b74:	df 91       	pop	r29
    3b76:	08 95       	ret

00003b78 <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
    3b78:	df 93       	push	r29
    3b7a:	cf 93       	push	r28
    3b7c:	cd b7       	in	r28, 0x3d	; 61
    3b7e:	de b7       	in	r29, 0x3e	; 62
    3b80:	28 97       	sbiw	r28, 0x08	; 8
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	f8 94       	cli
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	cd bf       	out	0x3d, r28	; 61
    3b8c:	8e 83       	std	Y+6, r24	; 0x06
    3b8e:	78 87       	std	Y+8, r23	; 0x08
    3b90:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
    3b92:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32TimeOutCounter = 0;
    3b94:	19 82       	std	Y+1, r1	; 0x01
    3b96:	1a 82       	std	Y+2, r1	; 0x02
    3b98:	1b 82       	std	Y+3, r1	; 0x03
    3b9a:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu16Result != NULL)
    3b9c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b9e:	98 85       	ldd	r25, Y+8	; 0x08
    3ba0:	00 97       	sbiw	r24, 0x00	; 0
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <ADC_u8GetResultSync+0x2e>
    3ba4:	78 c0       	rjmp	.+240    	; 0x3c96 <ADC_u8GetResultSync+0x11e>
  {
    if (ADC_u8State == IDLE)
    3ba6:	80 91 f4 01 	lds	r24, 0x01F4
    3baa:	88 23       	and	r24, r24
    3bac:	09 f0       	breq	.+2      	; 0x3bb0 <ADC_u8GetResultSync+0x38>
    3bae:	70 c0       	rjmp	.+224    	; 0x3c90 <ADC_u8GetResultSync+0x118>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	80 93 f4 01 	sts	0x01F4, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    3bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    3bb8:	80 32       	cpi	r24, 0x20	; 32
    3bba:	78 f4       	brcc	.+30     	; 0x3bda <ADC_u8GetResultSync+0x62>
      {
        ADMUX &= 0b11100000;
    3bbc:	a7 e2       	ldi	r26, 0x27	; 39
    3bbe:	b0 e0       	ldi	r27, 0x00	; 0
    3bc0:	e7 e2       	ldi	r30, 0x27	; 39
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	80 81       	ld	r24, Z
    3bc6:	80 7e       	andi	r24, 0xE0	; 224
    3bc8:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    3bca:	a7 e2       	ldi	r26, 0x27	; 39
    3bcc:	b0 e0       	ldi	r27, 0x00	; 0
    3bce:	e7 e2       	ldi	r30, 0x27	; 39
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	90 81       	ld	r25, Z
    3bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd6:	89 2b       	or	r24, r25
    3bd8:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3bda:	a6 e2       	ldi	r26, 0x26	; 38
    3bdc:	b0 e0       	ldi	r27, 0x00	; 0
    3bde:	e6 e2       	ldi	r30, 0x26	; 38
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	80 81       	ld	r24, Z
    3be4:	80 64       	ori	r24, 0x40	; 64
    3be6:	8c 93       	st	X, r24
    3be8:	0b c0       	rjmp	.+22     	; 0x3c00 <ADC_u8GetResultSync+0x88>

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
      {
        Local_u32TimeOutCounter++;
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	9a 81       	ldd	r25, Y+2	; 0x02
    3bee:	ab 81       	ldd	r26, Y+3	; 0x03
    3bf0:	bc 81       	ldd	r27, Y+4	; 0x04
    3bf2:	01 96       	adiw	r24, 0x01	; 1
    3bf4:	a1 1d       	adc	r26, r1
    3bf6:	b1 1d       	adc	r27, r1
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	9a 83       	std	Y+2, r25	; 0x02
    3bfc:	ab 83       	std	Y+3, r26	; 0x03
    3bfe:	bc 83       	std	Y+4, r27	; 0x04

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
    3c00:	e6 e2       	ldi	r30, 0x26	; 38
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	80 81       	ld	r24, Z
    3c06:	88 2f       	mov	r24, r24
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	80 71       	andi	r24, 0x10	; 16
    3c0c:	90 70       	andi	r25, 0x00	; 0
    3c0e:	95 95       	asr	r25
    3c10:	87 95       	ror	r24
    3c12:	95 95       	asr	r25
    3c14:	87 95       	ror	r24
    3c16:	95 95       	asr	r25
    3c18:	87 95       	ror	r24
    3c1a:	95 95       	asr	r25
    3c1c:	87 95       	ror	r24
    3c1e:	00 97       	sbiw	r24, 0x00	; 0
    3c20:	61 f4       	brne	.+24     	; 0x3c3a <ADC_u8GetResultSync+0xc2>
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	ab 81       	ldd	r26, Y+3	; 0x03
    3c28:	bc 81       	ldd	r27, Y+4	; 0x04
    3c2a:	80 35       	cpi	r24, 0x50	; 80
    3c2c:	23 ec       	ldi	r18, 0xC3	; 195
    3c2e:	92 07       	cpc	r25, r18
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	a2 07       	cpc	r26, r18
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	b2 07       	cpc	r27, r18
    3c38:	c0 f2       	brcs	.-80     	; 0x3bea <ADC_u8GetResultSync+0x72>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
    3c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3e:	ab 81       	ldd	r26, Y+3	; 0x03
    3c40:	bc 81       	ldd	r27, Y+4	; 0x04
    3c42:	80 35       	cpi	r24, 0x50	; 80
    3c44:	23 ec       	ldi	r18, 0xC3	; 195
    3c46:	92 07       	cpc	r25, r18
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	a2 07       	cpc	r26, r18
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	b2 07       	cpc	r27, r18
    3c50:	19 f4       	brne	.+6      	; 0x3c58 <ADC_u8GetResultSync+0xe0>
      {
        Local_u8ErrorState = NOK;
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	8d 83       	std	Y+5, r24	; 0x05
    3c56:	19 c0       	rjmp	.+50     	; 0x3c8a <ADC_u8GetResultSync+0x112>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    3c58:	a6 e2       	ldi	r26, 0x26	; 38
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	e6 e2       	ldi	r30, 0x26	; 38
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	80 61       	ori	r24, 0x10	; 16
    3c64:	8c 93       	st	X, r24

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
    3c66:	e4 e2       	ldi	r30, 0x24	; 36
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	80 81       	ld	r24, Z
    3c6c:	28 2f       	mov	r18, r24
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	e5 e2       	ldi	r30, 0x25	; 37
    3c72:	f0 e0       	ldi	r31, 0x00	; 0
    3c74:	80 81       	ld	r24, Z
    3c76:	88 2f       	mov	r24, r24
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	98 2f       	mov	r25, r24
    3c7c:	88 27       	eor	r24, r24
    3c7e:	82 2b       	or	r24, r18
    3c80:	93 2b       	or	r25, r19
    3c82:	ef 81       	ldd	r30, Y+7	; 0x07
    3c84:	f8 85       	ldd	r31, Y+8	; 0x08
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    3c8a:	10 92 f4 01 	sts	0x01F4, r1
    3c8e:	05 c0       	rjmp	.+10     	; 0x3c9a <ADC_u8GetResultSync+0x122>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    3c90:	83 e0       	ldi	r24, 0x03	; 3
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	02 c0       	rjmp	.+4      	; 0x3c9a <ADC_u8GetResultSync+0x122>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    3c96:	82 e0       	ldi	r24, 0x02	; 2
    3c98:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    3c9a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3c9c:	28 96       	adiw	r28, 0x08	; 8
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	de bf       	out	0x3e, r29	; 62
    3ca4:	0f be       	out	0x3f, r0	; 63
    3ca6:	cd bf       	out	0x3d, r28	; 61
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	00 d0       	rcall	.+0      	; 0x3cb4 <ADC_u8StartConversionAsynch+0x6>
    3cb4:	00 d0       	rcall	.+0      	; 0x3cb6 <ADC_u8StartConversionAsynch+0x8>
    3cb6:	00 d0       	rcall	.+0      	; 0x3cb8 <ADC_u8StartConversionAsynch+0xa>
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	8a 83       	std	Y+2, r24	; 0x02
    3cbe:	7c 83       	std	Y+4, r23	; 0x04
    3cc0:	6b 83       	std	Y+3, r22	; 0x03
    3cc2:	5e 83       	std	Y+6, r21	; 0x06
    3cc4:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
    3cc6:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    3cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cca:	9c 81       	ldd	r25, Y+4	; 0x04
    3ccc:	00 97       	sbiw	r24, 0x00	; 0
    3cce:	e9 f1       	breq	.+122    	; 0x3d4a <ADC_u8StartConversionAsynch+0x9c>
    3cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	c9 f1       	breq	.+114    	; 0x3d4a <ADC_u8StartConversionAsynch+0x9c>
  {
    if (ADC_u8State == IDLE)
    3cd8:	80 91 f4 01 	lds	r24, 0x01F4
    3cdc:	88 23       	and	r24, r24
    3cde:	91 f5       	brne	.+100    	; 0x3d44 <ADC_u8StartConversionAsynch+0x96>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	80 93 f4 01 	sts	0x01F4, r24

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    3ce6:	10 92 f5 01 	sts	0x01F5, r1

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
    3cea:	8b 81       	ldd	r24, Y+3	; 0x03
    3cec:	9c 81       	ldd	r25, Y+4	; 0x04
    3cee:	90 93 f1 01 	sts	0x01F1, r25
    3cf2:	80 93 f0 01 	sts	0x01F0, r24

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    3cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfa:	90 93 f3 01 	sts	0x01F3, r25
    3cfe:	80 93 f2 01 	sts	0x01F2, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	80 32       	cpi	r24, 0x20	; 32
    3d06:	78 f4       	brcc	.+30     	; 0x3d26 <ADC_u8StartConversionAsynch+0x78>
      {
        ADMUX &= 0b11100000;
    3d08:	a7 e2       	ldi	r26, 0x27	; 39
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	e7 e2       	ldi	r30, 0x27	; 39
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	80 81       	ld	r24, Z
    3d12:	80 7e       	andi	r24, 0xE0	; 224
    3d14:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    3d16:	a7 e2       	ldi	r26, 0x27	; 39
    3d18:	b0 e0       	ldi	r27, 0x00	; 0
    3d1a:	e7 e2       	ldi	r30, 0x27	; 39
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	90 81       	ld	r25, Z
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	89 2b       	or	r24, r25
    3d24:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3d26:	a6 e2       	ldi	r26, 0x26	; 38
    3d28:	b0 e0       	ldi	r27, 0x00	; 0
    3d2a:	e6 e2       	ldi	r30, 0x26	; 38
    3d2c:	f0 e0       	ldi	r31, 0x00	; 0
    3d2e:	80 81       	ld	r24, Z
    3d30:	80 64       	ori	r24, 0x40	; 64
    3d32:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    3d34:	a6 e2       	ldi	r26, 0x26	; 38
    3d36:	b0 e0       	ldi	r27, 0x00	; 0
    3d38:	e6 e2       	ldi	r30, 0x26	; 38
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	80 81       	ld	r24, Z
    3d3e:	88 60       	ori	r24, 0x08	; 8
    3d40:	8c 93       	st	X, r24
    3d42:	05 c0       	rjmp	.+10     	; 0x3d4e <ADC_u8StartConversionAsynch+0xa0>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    3d44:	83 e0       	ldi	r24, 0x03	; 3
    3d46:	89 83       	std	Y+1, r24	; 0x01
    3d48:	02 c0       	rjmp	.+4      	; 0x3d4e <ADC_u8StartConversionAsynch+0xa0>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    3d4a:	82 e0       	ldi	r24, 0x02	; 2
    3d4c:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    3d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d50:	26 96       	adiw	r28, 0x06	; 6
    3d52:	0f b6       	in	r0, 0x3f	; 63
    3d54:	f8 94       	cli
    3d56:	de bf       	out	0x3e, r29	; 62
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	cd bf       	out	0x3d, r28	; 61
    3d5c:	cf 91       	pop	r28
    3d5e:	df 91       	pop	r29
    3d60:	08 95       	ret

00003d62 <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
    3d62:	df 93       	push	r29
    3d64:	cf 93       	push	r28
    3d66:	00 d0       	rcall	.+0      	; 0x3d68 <ADC_u8StartChainAsynch+0x6>
    3d68:	0f 92       	push	r0
    3d6a:	cd b7       	in	r28, 0x3d	; 61
    3d6c:	de b7       	in	r29, 0x3e	; 62
    3d6e:	9b 83       	std	Y+3, r25	; 0x03
    3d70:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    3d72:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
    3d74:	8a 81       	ldd	r24, Y+2	; 0x02
    3d76:	9b 81       	ldd	r25, Y+3	; 0x03
    3d78:	00 97       	sbiw	r24, 0x00	; 0
    3d7a:	09 f4       	brne	.+2      	; 0x3d7e <ADC_u8StartChainAsynch+0x1c>
    3d7c:	79 c0       	rjmp	.+242    	; 0x3e70 <ADC_u8StartChainAsynch+0x10e>
    3d7e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d80:	fb 81       	ldd	r31, Y+3	; 0x03
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	09 f4       	brne	.+2      	; 0x3d8c <ADC_u8StartChainAsynch+0x2a>
    3d8a:	72 c0       	rjmp	.+228    	; 0x3e70 <ADC_u8StartChainAsynch+0x10e>
    3d8c:	ea 81       	ldd	r30, Y+2	; 0x02
    3d8e:	fb 81       	ldd	r31, Y+3	; 0x03
    3d90:	85 81       	ldd	r24, Z+5	; 0x05
    3d92:	96 81       	ldd	r25, Z+6	; 0x06
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	09 f4       	brne	.+2      	; 0x3d9a <ADC_u8StartChainAsynch+0x38>
    3d98:	6b c0       	rjmp	.+214    	; 0x3e70 <ADC_u8StartChainAsynch+0x10e>
    3d9a:	ea 81       	ldd	r30, Y+2	; 0x02
    3d9c:	fb 81       	ldd	r31, Y+3	; 0x03
    3d9e:	82 81       	ldd	r24, Z+2	; 0x02
    3da0:	93 81       	ldd	r25, Z+3	; 0x03
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	09 f4       	brne	.+2      	; 0x3da8 <ADC_u8StartChainAsynch+0x46>
    3da6:	64 c0       	rjmp	.+200    	; 0x3e70 <ADC_u8StartChainAsynch+0x10e>
  {
    if (ADC_u8State == IDLE)
    3da8:	80 91 f4 01 	lds	r24, 0x01F4
    3dac:	88 23       	and	r24, r24
    3dae:	09 f0       	breq	.+2      	; 0x3db2 <ADC_u8StartChainAsynch+0x50>
    3db0:	5c c0       	rjmp	.+184    	; 0x3e6a <ADC_u8StartChainAsynch+0x108>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	80 93 f4 01 	sts	0x01F4, r24

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	80 93 f5 01 	sts	0x01F5, r24

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
    3dbe:	ea 81       	ldd	r30, Y+2	; 0x02
    3dc0:	fb 81       	ldd	r31, Y+3	; 0x03
    3dc2:	82 81       	ldd	r24, Z+2	; 0x02
    3dc4:	93 81       	ldd	r25, Z+3	; 0x03
    3dc6:	90 93 f1 01 	sts	0x01F1, r25
    3dca:	80 93 f0 01 	sts	0x01F0, r24
      ADC_pu8ChainChannel = Copy_Chain->Channel;
    3dce:	ea 81       	ldd	r30, Y+2	; 0x02
    3dd0:	fb 81       	ldd	r31, Y+3	; 0x03
    3dd2:	80 81       	ld	r24, Z
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	90 93 f7 01 	sts	0x01F7, r25
    3dda:	80 93 f6 01 	sts	0x01F6, r24
      ADC_u8ChainSize = Copy_Chain->Size;
    3dde:	ea 81       	ldd	r30, Y+2	; 0x02
    3de0:	fb 81       	ldd	r31, Y+3	; 0x03
    3de2:	84 81       	ldd	r24, Z+4	; 0x04
    3de4:	80 93 f8 01 	sts	0x01F8, r24
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
    3de8:	ea 81       	ldd	r30, Y+2	; 0x02
    3dea:	fb 81       	ldd	r31, Y+3	; 0x03
    3dec:	85 81       	ldd	r24, Z+5	; 0x05
    3dee:	96 81       	ldd	r25, Z+6	; 0x06
    3df0:	90 93 f3 01 	sts	0x01F3, r25
    3df4:	80 93 f2 01 	sts	0x01F2, r24

      /*Set Index to first element*/
      ADC_u8Index = 0;
    3df8:	10 92 f9 01 	sts	0x01F9, r1

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    3dfc:	20 91 f6 01 	lds	r18, 0x01F6
    3e00:	30 91 f7 01 	lds	r19, 0x01F7
    3e04:	80 91 f9 01 	lds	r24, 0x01F9
    3e08:	88 2f       	mov	r24, r24
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	f9 01       	movw	r30, r18
    3e0e:	e8 0f       	add	r30, r24
    3e10:	f9 1f       	adc	r31, r25
    3e12:	80 81       	ld	r24, Z
    3e14:	80 32       	cpi	r24, 0x20	; 32
    3e16:	d0 f4       	brcc	.+52     	; 0x3e4c <ADC_u8StartChainAsynch+0xea>
      {
        ADMUX &= 0b11100000;
    3e18:	a7 e2       	ldi	r26, 0x27	; 39
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	e7 e2       	ldi	r30, 0x27	; 39
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	80 81       	ld	r24, Z
    3e22:	80 7e       	andi	r24, 0xE0	; 224
    3e24:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    3e26:	a7 e2       	ldi	r26, 0x27	; 39
    3e28:	b0 e0       	ldi	r27, 0x00	; 0
    3e2a:	e7 e2       	ldi	r30, 0x27	; 39
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	40 81       	ld	r20, Z
    3e30:	20 91 f6 01 	lds	r18, 0x01F6
    3e34:	30 91 f7 01 	lds	r19, 0x01F7
    3e38:	80 91 f9 01 	lds	r24, 0x01F9
    3e3c:	88 2f       	mov	r24, r24
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	f9 01       	movw	r30, r18
    3e42:	e8 0f       	add	r30, r24
    3e44:	f9 1f       	adc	r31, r25
    3e46:	80 81       	ld	r24, Z
    3e48:	84 2b       	or	r24, r20
    3e4a:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3e4c:	a6 e2       	ldi	r26, 0x26	; 38
    3e4e:	b0 e0       	ldi	r27, 0x00	; 0
    3e50:	e6 e2       	ldi	r30, 0x26	; 38
    3e52:	f0 e0       	ldi	r31, 0x00	; 0
    3e54:	80 81       	ld	r24, Z
    3e56:	80 64       	ori	r24, 0x40	; 64
    3e58:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    3e5a:	a6 e2       	ldi	r26, 0x26	; 38
    3e5c:	b0 e0       	ldi	r27, 0x00	; 0
    3e5e:	e6 e2       	ldi	r30, 0x26	; 38
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	80 81       	ld	r24, Z
    3e64:	88 60       	ori	r24, 0x08	; 8
    3e66:	8c 93       	st	X, r24
    3e68:	05 c0       	rjmp	.+10     	; 0x3e74 <ADC_u8StartChainAsynch+0x112>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    3e6a:	83 e0       	ldi	r24, 0x03	; 3
    3e6c:	89 83       	std	Y+1, r24	; 0x01
    3e6e:	02 c0       	rjmp	.+4      	; 0x3e74 <ADC_u8StartChainAsynch+0x112>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    3e70:	82 e0       	ldi	r24, 0x02	; 2
    3e72:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	08 95       	ret

00003e82 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    3e82:	1f 92       	push	r1
    3e84:	0f 92       	push	r0
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	0f 92       	push	r0
    3e8a:	11 24       	eor	r1, r1
    3e8c:	2f 93       	push	r18
    3e8e:	3f 93       	push	r19
    3e90:	4f 93       	push	r20
    3e92:	5f 93       	push	r21
    3e94:	6f 93       	push	r22
    3e96:	7f 93       	push	r23
    3e98:	8f 93       	push	r24
    3e9a:	9f 93       	push	r25
    3e9c:	af 93       	push	r26
    3e9e:	bf 93       	push	r27
    3ea0:	ef 93       	push	r30
    3ea2:	ff 93       	push	r31
    3ea4:	df 93       	push	r29
    3ea6:	cf 93       	push	r28
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    3eac:	80 91 f5 01 	lds	r24, 0x01F5
    3eb0:	88 23       	and	r24, r24
    3eb2:	19 f5       	brne	.+70     	; 0x3efa <__vector_16+0x78>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
    3eb4:	a0 91 f0 01 	lds	r26, 0x01F0
    3eb8:	b0 91 f1 01 	lds	r27, 0x01F1
    3ebc:	e4 e2       	ldi	r30, 0x24	; 36
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	80 81       	ld	r24, Z
    3ec2:	28 2f       	mov	r18, r24
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	e5 e2       	ldi	r30, 0x25	; 37
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	80 81       	ld	r24, Z
    3ecc:	88 2f       	mov	r24, r24
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	98 2f       	mov	r25, r24
    3ed2:	88 27       	eor	r24, r24
    3ed4:	82 2b       	or	r24, r18
    3ed6:	93 2b       	or	r25, r19
    3ed8:	8d 93       	st	X+, r24
    3eda:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
    3edc:	10 92 f4 01 	sts	0x01F4, r1

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
    3ee0:	e0 91 f2 01 	lds	r30, 0x01F2
    3ee4:	f0 91 f3 01 	lds	r31, 0x01F3
    3ee8:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    3eea:	a6 e2       	ldi	r26, 0x26	; 38
    3eec:	b0 e0       	ldi	r27, 0x00	; 0
    3eee:	e6 e2       	ldi	r30, 0x26	; 38
    3ef0:	f0 e0       	ldi	r31, 0x00	; 0
    3ef2:	80 81       	ld	r24, Z
    3ef4:	87 7f       	andi	r24, 0xF7	; 247
    3ef6:	8c 93       	st	X, r24
    3ef8:	6c c0       	rjmp	.+216    	; 0x3fd2 <__vector_16+0x150>
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
    3efa:	80 91 f5 01 	lds	r24, 0x01F5
    3efe:	81 30       	cpi	r24, 0x01	; 1
    3f00:	09 f0       	breq	.+2      	; 0x3f04 <__vector_16+0x82>
    3f02:	67 c0       	rjmp	.+206    	; 0x3fd2 <__vector_16+0x150>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
    3f04:	20 91 f0 01 	lds	r18, 0x01F0
    3f08:	30 91 f1 01 	lds	r19, 0x01F1
    3f0c:	80 91 f9 01 	lds	r24, 0x01F9
    3f10:	88 2f       	mov	r24, r24
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	88 0f       	add	r24, r24
    3f16:	99 1f       	adc	r25, r25
    3f18:	d9 01       	movw	r26, r18
    3f1a:	a8 0f       	add	r26, r24
    3f1c:	b9 1f       	adc	r27, r25
    3f1e:	e4 e2       	ldi	r30, 0x24	; 36
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
    3f22:	80 81       	ld	r24, Z
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	e5 e2       	ldi	r30, 0x25	; 37
    3f2a:	f0 e0       	ldi	r31, 0x00	; 0
    3f2c:	80 81       	ld	r24, Z
    3f2e:	88 2f       	mov	r24, r24
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	98 2f       	mov	r25, r24
    3f34:	88 27       	eor	r24, r24
    3f36:	82 2b       	or	r24, r18
    3f38:	93 2b       	or	r25, r19
    3f3a:	11 96       	adiw	r26, 0x01	; 1
    3f3c:	9c 93       	st	X, r25
    3f3e:	8e 93       	st	-X, r24
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
    3f40:	80 91 f9 01 	lds	r24, 0x01F9
    3f44:	8f 5f       	subi	r24, 0xFF	; 255
    3f46:	80 93 f9 01 	sts	0x01F9, r24

    if (ADC_u8Index == ADC_u8ChainSize)
    3f4a:	90 91 f9 01 	lds	r25, 0x01F9
    3f4e:	80 91 f8 01 	lds	r24, 0x01F8
    3f52:	98 17       	cp	r25, r24
    3f54:	79 f4       	brne	.+30     	; 0x3f74 <__vector_16+0xf2>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    3f56:	10 92 f4 01 	sts	0x01F4, r1

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
    3f5a:	e0 91 f2 01 	lds	r30, 0x01F2
    3f5e:	f0 91 f3 01 	lds	r31, 0x01F3
    3f62:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    3f64:	a6 e2       	ldi	r26, 0x26	; 38
    3f66:	b0 e0       	ldi	r27, 0x00	; 0
    3f68:	e6 e2       	ldi	r30, 0x26	; 38
    3f6a:	f0 e0       	ldi	r31, 0x00	; 0
    3f6c:	80 81       	ld	r24, Z
    3f6e:	87 7f       	andi	r24, 0xF7	; 247
    3f70:	8c 93       	st	X, r24
    3f72:	2f c0       	rjmp	.+94     	; 0x3fd2 <__vector_16+0x150>
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    3f74:	20 91 f6 01 	lds	r18, 0x01F6
    3f78:	30 91 f7 01 	lds	r19, 0x01F7
    3f7c:	80 91 f9 01 	lds	r24, 0x01F9
    3f80:	88 2f       	mov	r24, r24
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	f9 01       	movw	r30, r18
    3f86:	e8 0f       	add	r30, r24
    3f88:	f9 1f       	adc	r31, r25
    3f8a:	80 81       	ld	r24, Z
    3f8c:	80 32       	cpi	r24, 0x20	; 32
    3f8e:	d0 f4       	brcc	.+52     	; 0x3fc4 <__vector_16+0x142>
      {
        ADMUX &= 0b11100000;
    3f90:	a7 e2       	ldi	r26, 0x27	; 39
    3f92:	b0 e0       	ldi	r27, 0x00	; 0
    3f94:	e7 e2       	ldi	r30, 0x27	; 39
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	80 81       	ld	r24, Z
    3f9a:	80 7e       	andi	r24, 0xE0	; 224
    3f9c:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    3f9e:	a7 e2       	ldi	r26, 0x27	; 39
    3fa0:	b0 e0       	ldi	r27, 0x00	; 0
    3fa2:	e7 e2       	ldi	r30, 0x27	; 39
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	40 81       	ld	r20, Z
    3fa8:	20 91 f6 01 	lds	r18, 0x01F6
    3fac:	30 91 f7 01 	lds	r19, 0x01F7
    3fb0:	80 91 f9 01 	lds	r24, 0x01F9
    3fb4:	88 2f       	mov	r24, r24
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	f9 01       	movw	r30, r18
    3fba:	e8 0f       	add	r30, r24
    3fbc:	f9 1f       	adc	r31, r25
    3fbe:	80 81       	ld	r24, Z
    3fc0:	84 2b       	or	r24, r20
    3fc2:	8c 93       	st	X, r24
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    3fc4:	a6 e2       	ldi	r26, 0x26	; 38
    3fc6:	b0 e0       	ldi	r27, 0x00	; 0
    3fc8:	e6 e2       	ldi	r30, 0x26	; 38
    3fca:	f0 e0       	ldi	r31, 0x00	; 0
    3fcc:	80 81       	ld	r24, Z
    3fce:	80 64       	ori	r24, 0x40	; 64
    3fd0:	8c 93       	st	X, r24
    }
  }
}
    3fd2:	cf 91       	pop	r28
    3fd4:	df 91       	pop	r29
    3fd6:	ff 91       	pop	r31
    3fd8:	ef 91       	pop	r30
    3fda:	bf 91       	pop	r27
    3fdc:	af 91       	pop	r26
    3fde:	9f 91       	pop	r25
    3fe0:	8f 91       	pop	r24
    3fe2:	7f 91       	pop	r23
    3fe4:	6f 91       	pop	r22
    3fe6:	5f 91       	pop	r21
    3fe8:	4f 91       	pop	r20
    3fea:	3f 91       	pop	r19
    3fec:	2f 91       	pop	r18
    3fee:	0f 90       	pop	r0
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	0f 90       	pop	r0
    3ff4:	1f 90       	pop	r1
    3ff6:	18 95       	reti

00003ff8 <SW_vInit>:
 * Breif : This Function initialize the pin which connected to Push Button as Pull Up Input pin
 * Parameters :   => struct has the switch port , pin , status
 * return : void
 */
void SW_vInit(SW_Config SW_Configuration)
{
    3ff8:	df 93       	push	r29
    3ffa:	cf 93       	push	r28
    3ffc:	00 d0       	rcall	.+0      	; 0x3ffe <SW_vInit+0x6>
    3ffe:	0f 92       	push	r0
    4000:	cd b7       	in	r28, 0x3d	; 61
    4002:	de b7       	in	r29, 0x3e	; 62
    4004:	69 83       	std	Y+1, r22	; 0x01
    4006:	7a 83       	std	Y+2, r23	; 0x02
    4008:	8b 83       	std	Y+3, r24	; 0x03
  DIO_enumSetPinDir(SW_Configuration.PortName, SW_Configuration.PinNumber, DIO_PIN_INPUT);
    400a:	89 81       	ldd	r24, Y+1	; 0x01
    400c:	9a 81       	ldd	r25, Y+2	; 0x02
    400e:	69 2f       	mov	r22, r25
    4010:	40 e0       	ldi	r20, 0x00	; 0
    4012:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>

  /* If Sw is Internal Pull Up */
  if (SW_Configuration.PullState == SW_INT_PULL_UP)
    4016:	8b 81       	ldd	r24, Y+3	; 0x03
    4018:	88 23       	and	r24, r24
    401a:	31 f4       	brne	.+12     	; 0x4028 <SW_vInit+0x30>
  {
    DIO_enumWritePinVal(SW_Configuration.PortName, SW_Configuration.PinNumber, DIO_PIN_HIGH);
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	9a 81       	ldd	r25, Y+2	; 0x02
    4020:	69 2f       	mov	r22, r25
    4022:	41 e0       	ldi	r20, 0x01	; 1
    4024:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>

    /* we could use DIO_enumConnectPullup */
  }
}
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	0f 90       	pop	r0
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	08 95       	ret

00004034 <SW_u8Read>:
 * Breif : This Function read Button status
 * Parameters :   => struct has the switch port , pin , status
 * return : switch status
 */
u8 SW_u8Read(SW_Config SW_Configuration)
{
    4034:	df 93       	push	r29
    4036:	cf 93       	push	r28
    4038:	00 d0       	rcall	.+0      	; 0x403a <SW_u8Read+0x6>
    403a:	00 d0       	rcall	.+0      	; 0x403c <SW_u8Read+0x8>
    403c:	0f 92       	push	r0
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	6b 83       	std	Y+3, r22	; 0x03
    4044:	7c 83       	std	Y+4, r23	; 0x04
    4046:	8d 83       	std	Y+5, r24	; 0x05
  u8 LOC_u8PinVal = SW_NOT_PRESSED;
    4048:	1a 82       	std	Y+2, r1	; 0x02
  u8 LOC_u8Result = SW_NOT_PRESSED;
    404a:	19 82       	std	Y+1, r1	; 0x01

  if ((SW_Configuration.PullState == SW_INT_PULL_UP) || (SW_Configuration.PullState == SW_EXT_PULL_UP))
    404c:	8d 81       	ldd	r24, Y+5	; 0x05
    404e:	88 23       	and	r24, r24
    4050:	19 f0       	breq	.+6      	; 0x4058 <SW_u8Read+0x24>
    4052:	8d 81       	ldd	r24, Y+5	; 0x05
    4054:	81 30       	cpi	r24, 0x01	; 1
    4056:	a1 f4       	brne	.+40     	; 0x4080 <SW_u8Read+0x4c>
  {
    DIO_enumReadPinVal(SW_Configuration.PortName, SW_Configuration.PinNumber, &LOC_u8PinVal);
    4058:	8b 81       	ldd	r24, Y+3	; 0x03
    405a:	9c 81       	ldd	r25, Y+4	; 0x04
    405c:	9e 01       	movw	r18, r28
    405e:	2e 5f       	subi	r18, 0xFE	; 254
    4060:	3f 4f       	sbci	r19, 0xFF	; 255
    4062:	69 2f       	mov	r22, r25
    4064:	a9 01       	movw	r20, r18
    4066:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumReadPinVal>

    if (LOC_u8PinVal == 0)
    406a:	8a 81       	ldd	r24, Y+2	; 0x02
    406c:	88 23       	and	r24, r24
    406e:	19 f4       	brne	.+6      	; 0x4076 <SW_u8Read+0x42>
    {
      LOC_u8Result = SW_PREESED;
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	89 83       	std	Y+1, r24	; 0x01
    4074:	1b c0       	rjmp	.+54     	; 0x40ac <SW_u8Read+0x78>
    }
    else if (LOC_u8PinVal == 1)
    4076:	8a 81       	ldd	r24, Y+2	; 0x02
    4078:	81 30       	cpi	r24, 0x01	; 1
    407a:	c1 f4       	brne	.+48     	; 0x40ac <SW_u8Read+0x78>
    {
      LOC_u8Result = SW_NOT_PRESSED;
    407c:	19 82       	std	Y+1, r1	; 0x01
    407e:	16 c0       	rjmp	.+44     	; 0x40ac <SW_u8Read+0x78>
    }
  }
  else if (SW_Configuration.PullState == SW_EXT_PULL_DOWN)
    4080:	8d 81       	ldd	r24, Y+5	; 0x05
    4082:	82 30       	cpi	r24, 0x02	; 2
    4084:	99 f4       	brne	.+38     	; 0x40ac <SW_u8Read+0x78>
  {
    DIO_enumReadPinVal(SW_Configuration.PortName, SW_Configuration.PinNumber, &LOC_u8PinVal);
    4086:	8b 81       	ldd	r24, Y+3	; 0x03
    4088:	9c 81       	ldd	r25, Y+4	; 0x04
    408a:	9e 01       	movw	r18, r28
    408c:	2e 5f       	subi	r18, 0xFE	; 254
    408e:	3f 4f       	sbci	r19, 0xFF	; 255
    4090:	69 2f       	mov	r22, r25
    4092:	a9 01       	movw	r20, r18
    4094:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumReadPinVal>

    if (LOC_u8PinVal == 1)
    4098:	8a 81       	ldd	r24, Y+2	; 0x02
    409a:	81 30       	cpi	r24, 0x01	; 1
    409c:	19 f4       	brne	.+6      	; 0x40a4 <SW_u8Read+0x70>
    {
      LOC_u8Result = SW_PREESED;
    409e:	81 e0       	ldi	r24, 0x01	; 1
    40a0:	89 83       	std	Y+1, r24	; 0x01
    40a2:	04 c0       	rjmp	.+8      	; 0x40ac <SW_u8Read+0x78>
    }
    else if (LOC_u8PinVal == 0)
    40a4:	8a 81       	ldd	r24, Y+2	; 0x02
    40a6:	88 23       	and	r24, r24
    40a8:	09 f4       	brne	.+2      	; 0x40ac <SW_u8Read+0x78>
    {
      LOC_u8Result = SW_NOT_PRESSED;
    40aa:	19 82       	std	Y+1, r1	; 0x01
    }
  }

  return LOC_u8Result;
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	08 95       	ret

000040be <SM_vInit>:

#include "../../MCAL_Layer/TIMER/TIMER_interface.h"
#include "../../MCAL_Layer/TIMER/TIMER_private.h"

void SM_vInit(void)
{
    40be:	df 93       	push	r29
    40c0:	cf 93       	push	r28
    40c2:	cd b7       	in	r28, 0x3d	; 61
    40c4:	de b7       	in	r29, 0x3e	; 62
  DIO_enumSetPinDir(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
    40c6:	83 e0       	ldi	r24, 0x03	; 3
    40c8:	65 e0       	ldi	r22, 0x05	; 5
    40ca:	41 e0       	ldi	r20, 0x01	; 1
    40cc:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>
}
    40d0:	cf 91       	pop	r28
    40d2:	df 91       	pop	r29
    40d4:	08 95       	ret

000040d6 <SM_vTimer1Degree>:

void SM_vTimer1Degree(s8 degree)
{
    40d6:	0f 93       	push	r16
    40d8:	1f 93       	push	r17
    40da:	df 93       	push	r29
    40dc:	cf 93       	push	r28
    40de:	00 d0       	rcall	.+0      	; 0x40e0 <SM_vTimer1Degree+0xa>
    40e0:	00 d0       	rcall	.+0      	; 0x40e2 <SM_vTimer1Degree+0xc>
    40e2:	0f 92       	push	r0
    40e4:	cd b7       	in	r28, 0x3d	; 61
    40e6:	de b7       	in	r29, 0x3e	; 62
    40e8:	8d 83       	std	Y+5, r24	; 0x05
  TCNT1 = 0;
    40ea:	ec e4       	ldi	r30, 0x4C	; 76
    40ec:	f0 e0       	ldi	r31, 0x00	; 0
    40ee:	11 82       	std	Z+1, r1	; 0x01
    40f0:	10 82       	st	Z, r1
  double value = degree * .005555555556;
    40f2:	8d 81       	ldd	r24, Y+5	; 0x05
    40f4:	99 27       	eor	r25, r25
    40f6:	87 fd       	sbrc	r24, 7
    40f8:	90 95       	com	r25
    40fa:	a9 2f       	mov	r26, r25
    40fc:	b9 2f       	mov	r27, r25
    40fe:	bc 01       	movw	r22, r24
    4100:	cd 01       	movw	r24, r26
    4102:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	bc 01       	movw	r22, r24
    410c:	cd 01       	movw	r24, r26
    410e:	21 e6       	ldi	r18, 0x61	; 97
    4110:	3b e0       	ldi	r19, 0x0B	; 11
    4112:	46 eb       	ldi	r20, 0xB6	; 182
    4114:	5b e3       	ldi	r21, 0x3B	; 59
    4116:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	89 83       	std	Y+1, r24	; 0x01
    4120:	9a 83       	std	Y+2, r25	; 0x02
    4122:	ab 83       	std	Y+3, r26	; 0x03
    4124:	bc 83       	std	Y+4, r27	; 0x04

  if (0 < value <= 90)
  {
    value += 1.5;
    4126:	69 81       	ldd	r22, Y+1	; 0x01
    4128:	7a 81       	ldd	r23, Y+2	; 0x02
    412a:	8b 81       	ldd	r24, Y+3	; 0x03
    412c:	9c 81       	ldd	r25, Y+4	; 0x04
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	40 ec       	ldi	r20, 0xC0	; 192
    4134:	5f e3       	ldi	r21, 0x3F	; 63
    4136:	0e 94 0e 03 	call	0x61c	; 0x61c <__addsf3>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	89 83       	std	Y+1, r24	; 0x01
    4140:	9a 83       	std	Y+2, r25	; 0x02
    4142:	ab 83       	std	Y+3, r26	; 0x03
    4144:	bc 83       	std	Y+4, r27	; 0x04
  }
  else if (-90 <= value < 0)
  {
    value -= 1.5;
  }
  OCR1A = value * 1000;
    4146:	0a e4       	ldi	r16, 0x4A	; 74
    4148:	10 e0       	ldi	r17, 0x00	; 0
    414a:	69 81       	ldd	r22, Y+1	; 0x01
    414c:	7a 81       	ldd	r23, Y+2	; 0x02
    414e:	8b 81       	ldd	r24, Y+3	; 0x03
    4150:	9c 81       	ldd	r25, Y+4	; 0x04
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	4a e7       	ldi	r20, 0x7A	; 122
    4158:	54 e4       	ldi	r21, 0x44	; 68
    415a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	bc 01       	movw	r22, r24
    4164:	cd 01       	movw	r24, r26
    4166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	f8 01       	movw	r30, r16
    4170:	91 83       	std	Z+1, r25	; 0x01
    4172:	80 83       	st	Z, r24
}
    4174:	0f 90       	pop	r0
    4176:	0f 90       	pop	r0
    4178:	0f 90       	pop	r0
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
    417e:	cf 91       	pop	r28
    4180:	df 91       	pop	r29
    4182:	1f 91       	pop	r17
    4184:	0f 91       	pop	r16
    4186:	08 95       	ret

00004188 <LM35_u8GetTemp>:
            => struct has the LM35 Channel, ADC VoltageReference , ADCResolution
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/
u8 LM35_u8GetTemp(LM35_Config *lm35, u8 *Copy_u8TempValue)
{
    4188:	ef 92       	push	r14
    418a:	ff 92       	push	r15
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	df 93       	push	r29
    4192:	cf 93       	push	r28
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
    4198:	2b 97       	sbiw	r28, 0x0b	; 11
    419a:	0f b6       	in	r0, 0x3f	; 63
    419c:	f8 94       	cli
    419e:	de bf       	out	0x3e, r29	; 62
    41a0:	0f be       	out	0x3f, r0	; 63
    41a2:	cd bf       	out	0x3d, r28	; 61
    41a4:	99 87       	std	Y+9, r25	; 0x09
    41a6:	88 87       	std	Y+8, r24	; 0x08
    41a8:	7b 87       	std	Y+11, r23	; 0x0b
    41aa:	6a 87       	std	Y+10, r22	; 0x0a
  u8 Local_u8ErrorState = OK;
    41ac:	1d 82       	std	Y+5, r1	; 0x05

  u16 Local_u16ADCResult;
  u16 Local_u16AnalogSignal;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    41ae:	e8 85       	ldd	r30, Y+8	; 0x08
    41b0:	f9 85       	ldd	r31, Y+9	; 0x09
    41b2:	81 81       	ldd	r24, Z+1	; 0x01
    41b4:	28 2f       	mov	r18, r24
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	88 ee       	ldi	r24, 0xE8	; 232
    41ba:	93 e0       	ldi	r25, 0x03	; 3
    41bc:	ac 01       	movw	r20, r24
    41be:	24 9f       	mul	r18, r20
    41c0:	c0 01       	movw	r24, r0
    41c2:	25 9f       	mul	r18, r21
    41c4:	90 0d       	add	r25, r0
    41c6:	34 9f       	mul	r19, r20
    41c8:	90 0d       	add	r25, r0
    41ca:	11 24       	eor	r1, r1
    41cc:	9a 83       	std	Y+2, r25	; 0x02
    41ce:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    41d0:	e8 85       	ldd	r30, Y+8	; 0x08
    41d2:	f9 85       	ldd	r31, Y+9	; 0x09
    41d4:	80 81       	ld	r24, Z
    41d6:	9e 01       	movw	r18, r28
    41d8:	2a 5f       	subi	r18, 0xFA	; 250
    41da:	3f 4f       	sbci	r19, 0xFF	; 255
    41dc:	b9 01       	movw	r22, r18
    41de:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    41e2:	e8 85       	ldd	r30, Y+8	; 0x08
    41e4:	f9 85       	ldd	r31, Y+9	; 0x09
    41e6:	82 81       	ldd	r24, Z+2	; 0x02
    41e8:	88 23       	and	r24, r24
    41ea:	e1 f4       	brne	.+56     	; 0x4224 <LM35_u8GetTemp+0x9c>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    41ec:	8e 81       	ldd	r24, Y+6	; 0x06
    41ee:	9f 81       	ldd	r25, Y+7	; 0x07
    41f0:	7c 01       	movw	r14, r24
    41f2:	00 e0       	ldi	r16, 0x00	; 0
    41f4:	10 e0       	ldi	r17, 0x00	; 0
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	9a 81       	ldd	r25, Y+2	; 0x02
    41fa:	9c 01       	movw	r18, r24
    41fc:	40 e0       	ldi	r20, 0x00	; 0
    41fe:	50 e0       	ldi	r21, 0x00	; 0
    4200:	c8 01       	movw	r24, r16
    4202:	b7 01       	movw	r22, r14
    4204:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__mulsi3>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	07 2e       	mov	r0, r23
    420e:	7a e0       	ldi	r23, 0x0A	; 10
    4210:	b6 95       	lsr	r27
    4212:	a7 95       	ror	r26
    4214:	97 95       	ror	r25
    4216:	87 95       	ror	r24
    4218:	7a 95       	dec	r23
    421a:	d1 f7       	brne	.-12     	; 0x4210 <LM35_u8GetTemp+0x88>
    421c:	70 2d       	mov	r23, r0
    421e:	9c 83       	std	Y+4, r25	; 0x04
    4220:	8b 83       	std	Y+3, r24	; 0x03
    4222:	1b c0       	rjmp	.+54     	; 0x425a <LM35_u8GetTemp+0xd2>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    4224:	e8 85       	ldd	r30, Y+8	; 0x08
    4226:	f9 85       	ldd	r31, Y+9	; 0x09
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	81 30       	cpi	r24, 0x01	; 1
    422c:	b1 f4       	brne	.+44     	; 0x425a <LM35_u8GetTemp+0xd2>
  {
    Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    422e:	8e 81       	ldd	r24, Y+6	; 0x06
    4230:	9f 81       	ldd	r25, Y+7	; 0x07
    4232:	7c 01       	movw	r14, r24
    4234:	00 e0       	ldi	r16, 0x00	; 0
    4236:	10 e0       	ldi	r17, 0x00	; 0
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	9a 81       	ldd	r25, Y+2	; 0x02
    423c:	9c 01       	movw	r18, r24
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	50 e0       	ldi	r21, 0x00	; 0
    4242:	c8 01       	movw	r24, r16
    4244:	b7 01       	movw	r22, r14
    4246:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__mulsi3>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	89 2f       	mov	r24, r25
    4250:	9a 2f       	mov	r25, r26
    4252:	ab 2f       	mov	r26, r27
    4254:	bb 27       	eor	r27, r27
    4256:	9c 83       	std	Y+4, r25	; 0x04
    4258:	8b 83       	std	Y+3, r24	; 0x03
  }

  /* Convert (mv --> Temp) */
  *Copy_u8TempValue = Local_u16AnalogSignal / 10;
    425a:	8b 81       	ldd	r24, Y+3	; 0x03
    425c:	9c 81       	ldd	r25, Y+4	; 0x04
    425e:	2a e0       	ldi	r18, 0x0A	; 10
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	b9 01       	movw	r22, r18
    4264:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <__udivmodhi4>
    4268:	cb 01       	movw	r24, r22
    426a:	ea 85       	ldd	r30, Y+10	; 0x0a
    426c:	fb 85       	ldd	r31, Y+11	; 0x0b
    426e:	80 83       	st	Z, r24

  return Local_u8ErrorState;
    4270:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4272:	2b 96       	adiw	r28, 0x0b	; 11
    4274:	0f b6       	in	r0, 0x3f	; 63
    4276:	f8 94       	cli
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	0f be       	out	0x3f, r0	; 63
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	cf 91       	pop	r28
    4280:	df 91       	pop	r29
    4282:	1f 91       	pop	r17
    4284:	0f 91       	pop	r16
    4286:	ff 90       	pop	r15
    4288:	ef 90       	pop	r14
    428a:	08 95       	ret

0000428c <LM35_u8GetAnalogSignal>:
      => Pointer to TEMP Variable which will return in it
* return : Error State
*/

u8 LM35_u8GetAnalogSignal(LM35_Config *lm35, u16 *Local_u16AnalogSignal)
{
    428c:	ef 92       	push	r14
    428e:	ff 92       	push	r15
    4290:	0f 93       	push	r16
    4292:	1f 93       	push	r17
    4294:	df 93       	push	r29
    4296:	cf 93       	push	r28
    4298:	cd b7       	in	r28, 0x3d	; 61
    429a:	de b7       	in	r29, 0x3e	; 62
    429c:	29 97       	sbiw	r28, 0x09	; 9
    429e:	0f b6       	in	r0, 0x3f	; 63
    42a0:	f8 94       	cli
    42a2:	de bf       	out	0x3e, r29	; 62
    42a4:	0f be       	out	0x3f, r0	; 63
    42a6:	cd bf       	out	0x3d, r28	; 61
    42a8:	9f 83       	std	Y+7, r25	; 0x07
    42aa:	8e 83       	std	Y+6, r24	; 0x06
    42ac:	79 87       	std	Y+9, r23	; 0x09
    42ae:	68 87       	std	Y+8, r22	; 0x08
  u8 Local_u8ErrorState = OK;
    42b0:	1b 82       	std	Y+3, r1	; 0x03

  u16 Local_u16ADCResult;

  u16 Local_u8ADCRefrence = (lm35->Copy_u8ADCVoltageRefrence) * 1000; // to convert from(V --> mV)
    42b2:	ee 81       	ldd	r30, Y+6	; 0x06
    42b4:	ff 81       	ldd	r31, Y+7	; 0x07
    42b6:	81 81       	ldd	r24, Z+1	; 0x01
    42b8:	28 2f       	mov	r18, r24
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	88 ee       	ldi	r24, 0xE8	; 232
    42be:	93 e0       	ldi	r25, 0x03	; 3
    42c0:	ac 01       	movw	r20, r24
    42c2:	24 9f       	mul	r18, r20
    42c4:	c0 01       	movw	r24, r0
    42c6:	25 9f       	mul	r18, r21
    42c8:	90 0d       	add	r25, r0
    42ca:	34 9f       	mul	r19, r20
    42cc:	90 0d       	add	r25, r0
    42ce:	11 24       	eor	r1, r1
    42d0:	9a 83       	std	Y+2, r25	; 0x02
    42d2:	89 83       	std	Y+1, r24	; 0x01

  /* ADC Digital Reading */
  ADC_u8GetResultSync(lm35->Copy_u8LM35Channel, &Local_u16ADCResult);
    42d4:	ee 81       	ldd	r30, Y+6	; 0x06
    42d6:	ff 81       	ldd	r31, Y+7	; 0x07
    42d8:	80 81       	ld	r24, Z
    42da:	9e 01       	movw	r18, r28
    42dc:	2c 5f       	subi	r18, 0xFC	; 252
    42de:	3f 4f       	sbci	r19, 0xFF	; 255
    42e0:	b9 01       	movw	r22, r18
    42e2:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (lm35->Copy_u8ADCRes == ADC_RES_10_BIT)
    42e6:	ee 81       	ldd	r30, Y+6	; 0x06
    42e8:	ff 81       	ldd	r31, Y+7	; 0x07
    42ea:	82 81       	ldd	r24, Z+2	; 0x02
    42ec:	88 23       	and	r24, r24
    42ee:	f1 f4       	brne	.+60     	; 0x432c <LM35_u8GetAnalogSignal+0xa0>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 1024UL);
    42f0:	8c 81       	ldd	r24, Y+4	; 0x04
    42f2:	9d 81       	ldd	r25, Y+5	; 0x05
    42f4:	7c 01       	movw	r14, r24
    42f6:	00 e0       	ldi	r16, 0x00	; 0
    42f8:	10 e0       	ldi	r17, 0x00	; 0
    42fa:	89 81       	ldd	r24, Y+1	; 0x01
    42fc:	9a 81       	ldd	r25, Y+2	; 0x02
    42fe:	9c 01       	movw	r18, r24
    4300:	40 e0       	ldi	r20, 0x00	; 0
    4302:	50 e0       	ldi	r21, 0x00	; 0
    4304:	c8 01       	movw	r24, r16
    4306:	b7 01       	movw	r22, r14
    4308:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__mulsi3>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	07 2e       	mov	r0, r23
    4312:	7a e0       	ldi	r23, 0x0A	; 10
    4314:	b6 95       	lsr	r27
    4316:	a7 95       	ror	r26
    4318:	97 95       	ror	r25
    431a:	87 95       	ror	r24
    431c:	7a 95       	dec	r23
    431e:	d1 f7       	brne	.-12     	; 0x4314 <LM35_u8GetAnalogSignal+0x88>
    4320:	70 2d       	mov	r23, r0
    4322:	e8 85       	ldd	r30, Y+8	; 0x08
    4324:	f9 85       	ldd	r31, Y+9	; 0x09
    4326:	91 83       	std	Z+1, r25	; 0x01
    4328:	80 83       	st	Z, r24
    432a:	1d c0       	rjmp	.+58     	; 0x4366 <LM35_u8GetAnalogSignal+0xda>
  }
  else if (lm35->Copy_u8ADCRes == ADC_RES_8_BIT)
    432c:	ee 81       	ldd	r30, Y+6	; 0x06
    432e:	ff 81       	ldd	r31, Y+7	; 0x07
    4330:	82 81       	ldd	r24, Z+2	; 0x02
    4332:	81 30       	cpi	r24, 0x01	; 1
    4334:	c1 f4       	brne	.+48     	; 0x4366 <LM35_u8GetAnalogSignal+0xda>
  {
    *Local_u16AnalogSignal = (u16)(((u32)Local_u16ADCResult * (u32)Local_u8ADCRefrence) / 256UL);
    4336:	8c 81       	ldd	r24, Y+4	; 0x04
    4338:	9d 81       	ldd	r25, Y+5	; 0x05
    433a:	7c 01       	movw	r14, r24
    433c:	00 e0       	ldi	r16, 0x00	; 0
    433e:	10 e0       	ldi	r17, 0x00	; 0
    4340:	89 81       	ldd	r24, Y+1	; 0x01
    4342:	9a 81       	ldd	r25, Y+2	; 0x02
    4344:	9c 01       	movw	r18, r24
    4346:	40 e0       	ldi	r20, 0x00	; 0
    4348:	50 e0       	ldi	r21, 0x00	; 0
    434a:	c8 01       	movw	r24, r16
    434c:	b7 01       	movw	r22, r14
    434e:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__mulsi3>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	89 2f       	mov	r24, r25
    4358:	9a 2f       	mov	r25, r26
    435a:	ab 2f       	mov	r26, r27
    435c:	bb 27       	eor	r27, r27
    435e:	e8 85       	ldd	r30, Y+8	; 0x08
    4360:	f9 85       	ldd	r31, Y+9	; 0x09
    4362:	91 83       	std	Z+1, r25	; 0x01
    4364:	80 83       	st	Z, r24
  }

  return Local_u8ErrorState;
    4366:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4368:	29 96       	adiw	r28, 0x09	; 9
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	f8 94       	cli
    436e:	de bf       	out	0x3e, r29	; 62
    4370:	0f be       	out	0x3f, r0	; 63
    4372:	cd bf       	out	0x3d, r28	; 61
    4374:	cf 91       	pop	r28
    4376:	df 91       	pop	r29
    4378:	1f 91       	pop	r17
    437a:	0f 91       	pop	r16
    437c:	ff 90       	pop	r15
    437e:	ef 90       	pop	r14
    4380:	08 95       	ret

00004382 <LED_vInit>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vInit(LED_config LED_Configuration)
{
    4382:	df 93       	push	r29
    4384:	cf 93       	push	r28
    4386:	00 d0       	rcall	.+0      	; 0x4388 <LED_vInit+0x6>
    4388:	0f 92       	push	r0
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
    438e:	69 83       	std	Y+1, r22	; 0x01
    4390:	7a 83       	std	Y+2, r23	; 0x02
    4392:	8b 83       	std	Y+3, r24	; 0x03
  DIO_enumSetPinDir(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_OUTPUT);
    4394:	89 81       	ldd	r24, Y+1	; 0x01
    4396:	9a 81       	ldd	r25, Y+2	; 0x02
    4398:	69 2f       	mov	r22, r25
    439a:	41 e0       	ldi	r20, 0x01	; 1
    439c:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>
}
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	cf 91       	pop	r28
    43a8:	df 91       	pop	r29
    43aa:	08 95       	ret

000043ac <LED_vTurnOn>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vTurnOn(LED_config LED_Configuration)
{
    43ac:	df 93       	push	r29
    43ae:	cf 93       	push	r28
    43b0:	00 d0       	rcall	.+0      	; 0x43b2 <LED_vTurnOn+0x6>
    43b2:	0f 92       	push	r0
    43b4:	cd b7       	in	r28, 0x3d	; 61
    43b6:	de b7       	in	r29, 0x3e	; 62
    43b8:	69 83       	std	Y+1, r22	; 0x01
    43ba:	7a 83       	std	Y+2, r23	; 0x02
    43bc:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    43be:	8b 81       	ldd	r24, Y+3	; 0x03
    43c0:	81 30       	cpi	r24, 0x01	; 1
    43c2:	39 f4       	brne	.+14     	; 0x43d2 <LED_vTurnOn+0x26>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
    43c6:	9a 81       	ldd	r25, Y+2	; 0x02
    43c8:	69 2f       	mov	r22, r25
    43ca:	41 e0       	ldi	r20, 0x01	; 1
    43cc:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
    43d0:	09 c0       	rjmp	.+18     	; 0x43e4 <LED_vTurnOn+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    43d2:	8b 81       	ldd	r24, Y+3	; 0x03
    43d4:	88 23       	and	r24, r24
    43d6:	31 f4       	brne	.+12     	; 0x43e4 <LED_vTurnOn+0x38>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	9a 81       	ldd	r25, Y+2	; 0x02
    43dc:	69 2f       	mov	r22, r25
    43de:	40 e0       	ldi	r20, 0x00	; 0
    43e0:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
  }
}
    43e4:	0f 90       	pop	r0
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	cf 91       	pop	r28
    43ec:	df 91       	pop	r29
    43ee:	08 95       	ret

000043f0 <LED_vTurnOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTurnOff(LED_config LED_Configuration)
{
    43f0:	df 93       	push	r29
    43f2:	cf 93       	push	r28
    43f4:	00 d0       	rcall	.+0      	; 0x43f6 <LED_vTurnOff+0x6>
    43f6:	0f 92       	push	r0
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	69 83       	std	Y+1, r22	; 0x01
    43fe:	7a 83       	std	Y+2, r23	; 0x02
    4400:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    4402:	8b 81       	ldd	r24, Y+3	; 0x03
    4404:	81 30       	cpi	r24, 0x01	; 1
    4406:	39 f4       	brne	.+14     	; 0x4416 <LED_vTurnOff+0x26>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	9a 81       	ldd	r25, Y+2	; 0x02
    440c:	69 2f       	mov	r22, r25
    440e:	40 e0       	ldi	r20, 0x00	; 0
    4410:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
    4414:	09 c0       	rjmp	.+18     	; 0x4428 <LED_vTurnOff+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    4416:	8b 81       	ldd	r24, Y+3	; 0x03
    4418:	88 23       	and	r24, r24
    441a:	31 f4       	brne	.+12     	; 0x4428 <LED_vTurnOff+0x38>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    441c:	89 81       	ldd	r24, Y+1	; 0x01
    441e:	9a 81       	ldd	r25, Y+2	; 0x02
    4420:	69 2f       	mov	r22, r25
    4422:	41 e0       	ldi	r20, 0x01	; 1
    4424:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
  }
}
    4428:	0f 90       	pop	r0
    442a:	0f 90       	pop	r0
    442c:	0f 90       	pop	r0
    442e:	cf 91       	pop	r28
    4430:	df 91       	pop	r29
    4432:	08 95       	ret

00004434 <LED_vTog>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTog(LED_config LED_Configuration)
{
    4434:	df 93       	push	r29
    4436:	cf 93       	push	r28
    4438:	00 d0       	rcall	.+0      	; 0x443a <LED_vTog+0x6>
    443a:	0f 92       	push	r0
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	69 83       	std	Y+1, r22	; 0x01
    4442:	7a 83       	std	Y+2, r23	; 0x02
    4444:	8b 83       	std	Y+3, r24	; 0x03
  DIO_enumTogglePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber);
    4446:	89 81       	ldd	r24, Y+1	; 0x01
    4448:	9a 81       	ldd	r25, Y+2	; 0x02
    444a:	69 2f       	mov	r22, r25
    444c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enumTogglePinVal>
}
    4450:	0f 90       	pop	r0
    4452:	0f 90       	pop	r0
    4454:	0f 90       	pop	r0
    4456:	cf 91       	pop	r28
    4458:	df 91       	pop	r29
    445a:	08 95       	ret

0000445c <KPD_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD_vInit(void)
{
    445c:	df 93       	push	r29
    445e:	cf 93       	push	r28
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

  DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    4464:	82 e0       	ldi	r24, 0x02	; 2
    4466:	60 e0       	ldi	r22, 0x00	; 0
    4468:	41 e0       	ldi	r20, 0x01	; 1
    446a:	0e 94 05 18 	call	0x300a	; 0x300a <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    446e:	82 e0       	ldi	r24, 0x02	; 2
    4470:	61 e0       	ldi	r22, 0x01	; 1
    4472:	41 e0       	ldi	r20, 0x01	; 1
    4474:	0e 94 05 18 	call	0x300a	; 0x300a <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    4478:	82 e0       	ldi	r24, 0x02	; 2
    447a:	62 e0       	ldi	r22, 0x02	; 2
    447c:	41 e0       	ldi	r20, 0x01	; 1
    447e:	0e 94 05 18 	call	0x300a	; 0x300a <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    4482:	82 e0       	ldi	r24, 0x02	; 2
    4484:	63 e0       	ldi	r22, 0x03	; 3
    4486:	41 e0       	ldi	r20, 0x01	; 1
    4488:	0e 94 05 18 	call	0x300a	; 0x300a <DIO_enumConnectPullUp>
  DIO_enumWritePinValue      ( KPD_PORT , KPD_R3 , DIO_HIGH );
  */

  /*                 connect the pins of the columns as output pins (HIGH)                    */
  
  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    448c:	82 e0       	ldi	r24, 0x02	; 2
    448e:	6f e0       	ldi	r22, 0x0F	; 15
    4490:	0e 94 1e 1c 	call	0x383c	; 0x383c <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    4494:	82 e0       	ldi	r24, 0x02	; 2
    4496:	6f e0       	ldi	r22, 0x0F	; 15
    4498:	0e 94 27 1b 	call	0x364e	; 0x364e <DIO_vWriteHighNibble>
    DIO_enumWritePinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    */
}
    449c:	cf 91       	pop	r28
    449e:	df 91       	pop	r29
    44a0:	08 95       	ret

000044a2 <KPD_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD_u8GetPressed(void)
{
    44a2:	df 93       	push	r29
    44a4:	cf 93       	push	r28
    44a6:	cd b7       	in	r28, 0x3d	; 61
    44a8:	de b7       	in	r29, 0x3e	; 62
    44aa:	62 97       	sbiw	r28, 0x12	; 18
    44ac:	0f b6       	in	r0, 0x3f	; 63
    44ae:	f8 94       	cli
    44b0:	de bf       	out	0x3e, r29	; 62
    44b2:	0f be       	out	0x3f, r0	; 63
    44b4:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    44b6:	8f ef       	ldi	r24, 0xFF	; 255
    44b8:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    44ba:	84 e0       	ldi	r24, 0x04	; 4
    44bc:	8f 87       	std	Y+15, r24	; 0x0f
    44be:	c9 c0       	rjmp	.+402    	; 0x4652 <KPD_u8GetPressed+0x1b0>
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    44c0:	82 e0       	ldi	r24, 0x02	; 2
    44c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    44c4:	40 e0       	ldi	r20, 0x00	; 0
    44c6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    44ca:	18 8a       	std	Y+16, r1	; 0x10
    44cc:	b6 c0       	rjmp	.+364    	; 0x463a <KPD_u8GetPressed+0x198>
    {
      DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    44ce:	9e 01       	movw	r18, r28
    44d0:	2e 5e       	subi	r18, 0xEE	; 238
    44d2:	3f 4f       	sbci	r19, 0xFF	; 255
    44d4:	82 e0       	ldi	r24, 0x02	; 2
    44d6:	68 89       	ldd	r22, Y+16	; 0x10
    44d8:	a9 01       	movw	r20, r18
    44da:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumReadPinVal>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    44de:	8a 89       	ldd	r24, Y+18	; 0x12
    44e0:	88 23       	and	r24, r24
    44e2:	09 f0       	breq	.+2      	; 0x44e6 <KPD_u8GetPressed+0x44>
    44e4:	a7 c0       	rjmp	.+334    	; 0x4634 <KPD_u8GetPressed+0x192>
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	a8 e4       	ldi	r26, 0x48	; 72
    44ec:	b2 e4       	ldi	r27, 0x42	; 66
    44ee:	8b 87       	std	Y+11, r24	; 0x0b
    44f0:	9c 87       	std	Y+12, r25	; 0x0c
    44f2:	ad 87       	std	Y+13, r26	; 0x0d
    44f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    44f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    44fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    44fe:	20 e0       	ldi	r18, 0x00	; 0
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	4a ef       	ldi	r20, 0xFA	; 250
    4504:	54 e4       	ldi	r21, 0x44	; 68
    4506:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    450a:	dc 01       	movw	r26, r24
    450c:	cb 01       	movw	r24, r22
    450e:	8f 83       	std	Y+7, r24	; 0x07
    4510:	98 87       	std	Y+8, r25	; 0x08
    4512:	a9 87       	std	Y+9, r26	; 0x09
    4514:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4516:	6f 81       	ldd	r22, Y+7	; 0x07
    4518:	78 85       	ldd	r23, Y+8	; 0x08
    451a:	89 85       	ldd	r24, Y+9	; 0x09
    451c:	9a 85       	ldd	r25, Y+10	; 0x0a
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	40 e8       	ldi	r20, 0x80	; 128
    4524:	5f e3       	ldi	r21, 0x3F	; 63
    4526:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    452a:	88 23       	and	r24, r24
    452c:	2c f4       	brge	.+10     	; 0x4538 <KPD_u8GetPressed+0x96>
		__ticks = 1;
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	9e 83       	std	Y+6, r25	; 0x06
    4534:	8d 83       	std	Y+5, r24	; 0x05
    4536:	3f c0       	rjmp	.+126    	; 0x45b6 <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    4538:	6f 81       	ldd	r22, Y+7	; 0x07
    453a:	78 85       	ldd	r23, Y+8	; 0x08
    453c:	89 85       	ldd	r24, Y+9	; 0x09
    453e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	3f ef       	ldi	r19, 0xFF	; 255
    4544:	4f e7       	ldi	r20, 0x7F	; 127
    4546:	57 e4       	ldi	r21, 0x47	; 71
    4548:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    454c:	18 16       	cp	r1, r24
    454e:	4c f5       	brge	.+82     	; 0x45a2 <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4550:	6b 85       	ldd	r22, Y+11	; 0x0b
    4552:	7c 85       	ldd	r23, Y+12	; 0x0c
    4554:	8d 85       	ldd	r24, Y+13	; 0x0d
    4556:	9e 85       	ldd	r25, Y+14	; 0x0e
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	40 e2       	ldi	r20, 0x20	; 32
    455e:	51 e4       	ldi	r21, 0x41	; 65
    4560:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	bc 01       	movw	r22, r24
    456a:	cd 01       	movw	r24, r26
    456c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4570:	dc 01       	movw	r26, r24
    4572:	cb 01       	movw	r24, r22
    4574:	9e 83       	std	Y+6, r25	; 0x06
    4576:	8d 83       	std	Y+5, r24	; 0x05
    4578:	0f c0       	rjmp	.+30     	; 0x4598 <KPD_u8GetPressed+0xf6>
    457a:	88 ec       	ldi	r24, 0xC8	; 200
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	9c 83       	std	Y+4, r25	; 0x04
    4580:	8b 83       	std	Y+3, r24	; 0x03
    4582:	8b 81       	ldd	r24, Y+3	; 0x03
    4584:	9c 81       	ldd	r25, Y+4	; 0x04
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	f1 f7       	brne	.-4      	; 0x4586 <KPD_u8GetPressed+0xe4>
    458a:	9c 83       	std	Y+4, r25	; 0x04
    458c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    458e:	8d 81       	ldd	r24, Y+5	; 0x05
    4590:	9e 81       	ldd	r25, Y+6	; 0x06
    4592:	01 97       	sbiw	r24, 0x01	; 1
    4594:	9e 83       	std	Y+6, r25	; 0x06
    4596:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4598:	8d 81       	ldd	r24, Y+5	; 0x05
    459a:	9e 81       	ldd	r25, Y+6	; 0x06
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	69 f7       	brne	.-38     	; 0x457a <KPD_u8GetPressed+0xd8>
    45a0:	14 c0       	rjmp	.+40     	; 0x45ca <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a2:	6f 81       	ldd	r22, Y+7	; 0x07
    45a4:	78 85       	ldd	r23, Y+8	; 0x08
    45a6:	89 85       	ldd	r24, Y+9	; 0x09
    45a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ae:	dc 01       	movw	r26, r24
    45b0:	cb 01       	movw	r24, r22
    45b2:	9e 83       	std	Y+6, r25	; 0x06
    45b4:	8d 83       	std	Y+5, r24	; 0x05
    45b6:	8d 81       	ldd	r24, Y+5	; 0x05
    45b8:	9e 81       	ldd	r25, Y+6	; 0x06
    45ba:	9a 83       	std	Y+2, r25	; 0x02
    45bc:	89 83       	std	Y+1, r24	; 0x01
    45be:	89 81       	ldd	r24, Y+1	; 0x01
    45c0:	9a 81       	ldd	r25, Y+2	; 0x02
    45c2:	01 97       	sbiw	r24, 0x01	; 1
    45c4:	f1 f7       	brne	.-4      	; 0x45c2 <KPD_u8GetPressed+0x120>
    45c6:	9a 83       	std	Y+2, r25	; 0x02
    45c8:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    45ca:	9e 01       	movw	r18, r28
    45cc:	2e 5e       	subi	r18, 0xEE	; 238
    45ce:	3f 4f       	sbci	r19, 0xFF	; 255
    45d0:	82 e0       	ldi	r24, 0x02	; 2
    45d2:	68 89       	ldd	r22, Y+16	; 0x10
    45d4:	a9 01       	movw	r20, r18
    45d6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumReadPinVal>

        if (LOC_u8GetPressed == 0)
    45da:	8a 89       	ldd	r24, Y+18	; 0x12
    45dc:	88 23       	and	r24, r24
    45de:	a9 f4       	brne	.+42     	; 0x460a <KPD_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    45e0:	88 89       	ldd	r24, Y+16	; 0x10
    45e2:	48 2f       	mov	r20, r24
    45e4:	50 e0       	ldi	r21, 0x00	; 0
    45e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    45e8:	88 2f       	mov	r24, r24
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	9c 01       	movw	r18, r24
    45ee:	24 50       	subi	r18, 0x04	; 4
    45f0:	30 40       	sbci	r19, 0x00	; 0
    45f2:	ca 01       	movw	r24, r20
    45f4:	88 0f       	add	r24, r24
    45f6:	99 1f       	adc	r25, r25
    45f8:	88 0f       	add	r24, r24
    45fa:	99 1f       	adc	r25, r25
    45fc:	82 0f       	add	r24, r18
    45fe:	93 1f       	adc	r25, r19
    4600:	fc 01       	movw	r30, r24
    4602:	e3 58       	subi	r30, 0x83	; 131
    4604:	fe 4f       	sbci	r31, 0xFE	; 254
    4606:	80 81       	ld	r24, Z
    4608:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    460a:	9e 01       	movw	r18, r28
    460c:	2e 5e       	subi	r18, 0xEE	; 238
    460e:	3f 4f       	sbci	r19, 0xFF	; 255
    4610:	82 e0       	ldi	r24, 0x02	; 2
    4612:	68 89       	ldd	r22, Y+16	; 0x10
    4614:	a9 01       	movw	r20, r18
    4616:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumReadPinVal>
    461a:	08 c0       	rjmp	.+16     	; 0x462c <KPD_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
          DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    461c:	9e 01       	movw	r18, r28
    461e:	2e 5e       	subi	r18, 0xEE	; 238
    4620:	3f 4f       	sbci	r19, 0xFF	; 255
    4622:	82 e0       	ldi	r24, 0x02	; 2
    4624:	68 89       	ldd	r22, Y+16	; 0x10
    4626:	a9 01       	movw	r20, r18
    4628:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <DIO_enumReadPinVal>

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    462c:	8a 89       	ldd	r24, Y+18	; 0x12
    462e:	88 23       	and	r24, r24
    4630:	a9 f3       	breq	.-22     	; 0x461c <KPD_u8GetPressed+0x17a>
    4632:	07 c0       	rjmp	.+14     	; 0x4642 <KPD_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    4634:	88 89       	ldd	r24, Y+16	; 0x10
    4636:	8f 5f       	subi	r24, 0xFF	; 255
    4638:	88 8b       	std	Y+16, r24	; 0x10
    463a:	88 89       	ldd	r24, Y+16	; 0x10
    463c:	84 30       	cpi	r24, 0x04	; 4
    463e:	08 f4       	brcc	.+2      	; 0x4642 <KPD_u8GetPressed+0x1a0>
    4640:	46 cf       	rjmp	.-372    	; 0x44ce <KPD_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    4642:	82 e0       	ldi	r24, 0x02	; 2
    4644:	6f 85       	ldd	r22, Y+15	; 0x0f
    4646:	41 e0       	ldi	r20, 0x01	; 1
    4648:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    464c:	8f 85       	ldd	r24, Y+15	; 0x0f
    464e:	8f 5f       	subi	r24, 0xFF	; 255
    4650:	8f 87       	std	Y+15, r24	; 0x0f
    4652:	8f 85       	ldd	r24, Y+15	; 0x0f
    4654:	88 30       	cpi	r24, 0x08	; 8
    4656:	08 f4       	brcc	.+2      	; 0x465a <KPD_u8GetPressed+0x1b8>
    4658:	33 cf       	rjmp	.-410    	; 0x44c0 <KPD_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    465a:	89 89       	ldd	r24, Y+17	; 0x11
}
    465c:	62 96       	adiw	r28, 0x12	; 18
    465e:	0f b6       	in	r0, 0x3f	; 63
    4660:	f8 94       	cli
    4662:	de bf       	out	0x3e, r29	; 62
    4664:	0f be       	out	0x3f, r0	; 63
    4666:	cd bf       	out	0x3d, r28	; 61
    4668:	cf 91       	pop	r28
    466a:	df 91       	pop	r29
    466c:	08 95       	ret

0000466e <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    466e:	0f 93       	push	r16
    4670:	1f 93       	push	r17
    4672:	df 93       	push	r29
    4674:	cf 93       	push	r28
    4676:	cd b7       	in	r28, 0x3d	; 61
    4678:	de b7       	in	r29, 0x3e	; 62
    467a:	c6 54       	subi	r28, 0x46	; 70
    467c:	d0 40       	sbci	r29, 0x00	; 0
    467e:	0f b6       	in	r0, 0x3f	; 63
    4680:	f8 94       	cli
    4682:	de bf       	out	0x3e, r29	; 62
    4684:	0f be       	out	0x3f, r0	; 63
    4686:	cd bf       	out	0x3d, r28	; 61
    4688:	fe 01       	movw	r30, r28
    468a:	ed 5b       	subi	r30, 0xBD	; 189
    468c:	ff 4f       	sbci	r31, 0xFF	; 255
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	a8 e4       	ldi	r26, 0x48	; 72
    4694:	b2 e4       	ldi	r27, 0x42	; 66
    4696:	80 83       	st	Z, r24
    4698:	91 83       	std	Z+1, r25	; 0x01
    469a:	a2 83       	std	Z+2, r26	; 0x02
    469c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    469e:	8e 01       	movw	r16, r28
    46a0:	01 5c       	subi	r16, 0xC1	; 193
    46a2:	1f 4f       	sbci	r17, 0xFF	; 255
    46a4:	fe 01       	movw	r30, r28
    46a6:	ed 5b       	subi	r30, 0xBD	; 189
    46a8:	ff 4f       	sbci	r31, 0xFF	; 255
    46aa:	60 81       	ld	r22, Z
    46ac:	71 81       	ldd	r23, Z+1	; 0x01
    46ae:	82 81       	ldd	r24, Z+2	; 0x02
    46b0:	93 81       	ldd	r25, Z+3	; 0x03
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	4a ef       	ldi	r20, 0xFA	; 250
    46b8:	54 e4       	ldi	r21, 0x44	; 68
    46ba:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    46be:	dc 01       	movw	r26, r24
    46c0:	cb 01       	movw	r24, r22
    46c2:	f8 01       	movw	r30, r16
    46c4:	80 83       	st	Z, r24
    46c6:	91 83       	std	Z+1, r25	; 0x01
    46c8:	a2 83       	std	Z+2, r26	; 0x02
    46ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46cc:	fe 01       	movw	r30, r28
    46ce:	ff 96       	adiw	r30, 0x3f	; 63
    46d0:	60 81       	ld	r22, Z
    46d2:	71 81       	ldd	r23, Z+1	; 0x01
    46d4:	82 81       	ldd	r24, Z+2	; 0x02
    46d6:	93 81       	ldd	r25, Z+3	; 0x03
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	40 e8       	ldi	r20, 0x80	; 128
    46de:	5f e3       	ldi	r21, 0x3F	; 63
    46e0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    46e4:	88 23       	and	r24, r24
    46e6:	2c f4       	brge	.+10     	; 0x46f2 <CLCD_vInit+0x84>
		__ticks = 1;
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	9e af       	std	Y+62, r25	; 0x3e
    46ee:	8d af       	std	Y+61, r24	; 0x3d
    46f0:	46 c0       	rjmp	.+140    	; 0x477e <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    46f2:	fe 01       	movw	r30, r28
    46f4:	ff 96       	adiw	r30, 0x3f	; 63
    46f6:	60 81       	ld	r22, Z
    46f8:	71 81       	ldd	r23, Z+1	; 0x01
    46fa:	82 81       	ldd	r24, Z+2	; 0x02
    46fc:	93 81       	ldd	r25, Z+3	; 0x03
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	3f ef       	ldi	r19, 0xFF	; 255
    4702:	4f e7       	ldi	r20, 0x7F	; 127
    4704:	57 e4       	ldi	r21, 0x47	; 71
    4706:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    470a:	18 16       	cp	r1, r24
    470c:	64 f5       	brge	.+88     	; 0x4766 <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    470e:	fe 01       	movw	r30, r28
    4710:	ed 5b       	subi	r30, 0xBD	; 189
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	60 81       	ld	r22, Z
    4716:	71 81       	ldd	r23, Z+1	; 0x01
    4718:	82 81       	ldd	r24, Z+2	; 0x02
    471a:	93 81       	ldd	r25, Z+3	; 0x03
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	40 e2       	ldi	r20, 0x20	; 32
    4722:	51 e4       	ldi	r21, 0x41	; 65
    4724:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	bc 01       	movw	r22, r24
    472e:	cd 01       	movw	r24, r26
    4730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	9e af       	std	Y+62, r25	; 0x3e
    473a:	8d af       	std	Y+61, r24	; 0x3d
    473c:	0f c0       	rjmp	.+30     	; 0x475c <CLCD_vInit+0xee>
    473e:	88 ec       	ldi	r24, 0xC8	; 200
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	9c af       	std	Y+60, r25	; 0x3c
    4744:	8b af       	std	Y+59, r24	; 0x3b
    4746:	8b ad       	ldd	r24, Y+59	; 0x3b
    4748:	9c ad       	ldd	r25, Y+60	; 0x3c
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	f1 f7       	brne	.-4      	; 0x474a <CLCD_vInit+0xdc>
    474e:	9c af       	std	Y+60, r25	; 0x3c
    4750:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4752:	8d ad       	ldd	r24, Y+61	; 0x3d
    4754:	9e ad       	ldd	r25, Y+62	; 0x3e
    4756:	01 97       	sbiw	r24, 0x01	; 1
    4758:	9e af       	std	Y+62, r25	; 0x3e
    475a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    475c:	8d ad       	ldd	r24, Y+61	; 0x3d
    475e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4760:	00 97       	sbiw	r24, 0x00	; 0
    4762:	69 f7       	brne	.-38     	; 0x473e <CLCD_vInit+0xd0>
    4764:	16 c0       	rjmp	.+44     	; 0x4792 <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4766:	fe 01       	movw	r30, r28
    4768:	ff 96       	adiw	r30, 0x3f	; 63
    476a:	60 81       	ld	r22, Z
    476c:	71 81       	ldd	r23, Z+1	; 0x01
    476e:	82 81       	ldd	r24, Z+2	; 0x02
    4770:	93 81       	ldd	r25, Z+3	; 0x03
    4772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	9e af       	std	Y+62, r25	; 0x3e
    477c:	8d af       	std	Y+61, r24	; 0x3d
    477e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4780:	9e ad       	ldd	r25, Y+62	; 0x3e
    4782:	9a af       	std	Y+58, r25	; 0x3a
    4784:	89 af       	std	Y+57, r24	; 0x39
    4786:	89 ad       	ldd	r24, Y+57	; 0x39
    4788:	9a ad       	ldd	r25, Y+58	; 0x3a
    478a:	01 97       	sbiw	r24, 0x01	; 1
    478c:	f1 f7       	brne	.-4      	; 0x478a <CLCD_vInit+0x11c>
    478e:	9a af       	std	Y+58, r25	; 0x3a
    4790:	89 af       	std	Y+57, r24	; 0x39
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN0, DIO_PIN_OUTPUT);
    4792:	81 e0       	ldi	r24, 0x01	; 1
    4794:	60 e0       	ldi	r22, 0x00	; 0
    4796:	41 e0       	ldi	r20, 0x01	; 1
    4798:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN1, DIO_PIN_OUTPUT);
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	61 e0       	ldi	r22, 0x01	; 1
    47a0:	41 e0       	ldi	r20, 0x01	; 1
    47a2:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN2, DIO_PIN_OUTPUT);
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	62 e0       	ldi	r22, 0x02	; 2
    47aa:	41 e0       	ldi	r20, 0x01	; 1
    47ac:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN3, DIO_PIN_OUTPUT);
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	63 e0       	ldi	r22, 0x03	; 3
    47b4:	41 e0       	ldi	r20, 0x01	; 1
    47b6:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	66 e0       	ldi	r22, 0x06	; 6
    47be:	41 e0       	ldi	r20, 0x01	; 1
    47c0:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    47c4:	81 e0       	ldi	r24, 0x01	; 1
    47c6:	65 e0       	ldi	r22, 0x05	; 5
    47c8:	41 e0       	ldi	r20, 0x01	; 1
    47ca:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	64 e0       	ldi	r22, 0x04	; 4
    47d2:	41 e0       	ldi	r20, 0x01	; 1
    47d4:	0e 94 96 14 	call	0x292c	; 0x292c <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    47d8:	82 e0       	ldi	r24, 0x02	; 2
    47da:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <CLCD_vSendCommand>
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	a0 e2       	ldi	r26, 0x20	; 32
    47e4:	b1 e4       	ldi	r27, 0x41	; 65
    47e6:	8d ab       	std	Y+53, r24	; 0x35
    47e8:	9e ab       	std	Y+54, r25	; 0x36
    47ea:	af ab       	std	Y+55, r26	; 0x37
    47ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ee:	6d a9       	ldd	r22, Y+53	; 0x35
    47f0:	7e a9       	ldd	r23, Y+54	; 0x36
    47f2:	8f a9       	ldd	r24, Y+55	; 0x37
    47f4:	98 ad       	ldd	r25, Y+56	; 0x38
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	4a ef       	ldi	r20, 0xFA	; 250
    47fc:	54 e4       	ldi	r21, 0x44	; 68
    47fe:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4802:	dc 01       	movw	r26, r24
    4804:	cb 01       	movw	r24, r22
    4806:	89 ab       	std	Y+49, r24	; 0x31
    4808:	9a ab       	std	Y+50, r25	; 0x32
    480a:	ab ab       	std	Y+51, r26	; 0x33
    480c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    480e:	69 a9       	ldd	r22, Y+49	; 0x31
    4810:	7a a9       	ldd	r23, Y+50	; 0x32
    4812:	8b a9       	ldd	r24, Y+51	; 0x33
    4814:	9c a9       	ldd	r25, Y+52	; 0x34
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	40 e8       	ldi	r20, 0x80	; 128
    481c:	5f e3       	ldi	r21, 0x3F	; 63
    481e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4822:	88 23       	and	r24, r24
    4824:	2c f4       	brge	.+10     	; 0x4830 <CLCD_vInit+0x1c2>
		__ticks = 1;
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	98 ab       	std	Y+48, r25	; 0x30
    482c:	8f a7       	std	Y+47, r24	; 0x2f
    482e:	3f c0       	rjmp	.+126    	; 0x48ae <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    4830:	69 a9       	ldd	r22, Y+49	; 0x31
    4832:	7a a9       	ldd	r23, Y+50	; 0x32
    4834:	8b a9       	ldd	r24, Y+51	; 0x33
    4836:	9c a9       	ldd	r25, Y+52	; 0x34
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	3f ef       	ldi	r19, 0xFF	; 255
    483c:	4f e7       	ldi	r20, 0x7F	; 127
    483e:	57 e4       	ldi	r21, 0x47	; 71
    4840:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4844:	18 16       	cp	r1, r24
    4846:	4c f5       	brge	.+82     	; 0x489a <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4848:	6d a9       	ldd	r22, Y+53	; 0x35
    484a:	7e a9       	ldd	r23, Y+54	; 0x36
    484c:	8f a9       	ldd	r24, Y+55	; 0x37
    484e:	98 ad       	ldd	r25, Y+56	; 0x38
    4850:	20 e0       	ldi	r18, 0x00	; 0
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	40 e2       	ldi	r20, 0x20	; 32
    4856:	51 e4       	ldi	r21, 0x41	; 65
    4858:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	bc 01       	movw	r22, r24
    4862:	cd 01       	movw	r24, r26
    4864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	98 ab       	std	Y+48, r25	; 0x30
    486e:	8f a7       	std	Y+47, r24	; 0x2f
    4870:	0f c0       	rjmp	.+30     	; 0x4890 <CLCD_vInit+0x222>
    4872:	88 ec       	ldi	r24, 0xC8	; 200
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	9e a7       	std	Y+46, r25	; 0x2e
    4878:	8d a7       	std	Y+45, r24	; 0x2d
    487a:	8d a5       	ldd	r24, Y+45	; 0x2d
    487c:	9e a5       	ldd	r25, Y+46	; 0x2e
    487e:	01 97       	sbiw	r24, 0x01	; 1
    4880:	f1 f7       	brne	.-4      	; 0x487e <CLCD_vInit+0x210>
    4882:	9e a7       	std	Y+46, r25	; 0x2e
    4884:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4886:	8f a5       	ldd	r24, Y+47	; 0x2f
    4888:	98 a9       	ldd	r25, Y+48	; 0x30
    488a:	01 97       	sbiw	r24, 0x01	; 1
    488c:	98 ab       	std	Y+48, r25	; 0x30
    488e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4890:	8f a5       	ldd	r24, Y+47	; 0x2f
    4892:	98 a9       	ldd	r25, Y+48	; 0x30
    4894:	00 97       	sbiw	r24, 0x00	; 0
    4896:	69 f7       	brne	.-38     	; 0x4872 <CLCD_vInit+0x204>
    4898:	14 c0       	rjmp	.+40     	; 0x48c2 <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    489a:	69 a9       	ldd	r22, Y+49	; 0x31
    489c:	7a a9       	ldd	r23, Y+50	; 0x32
    489e:	8b a9       	ldd	r24, Y+51	; 0x33
    48a0:	9c a9       	ldd	r25, Y+52	; 0x34
    48a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	98 ab       	std	Y+48, r25	; 0x30
    48ac:	8f a7       	std	Y+47, r24	; 0x2f
    48ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    48b0:	98 a9       	ldd	r25, Y+48	; 0x30
    48b2:	9c a7       	std	Y+44, r25	; 0x2c
    48b4:	8b a7       	std	Y+43, r24	; 0x2b
    48b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    48b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    48ba:	01 97       	sbiw	r24, 0x01	; 1
    48bc:	f1 f7       	brne	.-4      	; 0x48ba <CLCD_vInit+0x24c>
    48be:	9c a7       	std	Y+44, r25	; 0x2c
    48c0:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    48c2:	88 e2       	ldi	r24, 0x28	; 40
    48c4:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <CLCD_vSendCommand>
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	a0 e8       	ldi	r26, 0x80	; 128
    48ce:	bf e3       	ldi	r27, 0x3F	; 63
    48d0:	8f a3       	std	Y+39, r24	; 0x27
    48d2:	98 a7       	std	Y+40, r25	; 0x28
    48d4:	a9 a7       	std	Y+41, r26	; 0x29
    48d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48d8:	6f a1       	ldd	r22, Y+39	; 0x27
    48da:	78 a5       	ldd	r23, Y+40	; 0x28
    48dc:	89 a5       	ldd	r24, Y+41	; 0x29
    48de:	9a a5       	ldd	r25, Y+42	; 0x2a
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	4a ef       	ldi	r20, 0xFA	; 250
    48e6:	54 e4       	ldi	r21, 0x44	; 68
    48e8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    48ec:	dc 01       	movw	r26, r24
    48ee:	cb 01       	movw	r24, r22
    48f0:	8b a3       	std	Y+35, r24	; 0x23
    48f2:	9c a3       	std	Y+36, r25	; 0x24
    48f4:	ad a3       	std	Y+37, r26	; 0x25
    48f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    48f8:	6b a1       	ldd	r22, Y+35	; 0x23
    48fa:	7c a1       	ldd	r23, Y+36	; 0x24
    48fc:	8d a1       	ldd	r24, Y+37	; 0x25
    48fe:	9e a1       	ldd	r25, Y+38	; 0x26
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	40 e8       	ldi	r20, 0x80	; 128
    4906:	5f e3       	ldi	r21, 0x3F	; 63
    4908:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    490c:	88 23       	and	r24, r24
    490e:	2c f4       	brge	.+10     	; 0x491a <CLCD_vInit+0x2ac>
		__ticks = 1;
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	9a a3       	std	Y+34, r25	; 0x22
    4916:	89 a3       	std	Y+33, r24	; 0x21
    4918:	3f c0       	rjmp	.+126    	; 0x4998 <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    491a:	6b a1       	ldd	r22, Y+35	; 0x23
    491c:	7c a1       	ldd	r23, Y+36	; 0x24
    491e:	8d a1       	ldd	r24, Y+37	; 0x25
    4920:	9e a1       	ldd	r25, Y+38	; 0x26
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	3f ef       	ldi	r19, 0xFF	; 255
    4926:	4f e7       	ldi	r20, 0x7F	; 127
    4928:	57 e4       	ldi	r21, 0x47	; 71
    492a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    492e:	18 16       	cp	r1, r24
    4930:	4c f5       	brge	.+82     	; 0x4984 <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4932:	6f a1       	ldd	r22, Y+39	; 0x27
    4934:	78 a5       	ldd	r23, Y+40	; 0x28
    4936:	89 a5       	ldd	r24, Y+41	; 0x29
    4938:	9a a5       	ldd	r25, Y+42	; 0x2a
    493a:	20 e0       	ldi	r18, 0x00	; 0
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	40 e2       	ldi	r20, 0x20	; 32
    4940:	51 e4       	ldi	r21, 0x41	; 65
    4942:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4946:	dc 01       	movw	r26, r24
    4948:	cb 01       	movw	r24, r22
    494a:	bc 01       	movw	r22, r24
    494c:	cd 01       	movw	r24, r26
    494e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	9a a3       	std	Y+34, r25	; 0x22
    4958:	89 a3       	std	Y+33, r24	; 0x21
    495a:	0f c0       	rjmp	.+30     	; 0x497a <CLCD_vInit+0x30c>
    495c:	88 ec       	ldi	r24, 0xC8	; 200
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	98 a3       	std	Y+32, r25	; 0x20
    4962:	8f 8f       	std	Y+31, r24	; 0x1f
    4964:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4966:	98 a1       	ldd	r25, Y+32	; 0x20
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	f1 f7       	brne	.-4      	; 0x4968 <CLCD_vInit+0x2fa>
    496c:	98 a3       	std	Y+32, r25	; 0x20
    496e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4970:	89 a1       	ldd	r24, Y+33	; 0x21
    4972:	9a a1       	ldd	r25, Y+34	; 0x22
    4974:	01 97       	sbiw	r24, 0x01	; 1
    4976:	9a a3       	std	Y+34, r25	; 0x22
    4978:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    497a:	89 a1       	ldd	r24, Y+33	; 0x21
    497c:	9a a1       	ldd	r25, Y+34	; 0x22
    497e:	00 97       	sbiw	r24, 0x00	; 0
    4980:	69 f7       	brne	.-38     	; 0x495c <CLCD_vInit+0x2ee>
    4982:	14 c0       	rjmp	.+40     	; 0x49ac <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4984:	6b a1       	ldd	r22, Y+35	; 0x23
    4986:	7c a1       	ldd	r23, Y+36	; 0x24
    4988:	8d a1       	ldd	r24, Y+37	; 0x25
    498a:	9e a1       	ldd	r25, Y+38	; 0x26
    498c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4990:	dc 01       	movw	r26, r24
    4992:	cb 01       	movw	r24, r22
    4994:	9a a3       	std	Y+34, r25	; 0x22
    4996:	89 a3       	std	Y+33, r24	; 0x21
    4998:	89 a1       	ldd	r24, Y+33	; 0x21
    499a:	9a a1       	ldd	r25, Y+34	; 0x22
    499c:	9e 8f       	std	Y+30, r25	; 0x1e
    499e:	8d 8f       	std	Y+29, r24	; 0x1d
    49a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49a4:	01 97       	sbiw	r24, 0x01	; 1
    49a6:	f1 f7       	brne	.-4      	; 0x49a4 <CLCD_vInit+0x336>
    49a8:	9e 8f       	std	Y+30, r25	; 0x1e
    49aa:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    49ac:	8c e0       	ldi	r24, 0x0C	; 12
    49ae:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <CLCD_vSendCommand>
    49b2:	80 e0       	ldi	r24, 0x00	; 0
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	a0 e8       	ldi	r26, 0x80	; 128
    49b8:	bf e3       	ldi	r27, 0x3F	; 63
    49ba:	89 8f       	std	Y+25, r24	; 0x19
    49bc:	9a 8f       	std	Y+26, r25	; 0x1a
    49be:	ab 8f       	std	Y+27, r26	; 0x1b
    49c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49c2:	69 8d       	ldd	r22, Y+25	; 0x19
    49c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	4a ef       	ldi	r20, 0xFA	; 250
    49d0:	54 e4       	ldi	r21, 0x44	; 68
    49d2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	8d 8b       	std	Y+21, r24	; 0x15
    49dc:	9e 8b       	std	Y+22, r25	; 0x16
    49de:	af 8b       	std	Y+23, r26	; 0x17
    49e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    49e2:	6d 89       	ldd	r22, Y+21	; 0x15
    49e4:	7e 89       	ldd	r23, Y+22	; 0x16
    49e6:	8f 89       	ldd	r24, Y+23	; 0x17
    49e8:	98 8d       	ldd	r25, Y+24	; 0x18
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	40 e8       	ldi	r20, 0x80	; 128
    49f0:	5f e3       	ldi	r21, 0x3F	; 63
    49f2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    49f6:	88 23       	and	r24, r24
    49f8:	2c f4       	brge	.+10     	; 0x4a04 <CLCD_vInit+0x396>
		__ticks = 1;
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	9c 8b       	std	Y+20, r25	; 0x14
    4a00:	8b 8b       	std	Y+19, r24	; 0x13
    4a02:	3f c0       	rjmp	.+126    	; 0x4a82 <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    4a04:	6d 89       	ldd	r22, Y+21	; 0x15
    4a06:	7e 89       	ldd	r23, Y+22	; 0x16
    4a08:	8f 89       	ldd	r24, Y+23	; 0x17
    4a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a0c:	20 e0       	ldi	r18, 0x00	; 0
    4a0e:	3f ef       	ldi	r19, 0xFF	; 255
    4a10:	4f e7       	ldi	r20, 0x7F	; 127
    4a12:	57 e4       	ldi	r21, 0x47	; 71
    4a14:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4a18:	18 16       	cp	r1, r24
    4a1a:	4c f5       	brge	.+82     	; 0x4a6e <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    4a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	40 e2       	ldi	r20, 0x20	; 32
    4a2a:	51 e4       	ldi	r21, 0x41	; 65
    4a2c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4a30:	dc 01       	movw	r26, r24
    4a32:	cb 01       	movw	r24, r22
    4a34:	bc 01       	movw	r22, r24
    4a36:	cd 01       	movw	r24, r26
    4a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	9c 8b       	std	Y+20, r25	; 0x14
    4a42:	8b 8b       	std	Y+19, r24	; 0x13
    4a44:	0f c0       	rjmp	.+30     	; 0x4a64 <CLCD_vInit+0x3f6>
    4a46:	88 ec       	ldi	r24, 0xC8	; 200
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	9a 8b       	std	Y+18, r25	; 0x12
    4a4c:	89 8b       	std	Y+17, r24	; 0x11
    4a4e:	89 89       	ldd	r24, Y+17	; 0x11
    4a50:	9a 89       	ldd	r25, Y+18	; 0x12
    4a52:	01 97       	sbiw	r24, 0x01	; 1
    4a54:	f1 f7       	brne	.-4      	; 0x4a52 <CLCD_vInit+0x3e4>
    4a56:	9a 8b       	std	Y+18, r25	; 0x12
    4a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    4a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a5e:	01 97       	sbiw	r24, 0x01	; 1
    4a60:	9c 8b       	std	Y+20, r25	; 0x14
    4a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a64:	8b 89       	ldd	r24, Y+19	; 0x13
    4a66:	9c 89       	ldd	r25, Y+20	; 0x14
    4a68:	00 97       	sbiw	r24, 0x00	; 0
    4a6a:	69 f7       	brne	.-38     	; 0x4a46 <CLCD_vInit+0x3d8>
    4a6c:	14 c0       	rjmp	.+40     	; 0x4a96 <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a70:	7e 89       	ldd	r23, Y+22	; 0x16
    4a72:	8f 89       	ldd	r24, Y+23	; 0x17
    4a74:	98 8d       	ldd	r25, Y+24	; 0x18
    4a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	9c 8b       	std	Y+20, r25	; 0x14
    4a80:	8b 8b       	std	Y+19, r24	; 0x13
    4a82:	8b 89       	ldd	r24, Y+19	; 0x13
    4a84:	9c 89       	ldd	r25, Y+20	; 0x14
    4a86:	98 8b       	std	Y+16, r25	; 0x10
    4a88:	8f 87       	std	Y+15, r24	; 0x0f
    4a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a8c:	98 89       	ldd	r25, Y+16	; 0x10
    4a8e:	01 97       	sbiw	r24, 0x01	; 1
    4a90:	f1 f7       	brne	.-4      	; 0x4a8e <CLCD_vInit+0x420>
    4a92:	98 8b       	std	Y+16, r25	; 0x10
    4a94:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    4a96:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    4a9a:	86 e0       	ldi	r24, 0x06	; 6
    4a9c:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <CLCD_vSendCommand>
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	a0 e8       	ldi	r26, 0x80	; 128
    4aa6:	bf e3       	ldi	r27, 0x3F	; 63
    4aa8:	8b 87       	std	Y+11, r24	; 0x0b
    4aaa:	9c 87       	std	Y+12, r25	; 0x0c
    4aac:	ad 87       	std	Y+13, r26	; 0x0d
    4aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab8:	20 e0       	ldi	r18, 0x00	; 0
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	4a ef       	ldi	r20, 0xFA	; 250
    4abe:	54 e4       	ldi	r21, 0x44	; 68
    4ac0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	8f 83       	std	Y+7, r24	; 0x07
    4aca:	98 87       	std	Y+8, r25	; 0x08
    4acc:	a9 87       	std	Y+9, r26	; 0x09
    4ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ad2:	78 85       	ldd	r23, Y+8	; 0x08
    4ad4:	89 85       	ldd	r24, Y+9	; 0x09
    4ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	40 e8       	ldi	r20, 0x80	; 128
    4ade:	5f e3       	ldi	r21, 0x3F	; 63
    4ae0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4ae4:	88 23       	and	r24, r24
    4ae6:	2c f4       	brge	.+10     	; 0x4af2 <CLCD_vInit+0x484>
		__ticks = 1;
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	9e 83       	std	Y+6, r25	; 0x06
    4aee:	8d 83       	std	Y+5, r24	; 0x05
    4af0:	3f c0       	rjmp	.+126    	; 0x4b70 <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    4af2:	6f 81       	ldd	r22, Y+7	; 0x07
    4af4:	78 85       	ldd	r23, Y+8	; 0x08
    4af6:	89 85       	ldd	r24, Y+9	; 0x09
    4af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	3f ef       	ldi	r19, 0xFF	; 255
    4afe:	4f e7       	ldi	r20, 0x7F	; 127
    4b00:	57 e4       	ldi	r21, 0x47	; 71
    4b02:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4b06:	18 16       	cp	r1, r24
    4b08:	4c f5       	brge	.+82     	; 0x4b5c <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 e2       	ldi	r20, 0x20	; 32
    4b18:	51 e4       	ldi	r21, 0x41	; 65
    4b1a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	bc 01       	movw	r22, r24
    4b24:	cd 01       	movw	r24, r26
    4b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b2a:	dc 01       	movw	r26, r24
    4b2c:	cb 01       	movw	r24, r22
    4b2e:	9e 83       	std	Y+6, r25	; 0x06
    4b30:	8d 83       	std	Y+5, r24	; 0x05
    4b32:	0f c0       	rjmp	.+30     	; 0x4b52 <CLCD_vInit+0x4e4>
    4b34:	88 ec       	ldi	r24, 0xC8	; 200
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	9c 83       	std	Y+4, r25	; 0x04
    4b3a:	8b 83       	std	Y+3, r24	; 0x03
    4b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b40:	01 97       	sbiw	r24, 0x01	; 1
    4b42:	f1 f7       	brne	.-4      	; 0x4b40 <CLCD_vInit+0x4d2>
    4b44:	9c 83       	std	Y+4, r25	; 0x04
    4b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b48:	8d 81       	ldd	r24, Y+5	; 0x05
    4b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b4c:	01 97       	sbiw	r24, 0x01	; 1
    4b4e:	9e 83       	std	Y+6, r25	; 0x06
    4b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b52:	8d 81       	ldd	r24, Y+5	; 0x05
    4b54:	9e 81       	ldd	r25, Y+6	; 0x06
    4b56:	00 97       	sbiw	r24, 0x00	; 0
    4b58:	69 f7       	brne	.-38     	; 0x4b34 <CLCD_vInit+0x4c6>
    4b5a:	14 c0       	rjmp	.+40     	; 0x4b84 <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b5e:	78 85       	ldd	r23, Y+8	; 0x08
    4b60:	89 85       	ldd	r24, Y+9	; 0x09
    4b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	9e 83       	std	Y+6, r25	; 0x06
    4b6e:	8d 83       	std	Y+5, r24	; 0x05
    4b70:	8d 81       	ldd	r24, Y+5	; 0x05
    4b72:	9e 81       	ldd	r25, Y+6	; 0x06
    4b74:	9a 83       	std	Y+2, r25	; 0x02
    4b76:	89 83       	std	Y+1, r24	; 0x01
    4b78:	89 81       	ldd	r24, Y+1	; 0x01
    4b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b7c:	01 97       	sbiw	r24, 0x01	; 1
    4b7e:	f1 f7       	brne	.-4      	; 0x4b7c <CLCD_vInit+0x50e>
    4b80:	9a 83       	std	Y+2, r25	; 0x02
    4b82:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    4b84:	ca 5b       	subi	r28, 0xBA	; 186
    4b86:	df 4f       	sbci	r29, 0xFF	; 255
    4b88:	0f b6       	in	r0, 0x3f	; 63
    4b8a:	f8 94       	cli
    4b8c:	de bf       	out	0x3e, r29	; 62
    4b8e:	0f be       	out	0x3f, r0	; 63
    4b90:	cd bf       	out	0x3d, r28	; 61
    4b92:	cf 91       	pop	r28
    4b94:	df 91       	pop	r29
    4b96:	1f 91       	pop	r17
    4b98:	0f 91       	pop	r16
    4b9a:	08 95       	ret

00004b9c <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    4b9c:	df 93       	push	r29
    4b9e:	cf 93       	push	r28
    4ba0:	0f 92       	push	r0
    4ba2:	cd b7       	in	r28, 0x3d	; 61
    4ba4:	de b7       	in	r29, 0x3e	; 62
    4ba6:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    4ba8:	81 e0       	ldi	r24, 0x01	; 1
    4baa:	66 e0       	ldi	r22, 0x06	; 6
    4bac:	41 e0       	ldi	r20, 0x01	; 1
    4bae:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	65 e0       	ldi	r22, 0x05	; 5
    4bb6:	40 e0       	ldi	r20, 0x00	; 0
    4bb8:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to low nibbles
    4bbc:	89 81       	ldd	r24, Y+1	; 0x01
    4bbe:	98 2f       	mov	r25, r24
    4bc0:	92 95       	swap	r25
    4bc2:	9f 70       	andi	r25, 0x0F	; 15
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	69 2f       	mov	r22, r25
    4bc8:	0e 94 ac 1a 	call	0x3558	; 0x3558 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    4bcc:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to low nibbles
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	69 81       	ldd	r22, Y+1	; 0x01
    4bd4:	0e 94 ac 1a 	call	0x3558	; 0x3558 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    4bd8:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    4bdc:	0f 90       	pop	r0
    4bde:	cf 91       	pop	r28
    4be0:	df 91       	pop	r29
    4be2:	08 95       	ret

00004be4 <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    4be4:	df 93       	push	r29
    4be6:	cf 93       	push	r28
    4be8:	0f 92       	push	r0
    4bea:	cd b7       	in	r28, 0x3d	; 61
    4bec:	de b7       	in	r29, 0x3e	; 62
    4bee:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    4bf0:	81 e0       	ldi	r24, 0x01	; 1
    4bf2:	66 e0       	ldi	r22, 0x06	; 6
    4bf4:	40 e0       	ldi	r20, 0x00	; 0
    4bf6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	65 e0       	ldi	r22, 0x05	; 5
    4bfe:	40 e0       	ldi	r20, 0x00	; 0
    4c00:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to low nibbles
    4c04:	89 81       	ldd	r24, Y+1	; 0x01
    4c06:	98 2f       	mov	r25, r24
    4c08:	92 95       	swap	r25
    4c0a:	9f 70       	andi	r25, 0x0F	; 15
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	69 2f       	mov	r22, r25
    4c10:	0e 94 ac 1a 	call	0x3558	; 0x3558 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    4c14:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to low nibbles
    4c18:	81 e0       	ldi	r24, 0x01	; 1
    4c1a:	69 81       	ldd	r22, Y+1	; 0x01
    4c1c:	0e 94 ac 1a 	call	0x3558	; 0x3558 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    4c20:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    4c24:	0f 90       	pop	r0
    4c26:	cf 91       	pop	r28
    4c28:	df 91       	pop	r29
    4c2a:	08 95       	ret

00004c2c <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    4c2c:	df 93       	push	r29
    4c2e:	cf 93       	push	r28
    4c30:	cd b7       	in	r28, 0x3d	; 61
    4c32:	de b7       	in	r29, 0x3e	; 62
    4c34:	6c 97       	sbiw	r28, 0x1c	; 28
    4c36:	0f b6       	in	r0, 0x3f	; 63
    4c38:	f8 94       	cli
    4c3a:	de bf       	out	0x3e, r29	; 62
    4c3c:	0f be       	out	0x3f, r0	; 63
    4c3e:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    4c40:	81 e0       	ldi	r24, 0x01	; 1
    4c42:	64 e0       	ldi	r22, 0x04	; 4
    4c44:	41 e0       	ldi	r20, 0x01	; 1
    4c46:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
    4c4a:	80 e0       	ldi	r24, 0x00	; 0
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	a0 e8       	ldi	r26, 0x80	; 128
    4c50:	bf e3       	ldi	r27, 0x3F	; 63
    4c52:	89 8f       	std	Y+25, r24	; 0x19
    4c54:	9a 8f       	std	Y+26, r25	; 0x1a
    4c56:	ab 8f       	std	Y+27, r26	; 0x1b
    4c58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c5a:	69 8d       	ldd	r22, Y+25	; 0x19
    4c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c62:	20 e0       	ldi	r18, 0x00	; 0
    4c64:	30 e0       	ldi	r19, 0x00	; 0
    4c66:	4a ef       	ldi	r20, 0xFA	; 250
    4c68:	54 e4       	ldi	r21, 0x44	; 68
    4c6a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4c6e:	dc 01       	movw	r26, r24
    4c70:	cb 01       	movw	r24, r22
    4c72:	8d 8b       	std	Y+21, r24	; 0x15
    4c74:	9e 8b       	std	Y+22, r25	; 0x16
    4c76:	af 8b       	std	Y+23, r26	; 0x17
    4c78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    4c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    4c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c80:	98 8d       	ldd	r25, Y+24	; 0x18
    4c82:	20 e0       	ldi	r18, 0x00	; 0
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	40 e8       	ldi	r20, 0x80	; 128
    4c88:	5f e3       	ldi	r21, 0x3F	; 63
    4c8a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4c8e:	88 23       	and	r24, r24
    4c90:	2c f4       	brge	.+10     	; 0x4c9c <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    4c92:	81 e0       	ldi	r24, 0x01	; 1
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	9c 8b       	std	Y+20, r25	; 0x14
    4c98:	8b 8b       	std	Y+19, r24	; 0x13
    4c9a:	3f c0       	rjmp	.+126    	; 0x4d1a <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    4c9c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c9e:	7e 89       	ldd	r23, Y+22	; 0x16
    4ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	3f ef       	ldi	r19, 0xFF	; 255
    4ca8:	4f e7       	ldi	r20, 0x7F	; 127
    4caa:	57 e4       	ldi	r21, 0x47	; 71
    4cac:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4cb0:	18 16       	cp	r1, r24
    4cb2:	4c f5       	brge	.+82     	; 0x4d06 <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cb4:	69 8d       	ldd	r22, Y+25	; 0x19
    4cb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	40 e2       	ldi	r20, 0x20	; 32
    4cc2:	51 e4       	ldi	r21, 0x41	; 65
    4cc4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	bc 01       	movw	r22, r24
    4cce:	cd 01       	movw	r24, r26
    4cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	cb 01       	movw	r24, r22
    4cd8:	9c 8b       	std	Y+20, r25	; 0x14
    4cda:	8b 8b       	std	Y+19, r24	; 0x13
    4cdc:	0f c0       	rjmp	.+30     	; 0x4cfc <CLCD_vSendFallingEdge+0xd0>
    4cde:	88 ec       	ldi	r24, 0xC8	; 200
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	9a 8b       	std	Y+18, r25	; 0x12
    4ce4:	89 8b       	std	Y+17, r24	; 0x11
    4ce6:	89 89       	ldd	r24, Y+17	; 0x11
    4ce8:	9a 89       	ldd	r25, Y+18	; 0x12
    4cea:	01 97       	sbiw	r24, 0x01	; 1
    4cec:	f1 f7       	brne	.-4      	; 0x4cea <CLCD_vSendFallingEdge+0xbe>
    4cee:	9a 8b       	std	Y+18, r25	; 0x12
    4cf0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    4cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    4cf6:	01 97       	sbiw	r24, 0x01	; 1
    4cf8:	9c 8b       	std	Y+20, r25	; 0x14
    4cfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    4cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    4d00:	00 97       	sbiw	r24, 0x00	; 0
    4d02:	69 f7       	brne	.-38     	; 0x4cde <CLCD_vSendFallingEdge+0xb2>
    4d04:	14 c0       	rjmp	.+40     	; 0x4d2e <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d06:	6d 89       	ldd	r22, Y+21	; 0x15
    4d08:	7e 89       	ldd	r23, Y+22	; 0x16
    4d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d12:	dc 01       	movw	r26, r24
    4d14:	cb 01       	movw	r24, r22
    4d16:	9c 8b       	std	Y+20, r25	; 0x14
    4d18:	8b 8b       	std	Y+19, r24	; 0x13
    4d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d1e:	98 8b       	std	Y+16, r25	; 0x10
    4d20:	8f 87       	std	Y+15, r24	; 0x0f
    4d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d24:	98 89       	ldd	r25, Y+16	; 0x10
    4d26:	01 97       	sbiw	r24, 0x01	; 1
    4d28:	f1 f7       	brne	.-4      	; 0x4d26 <CLCD_vSendFallingEdge+0xfa>
    4d2a:	98 8b       	std	Y+16, r25	; 0x10
    4d2c:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	64 e0       	ldi	r22, 0x04	; 4
    4d32:	40 e0       	ldi	r20, 0x00	; 0
    4d34:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <DIO_enumWritePinVal>
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	a0 e8       	ldi	r26, 0x80	; 128
    4d3e:	bf e3       	ldi	r27, 0x3F	; 63
    4d40:	8b 87       	std	Y+11, r24	; 0x0b
    4d42:	9c 87       	std	Y+12, r25	; 0x0c
    4d44:	ad 87       	std	Y+13, r26	; 0x0d
    4d46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	4a ef       	ldi	r20, 0xFA	; 250
    4d56:	54 e4       	ldi	r21, 0x44	; 68
    4d58:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	8f 83       	std	Y+7, r24	; 0x07
    4d62:	98 87       	std	Y+8, r25	; 0x08
    4d64:	a9 87       	std	Y+9, r26	; 0x09
    4d66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d68:	6f 81       	ldd	r22, Y+7	; 0x07
    4d6a:	78 85       	ldd	r23, Y+8	; 0x08
    4d6c:	89 85       	ldd	r24, Y+9	; 0x09
    4d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	40 e8       	ldi	r20, 0x80	; 128
    4d76:	5f e3       	ldi	r21, 0x3F	; 63
    4d78:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4d7c:	88 23       	and	r24, r24
    4d7e:	2c f4       	brge	.+10     	; 0x4d8a <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	9e 83       	std	Y+6, r25	; 0x06
    4d86:	8d 83       	std	Y+5, r24	; 0x05
    4d88:	3f c0       	rjmp	.+126    	; 0x4e08 <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    4d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d8c:	78 85       	ldd	r23, Y+8	; 0x08
    4d8e:	89 85       	ldd	r24, Y+9	; 0x09
    4d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	3f ef       	ldi	r19, 0xFF	; 255
    4d96:	4f e7       	ldi	r20, 0x7F	; 127
    4d98:	57 e4       	ldi	r21, 0x47	; 71
    4d9a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4d9e:	18 16       	cp	r1, r24
    4da0:	4c f5       	brge	.+82     	; 0x4df4 <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	40 e2       	ldi	r20, 0x20	; 32
    4db0:	51 e4       	ldi	r21, 0x41	; 65
    4db2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4db6:	dc 01       	movw	r26, r24
    4db8:	cb 01       	movw	r24, r22
    4dba:	bc 01       	movw	r22, r24
    4dbc:	cd 01       	movw	r24, r26
    4dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	9e 83       	std	Y+6, r25	; 0x06
    4dc8:	8d 83       	std	Y+5, r24	; 0x05
    4dca:	0f c0       	rjmp	.+30     	; 0x4dea <CLCD_vSendFallingEdge+0x1be>
    4dcc:	88 ec       	ldi	r24, 0xC8	; 200
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	9c 83       	std	Y+4, r25	; 0x04
    4dd2:	8b 83       	std	Y+3, r24	; 0x03
    4dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    4dd8:	01 97       	sbiw	r24, 0x01	; 1
    4dda:	f1 f7       	brne	.-4      	; 0x4dd8 <CLCD_vSendFallingEdge+0x1ac>
    4ddc:	9c 83       	std	Y+4, r25	; 0x04
    4dde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4de0:	8d 81       	ldd	r24, Y+5	; 0x05
    4de2:	9e 81       	ldd	r25, Y+6	; 0x06
    4de4:	01 97       	sbiw	r24, 0x01	; 1
    4de6:	9e 83       	std	Y+6, r25	; 0x06
    4de8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dea:	8d 81       	ldd	r24, Y+5	; 0x05
    4dec:	9e 81       	ldd	r25, Y+6	; 0x06
    4dee:	00 97       	sbiw	r24, 0x00	; 0
    4df0:	69 f7       	brne	.-38     	; 0x4dcc <CLCD_vSendFallingEdge+0x1a0>
    4df2:	14 c0       	rjmp	.+40     	; 0x4e1c <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df4:	6f 81       	ldd	r22, Y+7	; 0x07
    4df6:	78 85       	ldd	r23, Y+8	; 0x08
    4df8:	89 85       	ldd	r24, Y+9	; 0x09
    4dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	9e 83       	std	Y+6, r25	; 0x06
    4e06:	8d 83       	std	Y+5, r24	; 0x05
    4e08:	8d 81       	ldd	r24, Y+5	; 0x05
    4e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e0c:	9a 83       	std	Y+2, r25	; 0x02
    4e0e:	89 83       	std	Y+1, r24	; 0x01
    4e10:	89 81       	ldd	r24, Y+1	; 0x01
    4e12:	9a 81       	ldd	r25, Y+2	; 0x02
    4e14:	01 97       	sbiw	r24, 0x01	; 1
    4e16:	f1 f7       	brne	.-4      	; 0x4e14 <CLCD_vSendFallingEdge+0x1e8>
    4e18:	9a 83       	std	Y+2, r25	; 0x02
    4e1a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    4e1c:	6c 96       	adiw	r28, 0x1c	; 28
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	f8 94       	cli
    4e22:	de bf       	out	0x3e, r29	; 62
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	cd bf       	out	0x3d, r28	; 61
    4e28:	cf 91       	pop	r28
    4e2a:	df 91       	pop	r29
    4e2c:	08 95       	ret

00004e2e <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    4e2e:	df 93       	push	r29
    4e30:	cf 93       	push	r28
    4e32:	cd b7       	in	r28, 0x3d	; 61
    4e34:	de b7       	in	r29, 0x3e	; 62
    4e36:	2e 97       	sbiw	r28, 0x0e	; 14
    4e38:	0f b6       	in	r0, 0x3f	; 63
    4e3a:	f8 94       	cli
    4e3c:	de bf       	out	0x3e, r29	; 62
    4e3e:	0f be       	out	0x3f, r0	; 63
    4e40:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    4e42:	81 e0       	ldi	r24, 0x01	; 1
    4e44:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <CLCD_vSendCommand>
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	a0 e2       	ldi	r26, 0x20	; 32
    4e4e:	b1 e4       	ldi	r27, 0x41	; 65
    4e50:	8b 87       	std	Y+11, r24	; 0x0b
    4e52:	9c 87       	std	Y+12, r25	; 0x0c
    4e54:	ad 87       	std	Y+13, r26	; 0x0d
    4e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e60:	20 e0       	ldi	r18, 0x00	; 0
    4e62:	30 e0       	ldi	r19, 0x00	; 0
    4e64:	4a ef       	ldi	r20, 0xFA	; 250
    4e66:	54 e4       	ldi	r21, 0x44	; 68
    4e68:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4e6c:	dc 01       	movw	r26, r24
    4e6e:	cb 01       	movw	r24, r22
    4e70:	8f 83       	std	Y+7, r24	; 0x07
    4e72:	98 87       	std	Y+8, r25	; 0x08
    4e74:	a9 87       	std	Y+9, r26	; 0x09
    4e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e78:	6f 81       	ldd	r22, Y+7	; 0x07
    4e7a:	78 85       	ldd	r23, Y+8	; 0x08
    4e7c:	89 85       	ldd	r24, Y+9	; 0x09
    4e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	40 e8       	ldi	r20, 0x80	; 128
    4e86:	5f e3       	ldi	r21, 0x3F	; 63
    4e88:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4e8c:	88 23       	and	r24, r24
    4e8e:	2c f4       	brge	.+10     	; 0x4e9a <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	9e 83       	std	Y+6, r25	; 0x06
    4e96:	8d 83       	std	Y+5, r24	; 0x05
    4e98:	3f c0       	rjmp	.+126    	; 0x4f18 <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    4e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9c:	78 85       	ldd	r23, Y+8	; 0x08
    4e9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	3f ef       	ldi	r19, 0xFF	; 255
    4ea6:	4f e7       	ldi	r20, 0x7F	; 127
    4ea8:	57 e4       	ldi	r21, 0x47	; 71
    4eaa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4eae:	18 16       	cp	r1, r24
    4eb0:	4c f5       	brge	.+82     	; 0x4f04 <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	40 e2       	ldi	r20, 0x20	; 32
    4ec0:	51 e4       	ldi	r21, 0x41	; 65
    4ec2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4ec6:	dc 01       	movw	r26, r24
    4ec8:	cb 01       	movw	r24, r22
    4eca:	bc 01       	movw	r22, r24
    4ecc:	cd 01       	movw	r24, r26
    4ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	9e 83       	std	Y+6, r25	; 0x06
    4ed8:	8d 83       	std	Y+5, r24	; 0x05
    4eda:	0f c0       	rjmp	.+30     	; 0x4efa <CLCD_vClearScreen+0xcc>
    4edc:	88 ec       	ldi	r24, 0xC8	; 200
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	9c 83       	std	Y+4, r25	; 0x04
    4ee2:	8b 83       	std	Y+3, r24	; 0x03
    4ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ee8:	01 97       	sbiw	r24, 0x01	; 1
    4eea:	f1 f7       	brne	.-4      	; 0x4ee8 <CLCD_vClearScreen+0xba>
    4eec:	9c 83       	std	Y+4, r25	; 0x04
    4eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef4:	01 97       	sbiw	r24, 0x01	; 1
    4ef6:	9e 83       	std	Y+6, r25	; 0x06
    4ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efa:	8d 81       	ldd	r24, Y+5	; 0x05
    4efc:	9e 81       	ldd	r25, Y+6	; 0x06
    4efe:	00 97       	sbiw	r24, 0x00	; 0
    4f00:	69 f7       	brne	.-38     	; 0x4edc <CLCD_vClearScreen+0xae>
    4f02:	14 c0       	rjmp	.+40     	; 0x4f2c <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f04:	6f 81       	ldd	r22, Y+7	; 0x07
    4f06:	78 85       	ldd	r23, Y+8	; 0x08
    4f08:	89 85       	ldd	r24, Y+9	; 0x09
    4f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f10:	dc 01       	movw	r26, r24
    4f12:	cb 01       	movw	r24, r22
    4f14:	9e 83       	std	Y+6, r25	; 0x06
    4f16:	8d 83       	std	Y+5, r24	; 0x05
    4f18:	8d 81       	ldd	r24, Y+5	; 0x05
    4f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f1c:	9a 83       	std	Y+2, r25	; 0x02
    4f1e:	89 83       	std	Y+1, r24	; 0x01
    4f20:	89 81       	ldd	r24, Y+1	; 0x01
    4f22:	9a 81       	ldd	r25, Y+2	; 0x02
    4f24:	01 97       	sbiw	r24, 0x01	; 1
    4f26:	f1 f7       	brne	.-4      	; 0x4f24 <CLCD_vClearScreen+0xf6>
    4f28:	9a 83       	std	Y+2, r25	; 0x02
    4f2a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    4f2c:	2e 96       	adiw	r28, 0x0e	; 14
    4f2e:	0f b6       	in	r0, 0x3f	; 63
    4f30:	f8 94       	cli
    4f32:	de bf       	out	0x3e, r29	; 62
    4f34:	0f be       	out	0x3f, r0	; 63
    4f36:	cd bf       	out	0x3d, r28	; 61
    4f38:	cf 91       	pop	r28
    4f3a:	df 91       	pop	r29
    4f3c:	08 95       	ret

00004f3e <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
    4f3e:	df 93       	push	r29
    4f40:	cf 93       	push	r28
    4f42:	00 d0       	rcall	.+0      	; 0x4f44 <CLCD_vSendString+0x6>
    4f44:	0f 92       	push	r0
    4f46:	cd b7       	in	r28, 0x3d	; 61
    4f48:	de b7       	in	r29, 0x3e	; 62
    4f4a:	9b 83       	std	Y+3, r25	; 0x03
    4f4c:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    4f4e:	19 82       	std	Y+1, r1	; 0x01
    4f50:	0e c0       	rjmp	.+28     	; 0x4f6e <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	28 2f       	mov	r18, r24
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	8a 81       	ldd	r24, Y+2	; 0x02
    4f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f5c:	fc 01       	movw	r30, r24
    4f5e:	e2 0f       	add	r30, r18
    4f60:	f3 1f       	adc	r31, r19
    4f62:	80 81       	ld	r24, Z
    4f64:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <CLCD_vSendData>
    LOC_u8Iterator++;
    4f68:	89 81       	ldd	r24, Y+1	; 0x01
    4f6a:	8f 5f       	subi	r24, 0xFF	; 255
    4f6c:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    4f6e:	89 81       	ldd	r24, Y+1	; 0x01
    4f70:	28 2f       	mov	r18, r24
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	8a 81       	ldd	r24, Y+2	; 0x02
    4f76:	9b 81       	ldd	r25, Y+3	; 0x03
    4f78:	fc 01       	movw	r30, r24
    4f7a:	e2 0f       	add	r30, r18
    4f7c:	f3 1f       	adc	r31, r19
    4f7e:	80 81       	ld	r24, Z
    4f80:	88 23       	and	r24, r24
    4f82:	39 f7       	brne	.-50     	; 0x4f52 <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    4f84:	0f 90       	pop	r0
    4f86:	0f 90       	pop	r0
    4f88:	0f 90       	pop	r0
    4f8a:	cf 91       	pop	r28
    4f8c:	df 91       	pop	r29
    4f8e:	08 95       	ret

00004f90 <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    4f90:	ef 92       	push	r14
    4f92:	ff 92       	push	r15
    4f94:	0f 93       	push	r16
    4f96:	1f 93       	push	r17
    4f98:	df 93       	push	r29
    4f9a:	cf 93       	push	r28
    4f9c:	cd b7       	in	r28, 0x3d	; 61
    4f9e:	de b7       	in	r29, 0x3e	; 62
    4fa0:	28 97       	sbiw	r28, 0x08	; 8
    4fa2:	0f b6       	in	r0, 0x3f	; 63
    4fa4:	f8 94       	cli
    4fa6:	de bf       	out	0x3e, r29	; 62
    4fa8:	0f be       	out	0x3f, r0	; 63
    4faa:	cd bf       	out	0x3d, r28	; 61
    4fac:	6d 83       	std	Y+5, r22	; 0x05
    4fae:	7e 83       	std	Y+6, r23	; 0x06
    4fb0:	8f 83       	std	Y+7, r24	; 0x07
    4fb2:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	a0 e0       	ldi	r26, 0x00	; 0
    4fba:	b0 e0       	ldi	r27, 0x00	; 0
    4fbc:	89 83       	std	Y+1, r24	; 0x01
    4fbe:	9a 83       	std	Y+2, r25	; 0x02
    4fc0:	ab 83       	std	Y+3, r26	; 0x03
    4fc2:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    4fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc8:	af 81       	ldd	r26, Y+7	; 0x07
    4fca:	b8 85       	ldd	r27, Y+8	; 0x08
    4fcc:	00 97       	sbiw	r24, 0x00	; 0
    4fce:	a1 05       	cpc	r26, r1
    4fd0:	b1 05       	cpc	r27, r1
    4fd2:	21 f4       	brne	.+8      	; 0x4fdc <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    4fd4:	80 e3       	ldi	r24, 0x30	; 48
    4fd6:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <CLCD_vSendData>
    4fda:	85 c0       	rjmp	.+266    	; 0x50e6 <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    4fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    4fde:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe0:	af 81       	ldd	r26, Y+7	; 0x07
    4fe2:	b8 85       	ldd	r27, Y+8	; 0x08
    4fe4:	bb 23       	and	r27, r27
    4fe6:	0c f0       	brlt	.+2      	; 0x4fea <CLCD_vSendIntNumber+0x5a>
    4fe8:	49 c0       	rjmp	.+146    	; 0x507c <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    4fea:	8d e2       	ldi	r24, 0x2D	; 45
    4fec:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    4ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff4:	af 81       	ldd	r26, Y+7	; 0x07
    4ff6:	b8 85       	ldd	r27, Y+8	; 0x08
    4ff8:	b0 95       	com	r27
    4ffa:	a0 95       	com	r26
    4ffc:	90 95       	com	r25
    4ffe:	81 95       	neg	r24
    5000:	9f 4f       	sbci	r25, 0xFF	; 255
    5002:	af 4f       	sbci	r26, 0xFF	; 255
    5004:	bf 4f       	sbci	r27, 0xFF	; 255
    5006:	8d 83       	std	Y+5, r24	; 0x05
    5008:	9e 83       	std	Y+6, r25	; 0x06
    500a:	af 83       	std	Y+7, r26	; 0x07
    500c:	b8 87       	std	Y+8, r27	; 0x08
    500e:	36 c0       	rjmp	.+108    	; 0x507c <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    5010:	89 81       	ldd	r24, Y+1	; 0x01
    5012:	9a 81       	ldd	r25, Y+2	; 0x02
    5014:	ab 81       	ldd	r26, Y+3	; 0x03
    5016:	bc 81       	ldd	r27, Y+4	; 0x04
    5018:	2a e0       	ldi	r18, 0x0A	; 10
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	40 e0       	ldi	r20, 0x00	; 0
    501e:	50 e0       	ldi	r21, 0x00	; 0
    5020:	bc 01       	movw	r22, r24
    5022:	cd 01       	movw	r24, r26
    5024:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__mulsi3>
    5028:	7b 01       	movw	r14, r22
    502a:	8c 01       	movw	r16, r24
    502c:	8d 81       	ldd	r24, Y+5	; 0x05
    502e:	9e 81       	ldd	r25, Y+6	; 0x06
    5030:	af 81       	ldd	r26, Y+7	; 0x07
    5032:	b8 85       	ldd	r27, Y+8	; 0x08
    5034:	2a e0       	ldi	r18, 0x0A	; 10
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	40 e0       	ldi	r20, 0x00	; 0
    503a:	50 e0       	ldi	r21, 0x00	; 0
    503c:	bc 01       	movw	r22, r24
    503e:	cd 01       	movw	r24, r26
    5040:	0e 94 aa 2c 	call	0x5954	; 0x5954 <__divmodsi4>
    5044:	dc 01       	movw	r26, r24
    5046:	cb 01       	movw	r24, r22
    5048:	8e 0d       	add	r24, r14
    504a:	9f 1d       	adc	r25, r15
    504c:	a0 1f       	adc	r26, r16
    504e:	b1 1f       	adc	r27, r17
    5050:	89 83       	std	Y+1, r24	; 0x01
    5052:	9a 83       	std	Y+2, r25	; 0x02
    5054:	ab 83       	std	Y+3, r26	; 0x03
    5056:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    5058:	8d 81       	ldd	r24, Y+5	; 0x05
    505a:	9e 81       	ldd	r25, Y+6	; 0x06
    505c:	af 81       	ldd	r26, Y+7	; 0x07
    505e:	b8 85       	ldd	r27, Y+8	; 0x08
    5060:	2a e0       	ldi	r18, 0x0A	; 10
    5062:	30 e0       	ldi	r19, 0x00	; 0
    5064:	40 e0       	ldi	r20, 0x00	; 0
    5066:	50 e0       	ldi	r21, 0x00	; 0
    5068:	bc 01       	movw	r22, r24
    506a:	cd 01       	movw	r24, r26
    506c:	0e 94 aa 2c 	call	0x5954	; 0x5954 <__divmodsi4>
    5070:	da 01       	movw	r26, r20
    5072:	c9 01       	movw	r24, r18
    5074:	8d 83       	std	Y+5, r24	; 0x05
    5076:	9e 83       	std	Y+6, r25	; 0x06
    5078:	af 83       	std	Y+7, r26	; 0x07
    507a:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    507c:	8d 81       	ldd	r24, Y+5	; 0x05
    507e:	9e 81       	ldd	r25, Y+6	; 0x06
    5080:	af 81       	ldd	r26, Y+7	; 0x07
    5082:	b8 85       	ldd	r27, Y+8	; 0x08
    5084:	00 97       	sbiw	r24, 0x00	; 0
    5086:	a1 05       	cpc	r26, r1
    5088:	b1 05       	cpc	r27, r1
    508a:	11 f6       	brne	.-124    	; 0x5010 <CLCD_vSendIntNumber+0x80>
    508c:	23 c0       	rjmp	.+70     	; 0x50d4 <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    508e:	89 81       	ldd	r24, Y+1	; 0x01
    5090:	9a 81       	ldd	r25, Y+2	; 0x02
    5092:	ab 81       	ldd	r26, Y+3	; 0x03
    5094:	bc 81       	ldd	r27, Y+4	; 0x04
    5096:	2a e0       	ldi	r18, 0x0A	; 10
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	40 e0       	ldi	r20, 0x00	; 0
    509c:	50 e0       	ldi	r21, 0x00	; 0
    509e:	bc 01       	movw	r22, r24
    50a0:	cd 01       	movw	r24, r26
    50a2:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    50a6:	dc 01       	movw	r26, r24
    50a8:	cb 01       	movw	r24, r22
    50aa:	80 5d       	subi	r24, 0xD0	; 208
    50ac:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    50b0:	89 81       	ldd	r24, Y+1	; 0x01
    50b2:	9a 81       	ldd	r25, Y+2	; 0x02
    50b4:	ab 81       	ldd	r26, Y+3	; 0x03
    50b6:	bc 81       	ldd	r27, Y+4	; 0x04
    50b8:	2a e0       	ldi	r18, 0x0A	; 10
    50ba:	30 e0       	ldi	r19, 0x00	; 0
    50bc:	40 e0       	ldi	r20, 0x00	; 0
    50be:	50 e0       	ldi	r21, 0x00	; 0
    50c0:	bc 01       	movw	r22, r24
    50c2:	cd 01       	movw	r24, r26
    50c4:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    50c8:	da 01       	movw	r26, r20
    50ca:	c9 01       	movw	r24, r18
    50cc:	89 83       	std	Y+1, r24	; 0x01
    50ce:	9a 83       	std	Y+2, r25	; 0x02
    50d0:	ab 83       	std	Y+3, r26	; 0x03
    50d2:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    50d4:	89 81       	ldd	r24, Y+1	; 0x01
    50d6:	9a 81       	ldd	r25, Y+2	; 0x02
    50d8:	ab 81       	ldd	r26, Y+3	; 0x03
    50da:	bc 81       	ldd	r27, Y+4	; 0x04
    50dc:	81 30       	cpi	r24, 0x01	; 1
    50de:	91 05       	cpc	r25, r1
    50e0:	a1 05       	cpc	r26, r1
    50e2:	b1 05       	cpc	r27, r1
    50e4:	a1 f6       	brne	.-88     	; 0x508e <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    50e6:	28 96       	adiw	r28, 0x08	; 8
    50e8:	0f b6       	in	r0, 0x3f	; 63
    50ea:	f8 94       	cli
    50ec:	de bf       	out	0x3e, r29	; 62
    50ee:	0f be       	out	0x3f, r0	; 63
    50f0:	cd bf       	out	0x3d, r28	; 61
    50f2:	cf 91       	pop	r28
    50f4:	df 91       	pop	r29
    50f6:	1f 91       	pop	r17
    50f8:	0f 91       	pop	r16
    50fa:	ff 90       	pop	r15
    50fc:	ef 90       	pop	r14
    50fe:	08 95       	ret

00005100 <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    5100:	af 92       	push	r10
    5102:	bf 92       	push	r11
    5104:	cf 92       	push	r12
    5106:	df 92       	push	r13
    5108:	ef 92       	push	r14
    510a:	ff 92       	push	r15
    510c:	0f 93       	push	r16
    510e:	1f 93       	push	r17
    5110:	df 93       	push	r29
    5112:	cf 93       	push	r28
    5114:	00 d0       	rcall	.+0      	; 0x5116 <CLCD_vSendFloatNumber+0x16>
    5116:	00 d0       	rcall	.+0      	; 0x5118 <CLCD_vSendFloatNumber+0x18>
    5118:	cd b7       	in	r28, 0x3d	; 61
    511a:	de b7       	in	r29, 0x3e	; 62
    511c:	69 83       	std	Y+1, r22	; 0x01
    511e:	7a 83       	std	Y+2, r23	; 0x02
    5120:	8b 83       	std	Y+3, r24	; 0x03
    5122:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    5124:	69 81       	ldd	r22, Y+1	; 0x01
    5126:	7a 81       	ldd	r23, Y+2	; 0x02
    5128:	8b 81       	ldd	r24, Y+3	; 0x03
    512a:	9c 81       	ldd	r25, Y+4	; 0x04
    512c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    5130:	dc 01       	movw	r26, r24
    5132:	cb 01       	movw	r24, r22
    5134:	bc 01       	movw	r22, r24
    5136:	cd 01       	movw	r24, r26
    5138:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    513c:	69 81       	ldd	r22, Y+1	; 0x01
    513e:	7a 81       	ldd	r23, Y+2	; 0x02
    5140:	8b 81       	ldd	r24, Y+3	; 0x03
    5142:	9c 81       	ldd	r25, Y+4	; 0x04
    5144:	20 e0       	ldi	r18, 0x00	; 0
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	40 e0       	ldi	r20, 0x00	; 0
    514a:	50 e0       	ldi	r21, 0x00	; 0
    514c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5150:	88 23       	and	r24, r24
    5152:	4c f4       	brge	.+18     	; 0x5166 <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    5154:	89 81       	ldd	r24, Y+1	; 0x01
    5156:	9a 81       	ldd	r25, Y+2	; 0x02
    5158:	ab 81       	ldd	r26, Y+3	; 0x03
    515a:	bc 81       	ldd	r27, Y+4	; 0x04
    515c:	b0 58       	subi	r27, 0x80	; 128
    515e:	89 83       	std	Y+1, r24	; 0x01
    5160:	9a 83       	std	Y+2, r25	; 0x02
    5162:	ab 83       	std	Y+3, r26	; 0x03
    5164:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    5166:	69 81       	ldd	r22, Y+1	; 0x01
    5168:	7a 81       	ldd	r23, Y+2	; 0x02
    516a:	8b 81       	ldd	r24, Y+3	; 0x03
    516c:	9c 81       	ldd	r25, Y+4	; 0x04
    516e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    5172:	dc 01       	movw	r26, r24
    5174:	cb 01       	movw	r24, r22
    5176:	bc 01       	movw	r22, r24
    5178:	cd 01       	movw	r24, r26
    517a:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    517e:	9b 01       	movw	r18, r22
    5180:	ac 01       	movw	r20, r24
    5182:	69 81       	ldd	r22, Y+1	; 0x01
    5184:	7a 81       	ldd	r23, Y+2	; 0x02
    5186:	8b 81       	ldd	r24, Y+3	; 0x03
    5188:	9c 81       	ldd	r25, Y+4	; 0x04
    518a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    518e:	dc 01       	movw	r26, r24
    5190:	cb 01       	movw	r24, r22
    5192:	89 83       	std	Y+1, r24	; 0x01
    5194:	9a 83       	std	Y+2, r25	; 0x02
    5196:	ab 83       	std	Y+3, r26	; 0x03
    5198:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    519a:	69 81       	ldd	r22, Y+1	; 0x01
    519c:	7a 81       	ldd	r23, Y+2	; 0x02
    519e:	8b 81       	ldd	r24, Y+3	; 0x03
    51a0:	9c 81       	ldd	r25, Y+4	; 0x04
    51a2:	20 e0       	ldi	r18, 0x00	; 0
    51a4:	30 e4       	ldi	r19, 0x40	; 64
    51a6:	4c e1       	ldi	r20, 0x1C	; 28
    51a8:	56 e4       	ldi	r21, 0x46	; 70
    51aa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    51ae:	dc 01       	movw	r26, r24
    51b0:	cb 01       	movw	r24, r22
    51b2:	89 83       	std	Y+1, r24	; 0x01
    51b4:	9a 83       	std	Y+2, r25	; 0x02
    51b6:	ab 83       	std	Y+3, r26	; 0x03
    51b8:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    51ba:	69 81       	ldd	r22, Y+1	; 0x01
    51bc:	7a 81       	ldd	r23, Y+2	; 0x02
    51be:	8b 81       	ldd	r24, Y+3	; 0x03
    51c0:	9c 81       	ldd	r25, Y+4	; 0x04
    51c2:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    51c6:	a2 2e       	mov	r10, r18
    51c8:	b3 2e       	mov	r11, r19
    51ca:	c4 2e       	mov	r12, r20
    51cc:	d5 2e       	mov	r13, r21
    51ce:	e6 2e       	mov	r14, r22
    51d0:	f7 2e       	mov	r15, r23
    51d2:	08 2f       	mov	r16, r24
    51d4:	19 2f       	mov	r17, r25
    51d6:	8a 2d       	mov	r24, r10
    51d8:	8b 29       	or	r24, r11
    51da:	8c 29       	or	r24, r12
    51dc:	8d 29       	or	r24, r13
    51de:	8e 29       	or	r24, r14
    51e0:	8f 29       	or	r24, r15
    51e2:	80 2b       	or	r24, r16
    51e4:	81 2b       	or	r24, r17
    51e6:	88 23       	and	r24, r24
    51e8:	79 f0       	breq	.+30     	; 0x5208 <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    51ea:	8e e2       	ldi	r24, 0x2E	; 46
    51ec:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    51f0:	69 81       	ldd	r22, Y+1	; 0x01
    51f2:	7a 81       	ldd	r23, Y+2	; 0x02
    51f4:	8b 81       	ldd	r24, Y+3	; 0x03
    51f6:	9c 81       	ldd	r25, Y+4	; 0x04
    51f8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    51fc:	dc 01       	movw	r26, r24
    51fe:	cb 01       	movw	r24, r22
    5200:	bc 01       	movw	r22, r24
    5202:	cd 01       	movw	r24, r26
    5204:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <CLCD_vSendIntNumber>
  }
}
    5208:	0f 90       	pop	r0
    520a:	0f 90       	pop	r0
    520c:	0f 90       	pop	r0
    520e:	0f 90       	pop	r0
    5210:	cf 91       	pop	r28
    5212:	df 91       	pop	r29
    5214:	1f 91       	pop	r17
    5216:	0f 91       	pop	r16
    5218:	ff 90       	pop	r15
    521a:	ef 90       	pop	r14
    521c:	df 90       	pop	r13
    521e:	cf 90       	pop	r12
    5220:	bf 90       	pop	r11
    5222:	af 90       	pop	r10
    5224:	08 95       	ret

00005226 <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    5226:	df 93       	push	r29
    5228:	cf 93       	push	r28
    522a:	cd b7       	in	r28, 0x3d	; 61
    522c:	de b7       	in	r29, 0x3e	; 62
    522e:	61 97       	sbiw	r28, 0x11	; 17
    5230:	0f b6       	in	r0, 0x3f	; 63
    5232:	f8 94       	cli
    5234:	de bf       	out	0x3e, r29	; 62
    5236:	0f be       	out	0x3f, r0	; 63
    5238:	cd bf       	out	0x3d, r28	; 61
    523a:	88 8b       	std	Y+16, r24	; 0x10
    523c:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_4) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_20))
    523e:	88 89       	ldd	r24, Y+16	; 0x10
    5240:	88 23       	and	r24, r24
    5242:	49 f0       	breq	.+18     	; 0x5256 <CLCD_vSetPosition+0x30>
    5244:	88 89       	ldd	r24, Y+16	; 0x10
    5246:	85 30       	cpi	r24, 0x05	; 5
    5248:	30 f4       	brcc	.+12     	; 0x5256 <CLCD_vSetPosition+0x30>
    524a:	89 89       	ldd	r24, Y+17	; 0x11
    524c:	88 23       	and	r24, r24
    524e:	19 f0       	breq	.+6      	; 0x5256 <CLCD_vSetPosition+0x30>
    5250:	89 89       	ldd	r24, Y+17	; 0x11
    5252:	85 31       	cpi	r24, 0x15	; 21
    5254:	18 f0       	brcs	.+6      	; 0x525c <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    5256:	80 e8       	ldi	r24, 0x80	; 128
    5258:	8f 87       	std	Y+15, r24	; 0x0f
    525a:	1b c0       	rjmp	.+54     	; 0x5292 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    525c:	88 89       	ldd	r24, Y+16	; 0x10
    525e:	81 30       	cpi	r24, 0x01	; 1
    5260:	21 f4       	brne	.+8      	; 0x526a <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    5262:	89 89       	ldd	r24, Y+17	; 0x11
    5264:	81 58       	subi	r24, 0x81	; 129
    5266:	8f 87       	std	Y+15, r24	; 0x0f
    5268:	14 c0       	rjmp	.+40     	; 0x5292 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    526a:	88 89       	ldd	r24, Y+16	; 0x10
    526c:	82 30       	cpi	r24, 0x02	; 2
    526e:	21 f4       	brne	.+8      	; 0x5278 <CLCD_vSetPosition+0x52>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    5270:	89 89       	ldd	r24, Y+17	; 0x11
    5272:	81 54       	subi	r24, 0x41	; 65
    5274:	8f 87       	std	Y+15, r24	; 0x0f
    5276:	0d c0       	rjmp	.+26     	; 0x5292 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_3)
    5278:	88 89       	ldd	r24, Y+16	; 0x10
    527a:	83 30       	cpi	r24, 0x03	; 3
    527c:	21 f4       	brne	.+8      	; 0x5286 <CLCD_vSetPosition+0x60>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (20) + (Copy_u8Col - 1));
    527e:	89 89       	ldd	r24, Y+17	; 0x11
    5280:	8d 56       	subi	r24, 0x6D	; 109
    5282:	8f 87       	std	Y+15, r24	; 0x0f
    5284:	06 c0       	rjmp	.+12     	; 0x5292 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_4)
    5286:	88 89       	ldd	r24, Y+16	; 0x10
    5288:	84 30       	cpi	r24, 0x04	; 4
    528a:	19 f4       	brne	.+6      	; 0x5292 <CLCD_vSetPosition+0x6c>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (84) + (Copy_u8Col - 1));
    528c:	89 89       	ldd	r24, Y+17	; 0x11
    528e:	8d 52       	subi	r24, 0x2D	; 45
    5290:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    5292:	8f 85       	ldd	r24, Y+15	; 0x0f
    5294:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <CLCD_vSendCommand>
    5298:	80 e0       	ldi	r24, 0x00	; 0
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	a0 e8       	ldi	r26, 0x80	; 128
    529e:	bf e3       	ldi	r27, 0x3F	; 63
    52a0:	8b 87       	std	Y+11, r24	; 0x0b
    52a2:	9c 87       	std	Y+12, r25	; 0x0c
    52a4:	ad 87       	std	Y+13, r26	; 0x0d
    52a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    52aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    52ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    52ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    52b0:	20 e0       	ldi	r18, 0x00	; 0
    52b2:	30 e0       	ldi	r19, 0x00	; 0
    52b4:	4a ef       	ldi	r20, 0xFA	; 250
    52b6:	54 e4       	ldi	r21, 0x44	; 68
    52b8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    52bc:	dc 01       	movw	r26, r24
    52be:	cb 01       	movw	r24, r22
    52c0:	8f 83       	std	Y+7, r24	; 0x07
    52c2:	98 87       	std	Y+8, r25	; 0x08
    52c4:	a9 87       	std	Y+9, r26	; 0x09
    52c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52c8:	6f 81       	ldd	r22, Y+7	; 0x07
    52ca:	78 85       	ldd	r23, Y+8	; 0x08
    52cc:	89 85       	ldd	r24, Y+9	; 0x09
    52ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	30 e0       	ldi	r19, 0x00	; 0
    52d4:	40 e8       	ldi	r20, 0x80	; 128
    52d6:	5f e3       	ldi	r21, 0x3F	; 63
    52d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    52dc:	88 23       	and	r24, r24
    52de:	2c f4       	brge	.+10     	; 0x52ea <CLCD_vSetPosition+0xc4>
		__ticks = 1;
    52e0:	81 e0       	ldi	r24, 0x01	; 1
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	9e 83       	std	Y+6, r25	; 0x06
    52e6:	8d 83       	std	Y+5, r24	; 0x05
    52e8:	3f c0       	rjmp	.+126    	; 0x5368 <CLCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    52ea:	6f 81       	ldd	r22, Y+7	; 0x07
    52ec:	78 85       	ldd	r23, Y+8	; 0x08
    52ee:	89 85       	ldd	r24, Y+9	; 0x09
    52f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52f2:	20 e0       	ldi	r18, 0x00	; 0
    52f4:	3f ef       	ldi	r19, 0xFF	; 255
    52f6:	4f e7       	ldi	r20, 0x7F	; 127
    52f8:	57 e4       	ldi	r21, 0x47	; 71
    52fa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    52fe:	18 16       	cp	r1, r24
    5300:	4c f5       	brge	.+82     	; 0x5354 <CLCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5302:	6b 85       	ldd	r22, Y+11	; 0x0b
    5304:	7c 85       	ldd	r23, Y+12	; 0x0c
    5306:	8d 85       	ldd	r24, Y+13	; 0x0d
    5308:	9e 85       	ldd	r25, Y+14	; 0x0e
    530a:	20 e0       	ldi	r18, 0x00	; 0
    530c:	30 e0       	ldi	r19, 0x00	; 0
    530e:	40 e2       	ldi	r20, 0x20	; 32
    5310:	51 e4       	ldi	r21, 0x41	; 65
    5312:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5316:	dc 01       	movw	r26, r24
    5318:	cb 01       	movw	r24, r22
    531a:	bc 01       	movw	r22, r24
    531c:	cd 01       	movw	r24, r26
    531e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5322:	dc 01       	movw	r26, r24
    5324:	cb 01       	movw	r24, r22
    5326:	9e 83       	std	Y+6, r25	; 0x06
    5328:	8d 83       	std	Y+5, r24	; 0x05
    532a:	0f c0       	rjmp	.+30     	; 0x534a <CLCD_vSetPosition+0x124>
    532c:	88 ec       	ldi	r24, 0xC8	; 200
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	9c 83       	std	Y+4, r25	; 0x04
    5332:	8b 83       	std	Y+3, r24	; 0x03
    5334:	8b 81       	ldd	r24, Y+3	; 0x03
    5336:	9c 81       	ldd	r25, Y+4	; 0x04
    5338:	01 97       	sbiw	r24, 0x01	; 1
    533a:	f1 f7       	brne	.-4      	; 0x5338 <CLCD_vSetPosition+0x112>
    533c:	9c 83       	std	Y+4, r25	; 0x04
    533e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5340:	8d 81       	ldd	r24, Y+5	; 0x05
    5342:	9e 81       	ldd	r25, Y+6	; 0x06
    5344:	01 97       	sbiw	r24, 0x01	; 1
    5346:	9e 83       	std	Y+6, r25	; 0x06
    5348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    534a:	8d 81       	ldd	r24, Y+5	; 0x05
    534c:	9e 81       	ldd	r25, Y+6	; 0x06
    534e:	00 97       	sbiw	r24, 0x00	; 0
    5350:	69 f7       	brne	.-38     	; 0x532c <CLCD_vSetPosition+0x106>
    5352:	14 c0       	rjmp	.+40     	; 0x537c <CLCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5354:	6f 81       	ldd	r22, Y+7	; 0x07
    5356:	78 85       	ldd	r23, Y+8	; 0x08
    5358:	89 85       	ldd	r24, Y+9	; 0x09
    535a:	9a 85       	ldd	r25, Y+10	; 0x0a
    535c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5360:	dc 01       	movw	r26, r24
    5362:	cb 01       	movw	r24, r22
    5364:	9e 83       	std	Y+6, r25	; 0x06
    5366:	8d 83       	std	Y+5, r24	; 0x05
    5368:	8d 81       	ldd	r24, Y+5	; 0x05
    536a:	9e 81       	ldd	r25, Y+6	; 0x06
    536c:	9a 83       	std	Y+2, r25	; 0x02
    536e:	89 83       	std	Y+1, r24	; 0x01
    5370:	89 81       	ldd	r24, Y+1	; 0x01
    5372:	9a 81       	ldd	r25, Y+2	; 0x02
    5374:	01 97       	sbiw	r24, 0x01	; 1
    5376:	f1 f7       	brne	.-4      	; 0x5374 <CLCD_vSetPosition+0x14e>
    5378:	9a 83       	std	Y+2, r25	; 0x02
    537a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    537c:	61 96       	adiw	r28, 0x11	; 17
    537e:	0f b6       	in	r0, 0x3f	; 63
    5380:	f8 94       	cli
    5382:	de bf       	out	0x3e, r29	; 62
    5384:	0f be       	out	0x3f, r0	; 63
    5386:	cd bf       	out	0x3d, r28	; 61
    5388:	cf 91       	pop	r28
    538a:	df 91       	pop	r29
    538c:	08 95       	ret

0000538e <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    538e:	df 93       	push	r29
    5390:	cf 93       	push	r28
    5392:	00 d0       	rcall	.+0      	; 0x5394 <CLCD_vSendExtraChar+0x6>
    5394:	0f 92       	push	r0
    5396:	cd b7       	in	r28, 0x3d	; 61
    5398:	de b7       	in	r29, 0x3e	; 62
    539a:	8a 83       	std	Y+2, r24	; 0x02
    539c:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    539e:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    53a0:	80 e4       	ldi	r24, 0x40	; 64
    53a2:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    53a6:	19 82       	std	Y+1, r1	; 0x01
    53a8:	0c c0       	rjmp	.+24     	; 0x53c2 <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    53aa:	89 81       	ldd	r24, Y+1	; 0x01
    53ac:	88 2f       	mov	r24, r24
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	fc 01       	movw	r30, r24
    53b2:	e3 57       	subi	r30, 0x73	; 115
    53b4:	fe 4f       	sbci	r31, 0xFE	; 254
    53b6:	80 81       	ld	r24, Z
    53b8:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    53bc:	89 81       	ldd	r24, Y+1	; 0x01
    53be:	8f 5f       	subi	r24, 0xFF	; 255
    53c0:	89 83       	std	Y+1, r24	; 0x01
    53c2:	89 81       	ldd	r24, Y+1	; 0x01
    53c4:	80 34       	cpi	r24, 0x40	; 64
    53c6:	88 f3       	brcs	.-30     	; 0x53aa <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    53c8:	8a 81       	ldd	r24, Y+2	; 0x02
    53ca:	6b 81       	ldd	r22, Y+3	; 0x03
    53cc:	0e 94 13 29 	call	0x5226	; 0x5226 <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    53d0:	19 82       	std	Y+1, r1	; 0x01
    53d2:	06 c0       	rjmp	.+12     	; 0x53e0 <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    53d4:	89 81       	ldd	r24, Y+1	; 0x01
    53d6:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    53da:	89 81       	ldd	r24, Y+1	; 0x01
    53dc:	8f 5f       	subi	r24, 0xFF	; 255
    53de:	89 83       	std	Y+1, r24	; 0x01
    53e0:	89 81       	ldd	r24, Y+1	; 0x01
    53e2:	88 30       	cpi	r24, 0x08	; 8
    53e4:	b8 f3       	brcs	.-18     	; 0x53d4 <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    53e6:	0f 90       	pop	r0
    53e8:	0f 90       	pop	r0
    53ea:	0f 90       	pop	r0
    53ec:	cf 91       	pop	r28
    53ee:	df 91       	pop	r29
    53f0:	08 95       	ret

000053f2 <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    53f2:	df 93       	push	r29
    53f4:	cf 93       	push	r28
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
    53fa:	2e 97       	sbiw	r28, 0x0e	; 14
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	f8 94       	cli
    5400:	de bf       	out	0x3e, r29	; 62
    5402:	0f be       	out	0x3f, r0	; 63
    5404:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    5406:	8c e1       	ldi	r24, 0x1C	; 28
    5408:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <CLCD_vSendCommand>
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	a0 e8       	ldi	r26, 0x80	; 128
    5412:	bf e3       	ldi	r27, 0x3F	; 63
    5414:	8b 87       	std	Y+11, r24	; 0x0b
    5416:	9c 87       	std	Y+12, r25	; 0x0c
    5418:	ad 87       	std	Y+13, r26	; 0x0d
    541a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    541c:	6b 85       	ldd	r22, Y+11	; 0x0b
    541e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5420:	8d 85       	ldd	r24, Y+13	; 0x0d
    5422:	9e 85       	ldd	r25, Y+14	; 0x0e
    5424:	20 e0       	ldi	r18, 0x00	; 0
    5426:	30 e0       	ldi	r19, 0x00	; 0
    5428:	4a ef       	ldi	r20, 0xFA	; 250
    542a:	54 e4       	ldi	r21, 0x44	; 68
    542c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5430:	dc 01       	movw	r26, r24
    5432:	cb 01       	movw	r24, r22
    5434:	8f 83       	std	Y+7, r24	; 0x07
    5436:	98 87       	std	Y+8, r25	; 0x08
    5438:	a9 87       	std	Y+9, r26	; 0x09
    543a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    543c:	6f 81       	ldd	r22, Y+7	; 0x07
    543e:	78 85       	ldd	r23, Y+8	; 0x08
    5440:	89 85       	ldd	r24, Y+9	; 0x09
    5442:	9a 85       	ldd	r25, Y+10	; 0x0a
    5444:	20 e0       	ldi	r18, 0x00	; 0
    5446:	30 e0       	ldi	r19, 0x00	; 0
    5448:	40 e8       	ldi	r20, 0x80	; 128
    544a:	5f e3       	ldi	r21, 0x3F	; 63
    544c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5450:	88 23       	and	r24, r24
    5452:	2c f4       	brge	.+10     	; 0x545e <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    5454:	81 e0       	ldi	r24, 0x01	; 1
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	9e 83       	std	Y+6, r25	; 0x06
    545a:	8d 83       	std	Y+5, r24	; 0x05
    545c:	3f c0       	rjmp	.+126    	; 0x54dc <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    545e:	6f 81       	ldd	r22, Y+7	; 0x07
    5460:	78 85       	ldd	r23, Y+8	; 0x08
    5462:	89 85       	ldd	r24, Y+9	; 0x09
    5464:	9a 85       	ldd	r25, Y+10	; 0x0a
    5466:	20 e0       	ldi	r18, 0x00	; 0
    5468:	3f ef       	ldi	r19, 0xFF	; 255
    546a:	4f e7       	ldi	r20, 0x7F	; 127
    546c:	57 e4       	ldi	r21, 0x47	; 71
    546e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5472:	18 16       	cp	r1, r24
    5474:	4c f5       	brge	.+82     	; 0x54c8 <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5476:	6b 85       	ldd	r22, Y+11	; 0x0b
    5478:	7c 85       	ldd	r23, Y+12	; 0x0c
    547a:	8d 85       	ldd	r24, Y+13	; 0x0d
    547c:	9e 85       	ldd	r25, Y+14	; 0x0e
    547e:	20 e0       	ldi	r18, 0x00	; 0
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	40 e2       	ldi	r20, 0x20	; 32
    5484:	51 e4       	ldi	r21, 0x41	; 65
    5486:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	bc 01       	movw	r22, r24
    5490:	cd 01       	movw	r24, r26
    5492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5496:	dc 01       	movw	r26, r24
    5498:	cb 01       	movw	r24, r22
    549a:	9e 83       	std	Y+6, r25	; 0x06
    549c:	8d 83       	std	Y+5, r24	; 0x05
    549e:	0f c0       	rjmp	.+30     	; 0x54be <CLCD_voidShiftDisplayRight+0xcc>
    54a0:	88 ec       	ldi	r24, 0xC8	; 200
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	9c 83       	std	Y+4, r25	; 0x04
    54a6:	8b 83       	std	Y+3, r24	; 0x03
    54a8:	8b 81       	ldd	r24, Y+3	; 0x03
    54aa:	9c 81       	ldd	r25, Y+4	; 0x04
    54ac:	01 97       	sbiw	r24, 0x01	; 1
    54ae:	f1 f7       	brne	.-4      	; 0x54ac <CLCD_voidShiftDisplayRight+0xba>
    54b0:	9c 83       	std	Y+4, r25	; 0x04
    54b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54b4:	8d 81       	ldd	r24, Y+5	; 0x05
    54b6:	9e 81       	ldd	r25, Y+6	; 0x06
    54b8:	01 97       	sbiw	r24, 0x01	; 1
    54ba:	9e 83       	std	Y+6, r25	; 0x06
    54bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54be:	8d 81       	ldd	r24, Y+5	; 0x05
    54c0:	9e 81       	ldd	r25, Y+6	; 0x06
    54c2:	00 97       	sbiw	r24, 0x00	; 0
    54c4:	69 f7       	brne	.-38     	; 0x54a0 <CLCD_voidShiftDisplayRight+0xae>
    54c6:	14 c0       	rjmp	.+40     	; 0x54f0 <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54c8:	6f 81       	ldd	r22, Y+7	; 0x07
    54ca:	78 85       	ldd	r23, Y+8	; 0x08
    54cc:	89 85       	ldd	r24, Y+9	; 0x09
    54ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    54d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	9e 83       	std	Y+6, r25	; 0x06
    54da:	8d 83       	std	Y+5, r24	; 0x05
    54dc:	8d 81       	ldd	r24, Y+5	; 0x05
    54de:	9e 81       	ldd	r25, Y+6	; 0x06
    54e0:	9a 83       	std	Y+2, r25	; 0x02
    54e2:	89 83       	std	Y+1, r24	; 0x01
    54e4:	89 81       	ldd	r24, Y+1	; 0x01
    54e6:	9a 81       	ldd	r25, Y+2	; 0x02
    54e8:	01 97       	sbiw	r24, 0x01	; 1
    54ea:	f1 f7       	brne	.-4      	; 0x54e8 <CLCD_voidShiftDisplayRight+0xf6>
    54ec:	9a 83       	std	Y+2, r25	; 0x02
    54ee:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    54f0:	2e 96       	adiw	r28, 0x0e	; 14
    54f2:	0f b6       	in	r0, 0x3f	; 63
    54f4:	f8 94       	cli
    54f6:	de bf       	out	0x3e, r29	; 62
    54f8:	0f be       	out	0x3f, r0	; 63
    54fa:	cd bf       	out	0x3d, r28	; 61
    54fc:	cf 91       	pop	r28
    54fe:	df 91       	pop	r29
    5500:	08 95       	ret

00005502 <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    5502:	df 93       	push	r29
    5504:	cf 93       	push	r28
    5506:	cd b7       	in	r28, 0x3d	; 61
    5508:	de b7       	in	r29, 0x3e	; 62
    550a:	2e 97       	sbiw	r28, 0x0e	; 14
    550c:	0f b6       	in	r0, 0x3f	; 63
    550e:	f8 94       	cli
    5510:	de bf       	out	0x3e, r29	; 62
    5512:	0f be       	out	0x3f, r0	; 63
    5514:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    5516:	88 e1       	ldi	r24, 0x18	; 24
    5518:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <CLCD_vSendCommand>
    551c:	80 e0       	ldi	r24, 0x00	; 0
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	a0 e8       	ldi	r26, 0x80	; 128
    5522:	bf e3       	ldi	r27, 0x3F	; 63
    5524:	8b 87       	std	Y+11, r24	; 0x0b
    5526:	9c 87       	std	Y+12, r25	; 0x0c
    5528:	ad 87       	std	Y+13, r26	; 0x0d
    552a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    552c:	6b 85       	ldd	r22, Y+11	; 0x0b
    552e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5530:	8d 85       	ldd	r24, Y+13	; 0x0d
    5532:	9e 85       	ldd	r25, Y+14	; 0x0e
    5534:	20 e0       	ldi	r18, 0x00	; 0
    5536:	30 e0       	ldi	r19, 0x00	; 0
    5538:	4a ef       	ldi	r20, 0xFA	; 250
    553a:	54 e4       	ldi	r21, 0x44	; 68
    553c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5540:	dc 01       	movw	r26, r24
    5542:	cb 01       	movw	r24, r22
    5544:	8f 83       	std	Y+7, r24	; 0x07
    5546:	98 87       	std	Y+8, r25	; 0x08
    5548:	a9 87       	std	Y+9, r26	; 0x09
    554a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    554c:	6f 81       	ldd	r22, Y+7	; 0x07
    554e:	78 85       	ldd	r23, Y+8	; 0x08
    5550:	89 85       	ldd	r24, Y+9	; 0x09
    5552:	9a 85       	ldd	r25, Y+10	; 0x0a
    5554:	20 e0       	ldi	r18, 0x00	; 0
    5556:	30 e0       	ldi	r19, 0x00	; 0
    5558:	40 e8       	ldi	r20, 0x80	; 128
    555a:	5f e3       	ldi	r21, 0x3F	; 63
    555c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5560:	88 23       	and	r24, r24
    5562:	2c f4       	brge	.+10     	; 0x556e <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    5564:	81 e0       	ldi	r24, 0x01	; 1
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	9e 83       	std	Y+6, r25	; 0x06
    556a:	8d 83       	std	Y+5, r24	; 0x05
    556c:	3f c0       	rjmp	.+126    	; 0x55ec <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    556e:	6f 81       	ldd	r22, Y+7	; 0x07
    5570:	78 85       	ldd	r23, Y+8	; 0x08
    5572:	89 85       	ldd	r24, Y+9	; 0x09
    5574:	9a 85       	ldd	r25, Y+10	; 0x0a
    5576:	20 e0       	ldi	r18, 0x00	; 0
    5578:	3f ef       	ldi	r19, 0xFF	; 255
    557a:	4f e7       	ldi	r20, 0x7F	; 127
    557c:	57 e4       	ldi	r21, 0x47	; 71
    557e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5582:	18 16       	cp	r1, r24
    5584:	4c f5       	brge	.+82     	; 0x55d8 <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5586:	6b 85       	ldd	r22, Y+11	; 0x0b
    5588:	7c 85       	ldd	r23, Y+12	; 0x0c
    558a:	8d 85       	ldd	r24, Y+13	; 0x0d
    558c:	9e 85       	ldd	r25, Y+14	; 0x0e
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	40 e2       	ldi	r20, 0x20	; 32
    5594:	51 e4       	ldi	r21, 0x41	; 65
    5596:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    559a:	dc 01       	movw	r26, r24
    559c:	cb 01       	movw	r24, r22
    559e:	bc 01       	movw	r22, r24
    55a0:	cd 01       	movw	r24, r26
    55a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55a6:	dc 01       	movw	r26, r24
    55a8:	cb 01       	movw	r24, r22
    55aa:	9e 83       	std	Y+6, r25	; 0x06
    55ac:	8d 83       	std	Y+5, r24	; 0x05
    55ae:	0f c0       	rjmp	.+30     	; 0x55ce <CLCD_voidShiftDisplayLeft+0xcc>
    55b0:	88 ec       	ldi	r24, 0xC8	; 200
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	9c 83       	std	Y+4, r25	; 0x04
    55b6:	8b 83       	std	Y+3, r24	; 0x03
    55b8:	8b 81       	ldd	r24, Y+3	; 0x03
    55ba:	9c 81       	ldd	r25, Y+4	; 0x04
    55bc:	01 97       	sbiw	r24, 0x01	; 1
    55be:	f1 f7       	brne	.-4      	; 0x55bc <CLCD_voidShiftDisplayLeft+0xba>
    55c0:	9c 83       	std	Y+4, r25	; 0x04
    55c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55c4:	8d 81       	ldd	r24, Y+5	; 0x05
    55c6:	9e 81       	ldd	r25, Y+6	; 0x06
    55c8:	01 97       	sbiw	r24, 0x01	; 1
    55ca:	9e 83       	std	Y+6, r25	; 0x06
    55cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55ce:	8d 81       	ldd	r24, Y+5	; 0x05
    55d0:	9e 81       	ldd	r25, Y+6	; 0x06
    55d2:	00 97       	sbiw	r24, 0x00	; 0
    55d4:	69 f7       	brne	.-38     	; 0x55b0 <CLCD_voidShiftDisplayLeft+0xae>
    55d6:	14 c0       	rjmp	.+40     	; 0x5600 <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55d8:	6f 81       	ldd	r22, Y+7	; 0x07
    55da:	78 85       	ldd	r23, Y+8	; 0x08
    55dc:	89 85       	ldd	r24, Y+9	; 0x09
    55de:	9a 85       	ldd	r25, Y+10	; 0x0a
    55e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55e4:	dc 01       	movw	r26, r24
    55e6:	cb 01       	movw	r24, r22
    55e8:	9e 83       	std	Y+6, r25	; 0x06
    55ea:	8d 83       	std	Y+5, r24	; 0x05
    55ec:	8d 81       	ldd	r24, Y+5	; 0x05
    55ee:	9e 81       	ldd	r25, Y+6	; 0x06
    55f0:	9a 83       	std	Y+2, r25	; 0x02
    55f2:	89 83       	std	Y+1, r24	; 0x01
    55f4:	89 81       	ldd	r24, Y+1	; 0x01
    55f6:	9a 81       	ldd	r25, Y+2	; 0x02
    55f8:	01 97       	sbiw	r24, 0x01	; 1
    55fa:	f1 f7       	brne	.-4      	; 0x55f8 <CLCD_voidShiftDisplayLeft+0xf6>
    55fc:	9a 83       	std	Y+2, r25	; 0x02
    55fe:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    5600:	2e 96       	adiw	r28, 0x0e	; 14
    5602:	0f b6       	in	r0, 0x3f	; 63
    5604:	f8 94       	cli
    5606:	de bf       	out	0x3e, r29	; 62
    5608:	0f be       	out	0x3f, r0	; 63
    560a:	cd bf       	out	0x3d, r28	; 61
    560c:	cf 91       	pop	r28
    560e:	df 91       	pop	r29
    5610:	08 95       	ret

00005612 <main>:

void Clear_Char     (void);
void Set_Password(void);

void main(void)
{
    5612:	df 93       	push	r29
    5614:	cf 93       	push	r28
    5616:	cd b7       	in	r28, 0x3d	; 61
    5618:	de b7       	in	r29, 0x3e	; 62
    561a:	2e 97       	sbiw	r28, 0x0e	; 14
    561c:	0f b6       	in	r0, 0x3f	; 63
    561e:	f8 94       	cli
    5620:	de bf       	out	0x3e, r29	; 62
    5622:	0f be       	out	0x3f, r0	; 63
    5624:	cd bf       	out	0x3d, r28	; 61
	/* Initialize CLCD On PORTB And 4Bit Mode And Connected on Low Nibble */
	CLCD_vInit();
    5626:	0e 94 37 23 	call	0x466e	; 0x466e <CLCD_vInit>

	/* Initialize KPD On PORTC */
	KPD_vInit();
    562a:	0e 94 2e 22 	call	0x445c	; 0x445c <KPD_vInit>

	/* Initialize SPI */
	SPI_vInit();
    562e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <SPI_vInit>

	/* Initialize USART to communicate with laptop */
	USART_vInit();
    5632:	0e 94 10 09 	call	0x1220	; 0x1220 <USART_vInit>

	CLCD_vSetPosition(1, 7);
    5636:	81 e0       	ldi	r24, 0x01	; 1
    5638:	67 e0       	ldi	r22, 0x07	; 7
    563a:	0e 94 13 29 	call	0x5226	; 0x5226 <CLCD_vSetPosition>
	CLCD_vSendString("Welcome");
    563e:	80 e6       	ldi	r24, 0x60	; 96
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <CLCD_vSendString>
    5646:	80 e0       	ldi	r24, 0x00	; 0
    5648:	90 e4       	ldi	r25, 0x40	; 64
    564a:	ac e9       	ldi	r26, 0x9C	; 156
    564c:	b5 e4       	ldi	r27, 0x45	; 69
    564e:	8b 87       	std	Y+11, r24	; 0x0b
    5650:	9c 87       	std	Y+12, r25	; 0x0c
    5652:	ad 87       	std	Y+13, r26	; 0x0d
    5654:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5656:	6b 85       	ldd	r22, Y+11	; 0x0b
    5658:	7c 85       	ldd	r23, Y+12	; 0x0c
    565a:	8d 85       	ldd	r24, Y+13	; 0x0d
    565c:	9e 85       	ldd	r25, Y+14	; 0x0e
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	4a ef       	ldi	r20, 0xFA	; 250
    5664:	54 e4       	ldi	r21, 0x44	; 68
    5666:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    566a:	dc 01       	movw	r26, r24
    566c:	cb 01       	movw	r24, r22
    566e:	8f 83       	std	Y+7, r24	; 0x07
    5670:	98 87       	std	Y+8, r25	; 0x08
    5672:	a9 87       	std	Y+9, r26	; 0x09
    5674:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5676:	6f 81       	ldd	r22, Y+7	; 0x07
    5678:	78 85       	ldd	r23, Y+8	; 0x08
    567a:	89 85       	ldd	r24, Y+9	; 0x09
    567c:	9a 85       	ldd	r25, Y+10	; 0x0a
    567e:	20 e0       	ldi	r18, 0x00	; 0
    5680:	30 e0       	ldi	r19, 0x00	; 0
    5682:	40 e8       	ldi	r20, 0x80	; 128
    5684:	5f e3       	ldi	r21, 0x3F	; 63
    5686:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    568a:	88 23       	and	r24, r24
    568c:	2c f4       	brge	.+10     	; 0x5698 <main+0x86>
		__ticks = 1;
    568e:	81 e0       	ldi	r24, 0x01	; 1
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	9e 83       	std	Y+6, r25	; 0x06
    5694:	8d 83       	std	Y+5, r24	; 0x05
    5696:	3f c0       	rjmp	.+126    	; 0x5716 <main+0x104>
	else if (__tmp > 65535)
    5698:	6f 81       	ldd	r22, Y+7	; 0x07
    569a:	78 85       	ldd	r23, Y+8	; 0x08
    569c:	89 85       	ldd	r24, Y+9	; 0x09
    569e:	9a 85       	ldd	r25, Y+10	; 0x0a
    56a0:	20 e0       	ldi	r18, 0x00	; 0
    56a2:	3f ef       	ldi	r19, 0xFF	; 255
    56a4:	4f e7       	ldi	r20, 0x7F	; 127
    56a6:	57 e4       	ldi	r21, 0x47	; 71
    56a8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    56ac:	18 16       	cp	r1, r24
    56ae:	4c f5       	brge	.+82     	; 0x5702 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    56b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    56b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    56b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    56b8:	20 e0       	ldi	r18, 0x00	; 0
    56ba:	30 e0       	ldi	r19, 0x00	; 0
    56bc:	40 e2       	ldi	r20, 0x20	; 32
    56be:	51 e4       	ldi	r21, 0x41	; 65
    56c0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    56c4:	dc 01       	movw	r26, r24
    56c6:	cb 01       	movw	r24, r22
    56c8:	bc 01       	movw	r22, r24
    56ca:	cd 01       	movw	r24, r26
    56cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d0:	dc 01       	movw	r26, r24
    56d2:	cb 01       	movw	r24, r22
    56d4:	9e 83       	std	Y+6, r25	; 0x06
    56d6:	8d 83       	std	Y+5, r24	; 0x05
    56d8:	0f c0       	rjmp	.+30     	; 0x56f8 <main+0xe6>
    56da:	88 ec       	ldi	r24, 0xC8	; 200
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	9c 83       	std	Y+4, r25	; 0x04
    56e0:	8b 83       	std	Y+3, r24	; 0x03
    56e2:	8b 81       	ldd	r24, Y+3	; 0x03
    56e4:	9c 81       	ldd	r25, Y+4	; 0x04
    56e6:	01 97       	sbiw	r24, 0x01	; 1
    56e8:	f1 f7       	brne	.-4      	; 0x56e6 <main+0xd4>
    56ea:	9c 83       	std	Y+4, r25	; 0x04
    56ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ee:	8d 81       	ldd	r24, Y+5	; 0x05
    56f0:	9e 81       	ldd	r25, Y+6	; 0x06
    56f2:	01 97       	sbiw	r24, 0x01	; 1
    56f4:	9e 83       	std	Y+6, r25	; 0x06
    56f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56f8:	8d 81       	ldd	r24, Y+5	; 0x05
    56fa:	9e 81       	ldd	r25, Y+6	; 0x06
    56fc:	00 97       	sbiw	r24, 0x00	; 0
    56fe:	69 f7       	brne	.-38     	; 0x56da <main+0xc8>
    5700:	14 c0       	rjmp	.+40     	; 0x572a <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5702:	6f 81       	ldd	r22, Y+7	; 0x07
    5704:	78 85       	ldd	r23, Y+8	; 0x08
    5706:	89 85       	ldd	r24, Y+9	; 0x09
    5708:	9a 85       	ldd	r25, Y+10	; 0x0a
    570a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    570e:	dc 01       	movw	r26, r24
    5710:	cb 01       	movw	r24, r22
    5712:	9e 83       	std	Y+6, r25	; 0x06
    5714:	8d 83       	std	Y+5, r24	; 0x05
    5716:	8d 81       	ldd	r24, Y+5	; 0x05
    5718:	9e 81       	ldd	r25, Y+6	; 0x06
    571a:	9a 83       	std	Y+2, r25	; 0x02
    571c:	89 83       	std	Y+1, r24	; 0x01
    571e:	89 81       	ldd	r24, Y+1	; 0x01
    5720:	9a 81       	ldd	r25, Y+2	; 0x02
    5722:	01 97       	sbiw	r24, 0x01	; 1
    5724:	f1 f7       	brne	.-4      	; 0x5722 <main+0x110>
    5726:	9a 83       	std	Y+2, r25	; 0x02
    5728:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	Set_Password();
    572a:	0e 94 98 2b 	call	0x5730	; 0x5730 <Set_Password>
    572e:	ff cf       	rjmp	.-2      	; 0x572e <main+0x11c>

00005730 <Set_Password>:

	}
}

void Set_Password(void)
{
    5730:	df 93       	push	r29
    5732:	cf 93       	push	r28
    5734:	cd b7       	in	r28, 0x3d	; 61
    5736:	de b7       	in	r29, 0x3e	; 62
    5738:	2e 97       	sbiw	r28, 0x0e	; 14
    573a:	0f b6       	in	r0, 0x3f	; 63
    573c:	f8 94       	cli
    573e:	de bf       	out	0x3e, r29	; 62
    5740:	0f be       	out	0x3f, r0	; 63
    5742:	cd bf       	out	0x3d, r28	; 61
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	90 e4       	ldi	r25, 0x40	; 64
    5748:	ac e9       	ldi	r26, 0x9C	; 156
    574a:	b5 e4       	ldi	r27, 0x45	; 69
    574c:	8b 87       	std	Y+11, r24	; 0x0b
    574e:	9c 87       	std	Y+12, r25	; 0x0c
    5750:	ad 87       	std	Y+13, r26	; 0x0d
    5752:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5754:	6b 85       	ldd	r22, Y+11	; 0x0b
    5756:	7c 85       	ldd	r23, Y+12	; 0x0c
    5758:	8d 85       	ldd	r24, Y+13	; 0x0d
    575a:	9e 85       	ldd	r25, Y+14	; 0x0e
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	4a ef       	ldi	r20, 0xFA	; 250
    5762:	54 e4       	ldi	r21, 0x44	; 68
    5764:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5768:	dc 01       	movw	r26, r24
    576a:	cb 01       	movw	r24, r22
    576c:	8f 83       	std	Y+7, r24	; 0x07
    576e:	98 87       	std	Y+8, r25	; 0x08
    5770:	a9 87       	std	Y+9, r26	; 0x09
    5772:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5774:	6f 81       	ldd	r22, Y+7	; 0x07
    5776:	78 85       	ldd	r23, Y+8	; 0x08
    5778:	89 85       	ldd	r24, Y+9	; 0x09
    577a:	9a 85       	ldd	r25, Y+10	; 0x0a
    577c:	20 e0       	ldi	r18, 0x00	; 0
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	40 e8       	ldi	r20, 0x80	; 128
    5782:	5f e3       	ldi	r21, 0x3F	; 63
    5784:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5788:	88 23       	and	r24, r24
    578a:	2c f4       	brge	.+10     	; 0x5796 <Set_Password+0x66>
		__ticks = 1;
    578c:	81 e0       	ldi	r24, 0x01	; 1
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	9e 83       	std	Y+6, r25	; 0x06
    5792:	8d 83       	std	Y+5, r24	; 0x05
    5794:	3f c0       	rjmp	.+126    	; 0x5814 <Set_Password+0xe4>
	else if (__tmp > 65535)
    5796:	6f 81       	ldd	r22, Y+7	; 0x07
    5798:	78 85       	ldd	r23, Y+8	; 0x08
    579a:	89 85       	ldd	r24, Y+9	; 0x09
    579c:	9a 85       	ldd	r25, Y+10	; 0x0a
    579e:	20 e0       	ldi	r18, 0x00	; 0
    57a0:	3f ef       	ldi	r19, 0xFF	; 255
    57a2:	4f e7       	ldi	r20, 0x7F	; 127
    57a4:	57 e4       	ldi	r21, 0x47	; 71
    57a6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    57aa:	18 16       	cp	r1, r24
    57ac:	4c f5       	brge	.+82     	; 0x5800 <Set_Password+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    57b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    57b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    57b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    57b6:	20 e0       	ldi	r18, 0x00	; 0
    57b8:	30 e0       	ldi	r19, 0x00	; 0
    57ba:	40 e2       	ldi	r20, 0x20	; 32
    57bc:	51 e4       	ldi	r21, 0x41	; 65
    57be:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    57c2:	dc 01       	movw	r26, r24
    57c4:	cb 01       	movw	r24, r22
    57c6:	bc 01       	movw	r22, r24
    57c8:	cd 01       	movw	r24, r26
    57ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ce:	dc 01       	movw	r26, r24
    57d0:	cb 01       	movw	r24, r22
    57d2:	9e 83       	std	Y+6, r25	; 0x06
    57d4:	8d 83       	std	Y+5, r24	; 0x05
    57d6:	0f c0       	rjmp	.+30     	; 0x57f6 <Set_Password+0xc6>
    57d8:	88 ec       	ldi	r24, 0xC8	; 200
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	9c 83       	std	Y+4, r25	; 0x04
    57de:	8b 83       	std	Y+3, r24	; 0x03
    57e0:	8b 81       	ldd	r24, Y+3	; 0x03
    57e2:	9c 81       	ldd	r25, Y+4	; 0x04
    57e4:	01 97       	sbiw	r24, 0x01	; 1
    57e6:	f1 f7       	brne	.-4      	; 0x57e4 <Set_Password+0xb4>
    57e8:	9c 83       	std	Y+4, r25	; 0x04
    57ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57ec:	8d 81       	ldd	r24, Y+5	; 0x05
    57ee:	9e 81       	ldd	r25, Y+6	; 0x06
    57f0:	01 97       	sbiw	r24, 0x01	; 1
    57f2:	9e 83       	std	Y+6, r25	; 0x06
    57f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57f6:	8d 81       	ldd	r24, Y+5	; 0x05
    57f8:	9e 81       	ldd	r25, Y+6	; 0x06
    57fa:	00 97       	sbiw	r24, 0x00	; 0
    57fc:	69 f7       	brne	.-38     	; 0x57d8 <Set_Password+0xa8>
    57fe:	14 c0       	rjmp	.+40     	; 0x5828 <Set_Password+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5800:	6f 81       	ldd	r22, Y+7	; 0x07
    5802:	78 85       	ldd	r23, Y+8	; 0x08
    5804:	89 85       	ldd	r24, Y+9	; 0x09
    5806:	9a 85       	ldd	r25, Y+10	; 0x0a
    5808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    580c:	dc 01       	movw	r26, r24
    580e:	cb 01       	movw	r24, r22
    5810:	9e 83       	std	Y+6, r25	; 0x06
    5812:	8d 83       	std	Y+5, r24	; 0x05
    5814:	8d 81       	ldd	r24, Y+5	; 0x05
    5816:	9e 81       	ldd	r25, Y+6	; 0x06
    5818:	9a 83       	std	Y+2, r25	; 0x02
    581a:	89 83       	std	Y+1, r24	; 0x01
    581c:	89 81       	ldd	r24, Y+1	; 0x01
    581e:	9a 81       	ldd	r25, Y+2	; 0x02
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	f1 f7       	brne	.-4      	; 0x5820 <Set_Password+0xf0>
    5824:	9a 83       	std	Y+2, r25	; 0x02
    5826:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	CLCD_vClearScreen();
    5828:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <CLCD_vClearScreen>
	CLCD_vSendString("Set UserName");
    582c:	88 e6       	ldi	r24, 0x68	; 104
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    5834:	82 e0       	ldi	r24, 0x02	; 2
    5836:	61 e0       	ldi	r22, 0x01	; 1
    5838:	0e 94 13 29 	call	0x5226	; 0x5226 <CLCD_vSetPosition>

	do
	{
		KPD_Press = KPD_u8GetPressed();
    583c:	0e 94 51 22 	call	0x44a2	; 0x44a2 <KPD_u8GetPressed>
    5840:	80 93 fd 01 	sts	0x01FD, r24
		Error_State = USART_u8ReceiveData(&KEYB_Press);
    5844:	8c ef       	ldi	r24, 0xFC	; 252
    5846:	91 e0       	ldi	r25, 0x01	; 1
    5848:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    584c:	80 93 cd 01 	sts	0x01CD, r24

		if(KPD_Press != NOTPRESSED)
    5850:	80 91 fd 01 	lds	r24, 0x01FD
    5854:	8f 3f       	cpi	r24, 0xFF	; 255
    5856:	29 f0       	breq	.+10     	; 0x5862 <Set_Password+0x132>
		{
			CLCD_vSendData(KPD_Press);
    5858:	80 91 fd 01 	lds	r24, 0x01FD
    585c:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <CLCD_vSendData>
    5860:	10 c0       	rjmp	.+32     	; 0x5882 <Set_Password+0x152>
		}

		else if (Error_State == OK)
    5862:	80 91 cd 01 	lds	r24, 0x01CD
    5866:	88 23       	and	r24, r24
    5868:	61 f4       	brne	.+24     	; 0x5882 <Set_Password+0x152>
		{
			//property of sending Enter
			if (KEYB_Press == 0x0D || KEYB_Press == 0x0F)
    586a:	80 91 fc 01 	lds	r24, 0x01FC
    586e:	8d 30       	cpi	r24, 0x0D	; 13
    5870:	61 f0       	breq	.+24     	; 0x588a <Set_Password+0x15a>
    5872:	80 91 fc 01 	lds	r24, 0x01FC
    5876:	8f 30       	cpi	r24, 0x0F	; 15
    5878:	41 f0       	breq	.+16     	; 0x588a <Set_Password+0x15a>
			{
				break;
			}
			else
			{
				CLCD_vSendData(KEYB_Press);
    587a:	80 91 fc 01 	lds	r24, 0x01FC
    587e:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <CLCD_vSendData>
			}
			/*___________________________________________________________________________________________________________________*/
		}
	}while(KPD_Press != 'A');
    5882:	80 91 fd 01 	lds	r24, 0x01FD
    5886:	81 34       	cpi	r24, 0x41	; 65
    5888:	c9 f6       	brne	.-78     	; 0x583c <Set_Password+0x10c>

}
    588a:	2e 96       	adiw	r28, 0x0e	; 14
    588c:	0f b6       	in	r0, 0x3f	; 63
    588e:	f8 94       	cli
    5890:	de bf       	out	0x3e, r29	; 62
    5892:	0f be       	out	0x3f, r0	; 63
    5894:	cd bf       	out	0x3d, r28	; 61
    5896:	cf 91       	pop	r28
    5898:	df 91       	pop	r29
    589a:	08 95       	ret

0000589c <Clear_Char>:



void Clear_Char()
{
    589c:	df 93       	push	r29
    589e:	cf 93       	push	r28
    58a0:	cd b7       	in	r28, 0x3d	; 61
    58a2:	de b7       	in	r29, 0x3e	; 62

}
    58a4:	cf 91       	pop	r28
    58a6:	df 91       	pop	r29
    58a8:	08 95       	ret

000058aa <__mulsi3>:
    58aa:	62 9f       	mul	r22, r18
    58ac:	d0 01       	movw	r26, r0
    58ae:	73 9f       	mul	r23, r19
    58b0:	f0 01       	movw	r30, r0
    58b2:	82 9f       	mul	r24, r18
    58b4:	e0 0d       	add	r30, r0
    58b6:	f1 1d       	adc	r31, r1
    58b8:	64 9f       	mul	r22, r20
    58ba:	e0 0d       	add	r30, r0
    58bc:	f1 1d       	adc	r31, r1
    58be:	92 9f       	mul	r25, r18
    58c0:	f0 0d       	add	r31, r0
    58c2:	83 9f       	mul	r24, r19
    58c4:	f0 0d       	add	r31, r0
    58c6:	74 9f       	mul	r23, r20
    58c8:	f0 0d       	add	r31, r0
    58ca:	65 9f       	mul	r22, r21
    58cc:	f0 0d       	add	r31, r0
    58ce:	99 27       	eor	r25, r25
    58d0:	72 9f       	mul	r23, r18
    58d2:	b0 0d       	add	r27, r0
    58d4:	e1 1d       	adc	r30, r1
    58d6:	f9 1f       	adc	r31, r25
    58d8:	63 9f       	mul	r22, r19
    58da:	b0 0d       	add	r27, r0
    58dc:	e1 1d       	adc	r30, r1
    58de:	f9 1f       	adc	r31, r25
    58e0:	bd 01       	movw	r22, r26
    58e2:	cf 01       	movw	r24, r30
    58e4:	11 24       	eor	r1, r1
    58e6:	08 95       	ret

000058e8 <__udivmodhi4>:
    58e8:	aa 1b       	sub	r26, r26
    58ea:	bb 1b       	sub	r27, r27
    58ec:	51 e1       	ldi	r21, 0x11	; 17
    58ee:	07 c0       	rjmp	.+14     	; 0x58fe <__udivmodhi4_ep>

000058f0 <__udivmodhi4_loop>:
    58f0:	aa 1f       	adc	r26, r26
    58f2:	bb 1f       	adc	r27, r27
    58f4:	a6 17       	cp	r26, r22
    58f6:	b7 07       	cpc	r27, r23
    58f8:	10 f0       	brcs	.+4      	; 0x58fe <__udivmodhi4_ep>
    58fa:	a6 1b       	sub	r26, r22
    58fc:	b7 0b       	sbc	r27, r23

000058fe <__udivmodhi4_ep>:
    58fe:	88 1f       	adc	r24, r24
    5900:	99 1f       	adc	r25, r25
    5902:	5a 95       	dec	r21
    5904:	a9 f7       	brne	.-22     	; 0x58f0 <__udivmodhi4_loop>
    5906:	80 95       	com	r24
    5908:	90 95       	com	r25
    590a:	bc 01       	movw	r22, r24
    590c:	cd 01       	movw	r24, r26
    590e:	08 95       	ret

00005910 <__udivmodsi4>:
    5910:	a1 e2       	ldi	r26, 0x21	; 33
    5912:	1a 2e       	mov	r1, r26
    5914:	aa 1b       	sub	r26, r26
    5916:	bb 1b       	sub	r27, r27
    5918:	fd 01       	movw	r30, r26
    591a:	0d c0       	rjmp	.+26     	; 0x5936 <__udivmodsi4_ep>

0000591c <__udivmodsi4_loop>:
    591c:	aa 1f       	adc	r26, r26
    591e:	bb 1f       	adc	r27, r27
    5920:	ee 1f       	adc	r30, r30
    5922:	ff 1f       	adc	r31, r31
    5924:	a2 17       	cp	r26, r18
    5926:	b3 07       	cpc	r27, r19
    5928:	e4 07       	cpc	r30, r20
    592a:	f5 07       	cpc	r31, r21
    592c:	20 f0       	brcs	.+8      	; 0x5936 <__udivmodsi4_ep>
    592e:	a2 1b       	sub	r26, r18
    5930:	b3 0b       	sbc	r27, r19
    5932:	e4 0b       	sbc	r30, r20
    5934:	f5 0b       	sbc	r31, r21

00005936 <__udivmodsi4_ep>:
    5936:	66 1f       	adc	r22, r22
    5938:	77 1f       	adc	r23, r23
    593a:	88 1f       	adc	r24, r24
    593c:	99 1f       	adc	r25, r25
    593e:	1a 94       	dec	r1
    5940:	69 f7       	brne	.-38     	; 0x591c <__udivmodsi4_loop>
    5942:	60 95       	com	r22
    5944:	70 95       	com	r23
    5946:	80 95       	com	r24
    5948:	90 95       	com	r25
    594a:	9b 01       	movw	r18, r22
    594c:	ac 01       	movw	r20, r24
    594e:	bd 01       	movw	r22, r26
    5950:	cf 01       	movw	r24, r30
    5952:	08 95       	ret

00005954 <__divmodsi4>:
    5954:	97 fb       	bst	r25, 7
    5956:	09 2e       	mov	r0, r25
    5958:	05 26       	eor	r0, r21
    595a:	0e d0       	rcall	.+28     	; 0x5978 <__divmodsi4_neg1>
    595c:	57 fd       	sbrc	r21, 7
    595e:	04 d0       	rcall	.+8      	; 0x5968 <__divmodsi4_neg2>
    5960:	d7 df       	rcall	.-82     	; 0x5910 <__udivmodsi4>
    5962:	0a d0       	rcall	.+20     	; 0x5978 <__divmodsi4_neg1>
    5964:	00 1c       	adc	r0, r0
    5966:	38 f4       	brcc	.+14     	; 0x5976 <__divmodsi4_exit>

00005968 <__divmodsi4_neg2>:
    5968:	50 95       	com	r21
    596a:	40 95       	com	r20
    596c:	30 95       	com	r19
    596e:	21 95       	neg	r18
    5970:	3f 4f       	sbci	r19, 0xFF	; 255
    5972:	4f 4f       	sbci	r20, 0xFF	; 255
    5974:	5f 4f       	sbci	r21, 0xFF	; 255

00005976 <__divmodsi4_exit>:
    5976:	08 95       	ret

00005978 <__divmodsi4_neg1>:
    5978:	f6 f7       	brtc	.-4      	; 0x5976 <__divmodsi4_exit>
    597a:	90 95       	com	r25
    597c:	80 95       	com	r24
    597e:	70 95       	com	r23
    5980:	61 95       	neg	r22
    5982:	7f 4f       	sbci	r23, 0xFF	; 255
    5984:	8f 4f       	sbci	r24, 0xFF	; 255
    5986:	9f 4f       	sbci	r25, 0xFF	; 255
    5988:	08 95       	ret

0000598a <__prologue_saves__>:
    598a:	2f 92       	push	r2
    598c:	3f 92       	push	r3
    598e:	4f 92       	push	r4
    5990:	5f 92       	push	r5
    5992:	6f 92       	push	r6
    5994:	7f 92       	push	r7
    5996:	8f 92       	push	r8
    5998:	9f 92       	push	r9
    599a:	af 92       	push	r10
    599c:	bf 92       	push	r11
    599e:	cf 92       	push	r12
    59a0:	df 92       	push	r13
    59a2:	ef 92       	push	r14
    59a4:	ff 92       	push	r15
    59a6:	0f 93       	push	r16
    59a8:	1f 93       	push	r17
    59aa:	cf 93       	push	r28
    59ac:	df 93       	push	r29
    59ae:	cd b7       	in	r28, 0x3d	; 61
    59b0:	de b7       	in	r29, 0x3e	; 62
    59b2:	ca 1b       	sub	r28, r26
    59b4:	db 0b       	sbc	r29, r27
    59b6:	0f b6       	in	r0, 0x3f	; 63
    59b8:	f8 94       	cli
    59ba:	de bf       	out	0x3e, r29	; 62
    59bc:	0f be       	out	0x3f, r0	; 63
    59be:	cd bf       	out	0x3d, r28	; 61
    59c0:	09 94       	ijmp

000059c2 <__epilogue_restores__>:
    59c2:	2a 88       	ldd	r2, Y+18	; 0x12
    59c4:	39 88       	ldd	r3, Y+17	; 0x11
    59c6:	48 88       	ldd	r4, Y+16	; 0x10
    59c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    59ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    59cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    59ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    59d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    59d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    59d4:	b9 84       	ldd	r11, Y+9	; 0x09
    59d6:	c8 84       	ldd	r12, Y+8	; 0x08
    59d8:	df 80       	ldd	r13, Y+7	; 0x07
    59da:	ee 80       	ldd	r14, Y+6	; 0x06
    59dc:	fd 80       	ldd	r15, Y+5	; 0x05
    59de:	0c 81       	ldd	r16, Y+4	; 0x04
    59e0:	1b 81       	ldd	r17, Y+3	; 0x03
    59e2:	aa 81       	ldd	r26, Y+2	; 0x02
    59e4:	b9 81       	ldd	r27, Y+1	; 0x01
    59e6:	ce 0f       	add	r28, r30
    59e8:	d1 1d       	adc	r29, r1
    59ea:	0f b6       	in	r0, 0x3f	; 63
    59ec:	f8 94       	cli
    59ee:	de bf       	out	0x3e, r29	; 62
    59f0:	0f be       	out	0x3f, r0	; 63
    59f2:	cd bf       	out	0x3d, r28	; 61
    59f4:	ed 01       	movw	r28, r26
    59f6:	08 95       	ret

000059f8 <_exit>:
    59f8:	f8 94       	cli

000059fa <__stop_program>:
    59fa:	ff cf       	rjmp	.-2      	; 0x59fa <__stop_program>
