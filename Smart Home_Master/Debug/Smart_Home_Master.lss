
Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000554  00800060  00005a2c  00005ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  008005b4  008005b4  00006014  2**0
                  ALLOC
  3 .stab         00006504  00000000  00000000  00006014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000226b  00000000  00000000  0000c518  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e783  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000e8c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ea33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00011567  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00012314  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00012474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00012701  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012ecf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__vector_1>
       8:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__vector_2>
       c:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__vector_3>
      10:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_4>
      14:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_5>
      18:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_6>
      1c:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__vector_7>
      20:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__vector_8>
      24:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__vector_9>
      28:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__vector_10>
      2c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_11>
      30:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__vector_12>
      34:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <main>
      8a:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dd 2c 	jmp	0x59ba	; 0x59ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b5 e0       	ldi	r27, 0x05	; 5
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dd 2c 	jmp	0x59ba	; 0x59ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	95 e0       	ldi	r25, 0x05	; 5
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 09 2d 	jmp	0x5a12	; 0x5a12 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_vInit>:
 * Breif      : This Function initialize USART depend on config.h
 * Parameters :  Nothing
 * return     :  Nothing
 */
void USART_vInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <USART_vInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
  /* We will adjust this value according to the configrations then store it in UCSRC in one operation */
  u8 Local_u8UCSRC = 0;
     b52:	1b 82       	std	Y+3, r1	; 0x03

  /***** Check 3 Modes   *****/
#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_1X)

  CLR_BIT(UCSRA, UCSRA_U2X);
     b54:	ab e2       	ldi	r26, 0x2B	; 43
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	eb e2       	ldi	r30, 0x2B	; 43
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	8d 7f       	andi	r24, 0xFD	; 253
     b60:	8c 93       	st	X, r24

  /*Calculate The Baud Rate From The Equation */
  u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1);
     b62:	83 e3       	ldi	r24, 0x33	; 51
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01
#endif
  /*
      $ Set Baud Rate
      Hint : UBRRH then UBRRL to avoid problems
   */
  UBRRH = (u8)(Local_u16UBRR << 8); /* MSBs at Local_u16UBRR */
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
  UBRRL = (u8)Local_u16UBRR;
     b70:	e9 e2       	ldi	r30, 0x29	; 41
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	80 83       	st	Z, r24
  /*___________________________________________________________________________________________________________________*/

  /*Multi-Processor Communication mode*/
#if USART_MPCM == DISABLE
  CLR_BIT(UCSRA, UCSRA_MPCM);
     b78:	ab e2       	ldi	r26, 0x2B	; 43
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	eb e2       	ldi	r30, 0x2B	; 43
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8e 7f       	andi	r24, 0xFE	; 254
     b84:	8c 93       	st	X, r24

  /*UCSRC Register Config*/

  /*USART Mode*/
#if USART_MODE == ASYNCHRONOUS
  CLR_BIT(Local_u8UCSRC, UCSRC_UMSEL);
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	8f 7b       	andi	r24, 0xBF	; 191
     b8a:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Parity Mode*/
#if USART_PARITY_MODE == DISABLE

  CLR_BIT(Local_u8UCSRC, UCSRC_UPM0);
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	8f 7e       	andi	r24, 0xEF	; 239
     b90:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(Local_u8UCSRC, UCSRC_UPM1);
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	8f 7d       	andi	r24, 0xDF	; 223
     b96:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Stop Bit*/
#if USART_STOP_BIT == STOP_BIT_1

  CLR_BIT(Local_u8UCSRC, UCSRC_USBS);
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	87 7f       	andi	r24, 0xF7	; 247
     b9c:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
  CLR_BIT(UCSRB, UCSRB_UCSZ2);

#elif USART_DATA_SIZE == DATA_SIZE_8_BIT

  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	82 60       	ori	r24, 0x02	; 2
     ba2:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	84 60       	ori	r24, 0x04	; 4
     ba8:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(UCSRB, UCSRB_UCSZ2);
     baa:	aa e2       	ldi	r26, 0x2A	; 42
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	ea e2       	ldi	r30, 0x2A	; 42
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8b 7f       	andi	r24, 0xFB	; 251
     bb6:	8c 93       	st	X, r24
#endif

#endif

  /*Set UCSRC Mode*/
  SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8b 83       	std	Y+3, r24	; 0x03

  /*Store the value in UCSRC Register (one operation) */
  UCSRC = Local_u8UCSRC;
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	80 83       	st	Z, r24

  /* Finally Enable the components */

  /*RX Complete Interrupt Enable*/
#if USART_RX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_RXCIE);
     bc6:	aa e2       	ldi	r26, 0x2A	; 42
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	ea e2       	ldi	r30, 0x2A	; 42
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	8c 93       	st	X, r24
#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
#endif

  /*TX Complete Interrupt Enable*/
#if USART_TX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_TXCIE);
     bd4:	aa e2       	ldi	r26, 0x2A	; 42
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	ea e2       	ldi	r30, 0x2A	; 42
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8f 7b       	andi	r24, 0xBF	; 191
     be0:	8c 93       	st	X, r24
#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
#endif

  /*UDR Empty Interrupt Enable*/
#if USART_UDR_EMPTY_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_UDRIE);
     be2:	aa e2       	ldi	r26, 0x2A	; 42
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	ea e2       	ldi	r30, 0x2A	; 42
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8f 7d       	andi	r24, 0xDF	; 223
     bee:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_RXEN);

#elif USART_RECEIVER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_RXEN);
     bf0:	aa e2       	ldi	r26, 0x2A	; 42
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ea e2       	ldi	r30, 0x2A	; 42
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 61       	ori	r24, 0x10	; 16
     bfc:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_TXEN);

#elif USART_TRANSMITTER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_TXEN);
     bfe:	aa e2       	ldi	r26, 0x2A	; 42
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ea e2       	ldi	r30, 0x2A	; 42
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	88 60       	ori	r24, 0x08	; 8
     c0a:	8c 93       	st	X, r24
#else

#error "Wrong USART_TRANSMITTER_ENABLE config"

#endif
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <USART_u8SendData>:
 *		Copy_u8Data => Data to be send
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendData(u8 Copy_u8Data)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <USART_u8SendData+0x6>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <USART_u8SendData+0x8>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <USART_u8SendData+0xa>
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
     c28:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
     c2a:	19 82       	std	Y+1, r1	; 0x01
     c2c:	1a 82       	std	Y+2, r1	; 0x02
     c2e:	1b 82       	std	Y+3, r1	; 0x03
     c30:	1c 82       	std	Y+4, r1	; 0x04

  if (USART_u8State == IDLE)
     c32:	80 91 ba 05 	lds	r24, 0x05BA
     c36:	88 23       	and	r24, r24
     c38:	09 f0       	breq	.+2      	; 0xc3c <USART_u8SendData+0x24>
     c3a:	44 c0       	rjmp	.+136    	; 0xcc4 <USART_u8SendData+0xac>
  {
    USART_u8State = BUSY;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 ba 05 	sts	0x05BA, r24
     c42:	0b c0       	rjmp	.+22     	; 0xc5a <USART_u8SendData+0x42>
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    {
      Local_u32TimeoutCounter++;
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	ab 81       	ldd	r26, Y+3	; 0x03
     c4a:	bc 81       	ldd	r27, Y+4	; 0x04
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	a1 1d       	adc	r26, r1
     c50:	b1 1d       	adc	r27, r1
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	ab 83       	std	Y+3, r26	; 0x03
     c58:	bc 83       	std	Y+4, r27	; 0x04

    /*
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
     c5a:	eb e2       	ldi	r30, 0x2B	; 43
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	88 2f       	mov	r24, r24
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	80 72       	andi	r24, 0x20	; 32
     c66:	90 70       	andi	r25, 0x00	; 0
     c68:	95 95       	asr	r25
     c6a:	87 95       	ror	r24
     c6c:	95 95       	asr	r25
     c6e:	87 95       	ror	r24
     c70:	95 95       	asr	r25
     c72:	87 95       	ror	r24
     c74:	95 95       	asr	r25
     c76:	87 95       	ror	r24
     c78:	95 95       	asr	r25
     c7a:	87 95       	ror	r24
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	61 f4       	brne	.+24     	; 0xc98 <USART_u8SendData+0x80>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	ab 81       	ldd	r26, Y+3	; 0x03
     c86:	bc 81       	ldd	r27, Y+4	; 0x04
     c88:	80 31       	cpi	r24, 0x10	; 16
     c8a:	27 e2       	ldi	r18, 0x27	; 39
     c8c:	92 07       	cpc	r25, r18
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	a2 07       	cpc	r26, r18
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	b2 07       	cpc	r27, r18
     c96:	b1 f6       	brne	.-84     	; 0xc44 <USART_u8SendData+0x2c>
    {
      Local_u32TimeoutCounter++;
    }

    if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	ab 81       	ldd	r26, Y+3	; 0x03
     c9e:	bc 81       	ldd	r27, Y+4	; 0x04
     ca0:	80 31       	cpi	r24, 0x10	; 16
     ca2:	27 e2       	ldi	r18, 0x27	; 39
     ca4:	92 07       	cpc	r25, r18
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	a2 07       	cpc	r26, r18
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	b2 07       	cpc	r27, r18
     cae:	19 f4       	brne	.+6      	; 0xcb6 <USART_u8SendData+0x9e>
    {
      Local_u8ErrorState = TIMEOUT_STATE;
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <USART_u8SendData+0xa6>
    }
    else
    {
      UDR = Copy_u8Data;
     cb6:	ec e2       	ldi	r30, 0x2C	; 44
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	80 83       	st	Z, r24
    }

    USART_u8State = IDLE;
     cbe:	10 92 ba 05 	sts	0x05BA, r1
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <USART_u8SendData+0xb0>
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cca:	26 96       	adiw	r28, 0x06	; 6
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <USART_u8ReceiveData>:
 *		Copy_u8ReceivedData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveData(u8 *Copy_u8ReceivedData)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	27 97       	sbiw	r28, 0x07	; 7
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	9f 83       	std	Y+7, r25	; 0x07
     cf2:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
     cf4:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
     cf6:	19 82       	std	Y+1, r1	; 0x01
     cf8:	1a 82       	std	Y+2, r1	; 0x02
     cfa:	1b 82       	std	Y+3, r1	; 0x03
     cfc:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_u8ReceivedData != NULL)
     cfe:	8e 81       	ldd	r24, Y+6	; 0x06
     d00:	9f 81       	ldd	r25, Y+7	; 0x07
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	09 f4       	brne	.+2      	; 0xd08 <USART_u8ReceiveData+0x2c>
     d06:	46 c0       	rjmp	.+140    	; 0xd94 <USART_u8ReceiveData+0xb8>
  {
    if (USART_u8State == IDLE)
     d08:	80 91 ba 05 	lds	r24, 0x05BA
     d0c:	88 23       	and	r24, r24
     d0e:	09 f0       	breq	.+2      	; 0xd12 <USART_u8ReceiveData+0x36>
     d10:	3e c0       	rjmp	.+124    	; 0xd8e <USART_u8ReceiveData+0xb2>
    {
      USART_u8State = BUSY;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 ba 05 	sts	0x05BA, r24
     d18:	0b c0       	rjmp	.+22     	; 0xd30 <USART_u8ReceiveData+0x54>

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
      {
        Local_u32TimeoutCounter++;
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	ab 81       	ldd	r26, Y+3	; 0x03
     d20:	bc 81       	ldd	r27, Y+4	; 0x04
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	a1 1d       	adc	r26, r1
     d26:	b1 1d       	adc	r27, r1
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	ab 83       	std	Y+3, r26	; 0x03
     d2e:	bc 83       	std	Y+4, r27	; 0x04
    if (USART_u8State == IDLE)
    {
      USART_u8State = BUSY;

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
     d30:	eb e2       	ldi	r30, 0x2B	; 43
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 1f       	adc	r24, r24
     d38:	88 27       	eor	r24, r24
     d3a:	88 1f       	adc	r24, r24
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	90 70       	andi	r25, 0x00	; 0
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	61 f4       	brne	.+24     	; 0xd5e <USART_u8ReceiveData+0x82>
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	ab 81       	ldd	r26, Y+3	; 0x03
     d4c:	bc 81       	ldd	r27, Y+4	; 0x04
     d4e:	80 31       	cpi	r24, 0x10	; 16
     d50:	27 e2       	ldi	r18, 0x27	; 39
     d52:	92 07       	cpc	r25, r18
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	a2 07       	cpc	r26, r18
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	b2 07       	cpc	r27, r18
     d5c:	f1 f6       	brne	.-68     	; 0xd1a <USART_u8ReceiveData+0x3e>
      {
        Local_u32TimeoutCounter++;
      }

      if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	ab 81       	ldd	r26, Y+3	; 0x03
     d64:	bc 81       	ldd	r27, Y+4	; 0x04
     d66:	80 31       	cpi	r24, 0x10	; 16
     d68:	27 e2       	ldi	r18, 0x27	; 39
     d6a:	92 07       	cpc	r25, r18
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	a2 07       	cpc	r26, r18
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	b2 07       	cpc	r27, r18
     d74:	19 f4       	brne	.+6      	; 0xd7c <USART_u8ReceiveData+0xa0>
      {
        Local_u8ErrorState = TIMEOUT_STATE;
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	8d 83       	std	Y+5, r24	; 0x05
     d7a:	06 c0       	rjmp	.+12     	; 0xd88 <USART_u8ReceiveData+0xac>
      }
      else
      {
        *Copy_u8ReceivedData = UDR;
     d7c:	ec e2       	ldi	r30, 0x2C	; 44
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	ee 81       	ldd	r30, Y+6	; 0x06
     d84:	ff 81       	ldd	r31, Y+7	; 0x07
     d86:	80 83       	st	Z, r24
      }

      USART_u8State = IDLE;
     d88:	10 92 ba 05 	sts	0x05BA, r1
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <USART_u8ReceiveData+0xbc>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	8d 83       	std	Y+5, r24	; 0x05
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <USART_u8ReceiveData+0xbc>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d9a:	27 96       	adiw	r28, 0x07	; 7
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <USART_u8SendStringSynch>:
 *		Copy_pu8String => pointer that holds the data
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringSynch(u8 *Copy_pu8String)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	27 97       	sbiw	r28, 0x07	; 7
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	9f 83       	std	Y+7, r25	; 0x07
     dc2:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
     dc4:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32Index = 0;
     dc6:	19 82       	std	Y+1, r1	; 0x01
     dc8:	1a 82       	std	Y+2, r1	; 0x02
     dca:	1b 82       	std	Y+3, r1	; 0x03
     dcc:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu8String != NULL)
     dce:	8e 81       	ldd	r24, Y+6	; 0x06
     dd0:	9f 81       	ldd	r25, Y+7	; 0x07
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	29 f1       	breq	.+74     	; 0xe20 <USART_u8SendStringSynch+0x74>
     dd6:	19 c0       	rjmp	.+50     	; 0xe0a <USART_u8SendStringSynch+0x5e>
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    {
      Local_u8ErrorState = USART_u8SendData(Copy_pu8String[Local_u32Index]);
     dd8:	29 81       	ldd	r18, Y+1	; 0x01
     dda:	3a 81       	ldd	r19, Y+2	; 0x02
     ddc:	8e 81       	ldd	r24, Y+6	; 0x06
     dde:	9f 81       	ldd	r25, Y+7	; 0x07
     de0:	fc 01       	movw	r30, r24
     de2:	e2 0f       	add	r30, r18
     de4:	f3 1f       	adc	r31, r19
     de6:	80 81       	ld	r24, Z
     de8:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
     dec:	8d 83       	std	Y+5, r24	; 0x05
      Local_u32Index++;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	ab 81       	ldd	r26, Y+3	; 0x03
     df4:	bc 81       	ldd	r27, Y+4	; 0x04
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	a1 1d       	adc	r26, r1
     dfa:	b1 1d       	adc	r27, r1
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	ab 83       	std	Y+3, r26	; 0x03
     e02:	bc 83       	std	Y+4, r27	; 0x04
      if (Local_u8ErrorState != OK)
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	88 23       	and	r24, r24
     e08:	69 f4       	brne	.+26     	; 0xe24 <USART_u8SendStringSynch+0x78>

  u32 Local_u32Index = 0;

  if (Copy_pu8String != NULL)
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
     e0a:	29 81       	ldd	r18, Y+1	; 0x01
     e0c:	3a 81       	ldd	r19, Y+2	; 0x02
     e0e:	8e 81       	ldd	r24, Y+6	; 0x06
     e10:	9f 81       	ldd	r25, Y+7	; 0x07
     e12:	fc 01       	movw	r30, r24
     e14:	e2 0f       	add	r30, r18
     e16:	f3 1f       	adc	r31, r19
     e18:	80 81       	ld	r24, Z
     e1a:	88 23       	and	r24, r24
     e1c:	e9 f6       	brne	.-70     	; 0xdd8 <USART_u8SendStringSynch+0x2c>
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <USART_u8SendStringSynch+0x78>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
     e24:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e26:	27 96       	adiw	r28, 0x07	; 7
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <USART_u8SendStringAsynch>:
 *      NotificationFunc => function that called after the transmit complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringAsynch(u8 *Copy_pu8String, void (*NotificationFunc)(void))
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <USART_u8SendStringAsynch+0x6>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <USART_u8SendStringAsynch+0x8>
     e40:	0f 92       	push	r0
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	9b 83       	std	Y+3, r25	; 0x03
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	7d 83       	std	Y+5, r23	; 0x05
     e4c:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
     e4e:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
     e50:	80 91 ba 05 	lds	r24, 0x05BA
     e54:	88 23       	and	r24, r24
     e56:	99 f5       	brne	.+102    	; 0xebe <USART_u8SendStringAsynch+0x86>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	9b 81       	ldd	r25, Y+3	; 0x03
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	61 f1       	breq	.+88     	; 0xeb8 <USART_u8SendStringAsynch+0x80>
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	41 f1       	breq	.+80     	; 0xeb8 <USART_u8SendStringAsynch+0x80>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 ba 05 	sts	0x05BA, r24

      /*Assign the USART data globally*/
      USART_pu8SendData = Copy_pu8String;
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	90 93 b5 05 	sts	0x05B5, r25
     e76:	80 93 b4 05 	sts	0x05B4, r24
      USART_pvNotificationFunc = NotificationFunc;
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	90 93 b9 05 	sts	0x05B9, r25
     e82:	80 93 b8 05 	sts	0x05B8, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
     e86:	10 92 bc 05 	sts	0x05BC, r1

      /*Send first Data */
      UDR = USART_pu8SendData[USART_u8Index];
     e8a:	ac e2       	ldi	r26, 0x2C	; 44
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	20 91 b4 05 	lds	r18, 0x05B4
     e92:	30 91 b5 05 	lds	r19, 0x05B5
     e96:	80 91 bc 05 	lds	r24, 0x05BC
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	f9 01       	movw	r30, r18
     ea0:	e8 0f       	add	r30, r24
     ea2:	f9 1f       	adc	r31, r25
     ea4:	80 81       	ld	r24, Z
     ea6:	8c 93       	st	X, r24

      /*USART Transmit Interrupt Enable*/
      SET_BIT(UCSRB, UCSRB_TXCIE);
     ea8:	aa e2       	ldi	r26, 0x2A	; 42
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ea e2       	ldi	r30, 0x2A	; 42
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	8c 93       	st	X, r24
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <USART_u8SendStringAsynch+0x8a>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <USART_u8SendStringAsynch+0x8a>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <USART_u8ReceiveBufferSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferSynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	2b 97       	sbiw	r28, 0x0b	; 11
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	9f 83       	std	Y+7, r25	; 0x07
     eea:	8e 83       	std	Y+6, r24	; 0x06
     eec:	48 87       	std	Y+8, r20	; 0x08
     eee:	59 87       	std	Y+9, r21	; 0x09
     ef0:	6a 87       	std	Y+10, r22	; 0x0a
     ef2:	7b 87       	std	Y+11, r23	; 0x0b
  u8 Local_u8ErrorState = OK;
     ef4:	1d 82       	std	Y+5, r1	; 0x05

  if (Copy_pu8String != NULL)
     ef6:	8e 81       	ldd	r24, Y+6	; 0x06
     ef8:	9f 81       	ldd	r25, Y+7	; 0x07
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	51 f1       	breq	.+84     	; 0xf52 <USART_u8ReceiveBufferSynch+0x7e>
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
     efe:	19 82       	std	Y+1, r1	; 0x01
     f00:	1a 82       	std	Y+2, r1	; 0x02
     f02:	1b 82       	std	Y+3, r1	; 0x03
     f04:	1c 82       	std	Y+4, r1	; 0x04
     f06:	17 c0       	rjmp	.+46     	; 0xf36 <USART_u8ReceiveBufferSynch+0x62>
    {
      Local_u8ErrorState = USART_u8ReceiveData(&Copy_pu8String[Local_u32Index]);
     f08:	29 81       	ldd	r18, Y+1	; 0x01
     f0a:	3a 81       	ldd	r19, Y+2	; 0x02
     f0c:	8e 81       	ldd	r24, Y+6	; 0x06
     f0e:	9f 81       	ldd	r25, Y+7	; 0x07
     f10:	82 0f       	add	r24, r18
     f12:	93 1f       	adc	r25, r19
     f14:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
     f18:	8d 83       	std	Y+5, r24	; 0x05
      if (Local_u8ErrorState != OK)
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	88 23       	and	r24, r24
     f1e:	d9 f4       	brne	.+54     	; 0xf56 <USART_u8ReceiveBufferSynch+0x82>
{
  u8 Local_u8ErrorState = OK;

  if (Copy_pu8String != NULL)
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	ab 81       	ldd	r26, Y+3	; 0x03
     f26:	bc 81       	ldd	r27, Y+4	; 0x04
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	a1 1d       	adc	r26, r1
     f2c:	b1 1d       	adc	r27, r1
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	ab 83       	std	Y+3, r26	; 0x03
     f34:	bc 83       	std	Y+4, r27	; 0x04
     f36:	29 81       	ldd	r18, Y+1	; 0x01
     f38:	3a 81       	ldd	r19, Y+2	; 0x02
     f3a:	4b 81       	ldd	r20, Y+3	; 0x03
     f3c:	5c 81       	ldd	r21, Y+4	; 0x04
     f3e:	88 85       	ldd	r24, Y+8	; 0x08
     f40:	99 85       	ldd	r25, Y+9	; 0x09
     f42:	aa 85       	ldd	r26, Y+10	; 0x0a
     f44:	bb 85       	ldd	r27, Y+11	; 0x0b
     f46:	28 17       	cp	r18, r24
     f48:	39 07       	cpc	r19, r25
     f4a:	4a 07       	cpc	r20, r26
     f4c:	5b 07       	cpc	r21, r27
     f4e:	e0 f2       	brcs	.-72     	; 0xf08 <USART_u8ReceiveBufferSynch+0x34>
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <USART_u8ReceiveBufferSynch+0x82>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f58:	2b 96       	adiw	r28, 0x0b	; 11
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <USART_u8ReceiveBufferAsynch>:
 *      NotificationFunc   => function that called after the received complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferAsynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize, void (*NotificationFunc)(void))
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	29 97       	sbiw	r28, 0x09	; 9
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	9b 83       	std	Y+3, r25	; 0x03
     f80:	8a 83       	std	Y+2, r24	; 0x02
     f82:	4c 83       	std	Y+4, r20	; 0x04
     f84:	5d 83       	std	Y+5, r21	; 0x05
     f86:	6e 83       	std	Y+6, r22	; 0x06
     f88:	7f 83       	std	Y+7, r23	; 0x07
     f8a:	39 87       	std	Y+9, r19	; 0x09
     f8c:	28 87       	std	Y+8, r18	; 0x08
  u8 Local_u8ErrorState = OK;
     f8e:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
     f90:	80 91 ba 05 	lds	r24, 0x05BA
     f94:	88 23       	and	r24, r24
     f96:	39 f5       	brne	.+78     	; 0xfe6 <USART_u8ReceiveBufferAsynch+0x7c>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	9b 81       	ldd	r25, Y+3	; 0x03
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	01 f1       	breq	.+64     	; 0xfe0 <USART_u8ReceiveBufferAsynch+0x76>
     fa0:	88 85       	ldd	r24, Y+8	; 0x08
     fa2:	99 85       	ldd	r25, Y+9	; 0x09
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	e1 f0       	breq	.+56     	; 0xfe0 <USART_u8ReceiveBufferAsynch+0x76>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 ba 05 	sts	0x05BA, r24

      /*Assign the USART data globally*/
      USART_pu8ReceiveData = Copy_pu8String;
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	90 93 b7 05 	sts	0x05B7, r25
     fb6:	80 93 b6 05 	sts	0x05B6, r24
      USART_pvNotificationFunc = NotificationFunc;
     fba:	88 85       	ldd	r24, Y+8	; 0x08
     fbc:	99 85       	ldd	r25, Y+9	; 0x09
     fbe:	90 93 b9 05 	sts	0x05B9, r25
     fc2:	80 93 b8 05 	sts	0x05B8, r24
      USART_u8BufferSize = Copy_u32BufferSize;
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	80 93 bb 05 	sts	0x05BB, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
     fcc:	10 92 bc 05 	sts	0x05BC, r1

      /*USART Recieve Interrupt Enable */
      SET_BIT(UCSRB, UCSRB_RXCIE);
     fd0:	aa e2       	ldi	r26, 0x2A	; 42
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ea e2       	ldi	r30, 0x2A	; 42
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	8c 93       	st	X, r24
     fde:	05 c0       	rjmp	.+10     	; 0xfea <USART_u8ReceiveBufferAsynch+0x80>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <USART_u8ReceiveBufferAsynch+0x80>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
}
     fec:	29 96       	adiw	r28, 0x09	; 9
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <__vector_13>:
/*___________________________________________________________________________________________________________________*/

/* ISR for RX complete */
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	4f 93       	push	r20
    100e:	5f 93       	push	r21
    1010:	6f 93       	push	r22
    1012:	7f 93       	push	r23
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
    101c:	ef 93       	push	r30
    101e:	ff 93       	push	r31
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
  /*Receive next Data*/
  USART_pu8ReceiveData[USART_u8Index] = UDR;
    1028:	20 91 b6 05 	lds	r18, 0x05B6
    102c:	30 91 b7 05 	lds	r19, 0x05B7
    1030:	80 91 bc 05 	lds	r24, 0x05BC
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	d9 01       	movw	r26, r18
    103a:	a8 0f       	add	r26, r24
    103c:	b9 1f       	adc	r27, r25
    103e:	ec e2       	ldi	r30, 0x2C	; 44
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8c 93       	st	X, r24

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    1046:	80 91 bc 05 	lds	r24, 0x05BC
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	80 93 bc 05 	sts	0x05BC, r24

  if (USART_u8Index == USART_u8BufferSize)
    1050:	90 91 bc 05 	lds	r25, 0x05BC
    1054:	80 91 bb 05 	lds	r24, 0x05BB
    1058:	98 17       	cp	r25, r24
    105a:	b1 f4       	brne	.+44     	; 0x1088 <__vector_13+0x8a>
  {
    /*Send Data Complete*/

    USART_u8Index = 0;
    105c:	10 92 bc 05 	sts	0x05BC, r1
    /*USART is now IDLE*/
    USART_u8State = IDLE;
    1060:	10 92 ba 05 	sts	0x05BA, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    1064:	80 91 b8 05 	lds	r24, 0x05B8
    1068:	90 91 b9 05 	lds	r25, 0x05B9
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	29 f0       	breq	.+10     	; 0x107a <__vector_13+0x7c>
    {
      USART_pvNotificationFunc();
    1070:	e0 91 b8 05 	lds	r30, 0x05B8
    1074:	f0 91 b9 05 	lds	r31, 0x05B9
    1078:	09 95       	icall
    }

    /*USART Recieve Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_RXCIE);
    107a:	aa e2       	ldi	r26, 0x2A	; 42
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ea e2       	ldi	r30, 0x2A	; 42
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8f 77       	andi	r24, 0x7F	; 127
    1086:	8c 93       	st	X, r24
  }
  else
  {
    /*Do Noting*/
  }
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    10d8:	80 91 bc 05 	lds	r24, 0x05BC
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	80 93 bc 05 	sts	0x05BC, r24

  if (USART_pu8SendData[USART_u8Index] == '\0')
    10e2:	20 91 b4 05 	lds	r18, 0x05B4
    10e6:	30 91 b5 05 	lds	r19, 0x05B5
    10ea:	80 91 bc 05 	lds	r24, 0x05BC
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	f9 01       	movw	r30, r18
    10f4:	e8 0f       	add	r30, r24
    10f6:	f9 1f       	adc	r31, r25
    10f8:	80 81       	ld	r24, Z
    10fa:	88 23       	and	r24, r24
    10fc:	b9 f4       	brne	.+46     	; 0x112c <__vector_15+0x7e>
  {
    /*Receive Data Complete*/
    USART_u8Index = 0;
    10fe:	10 92 bc 05 	sts	0x05BC, r1

    /*USART is now IDLE*/
    USART_u8State = IDLE;
    1102:	10 92 ba 05 	sts	0x05BA, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    1106:	80 91 b8 05 	lds	r24, 0x05B8
    110a:	90 91 b9 05 	lds	r25, 0x05B9
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	29 f0       	breq	.+10     	; 0x111c <__vector_15+0x6e>
    {
      USART_pvNotificationFunc();
    1112:	e0 91 b8 05 	lds	r30, 0x05B8
    1116:	f0 91 b9 05 	lds	r31, 0x05B9
    111a:	09 95       	icall
    }

    /*USART Transmit Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_TXCIE);
    111c:	aa e2       	ldi	r26, 0x2A	; 42
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ea e2       	ldi	r30, 0x2A	; 42
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 7b       	andi	r24, 0xBF	; 191
    1128:	8c 93       	st	X, r24
    112a:	0f c0       	rjmp	.+30     	; 0x114a <__vector_15+0x9c>
  }
  else
  {
    /*Send Data not Complete/
    /Send next Data*/
    UDR = USART_pu8SendData[USART_u8Index];
    112c:	ac e2       	ldi	r26, 0x2C	; 44
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	20 91 b4 05 	lds	r18, 0x05B4
    1134:	30 91 b5 05 	lds	r19, 0x05B5
    1138:	80 91 bc 05 	lds	r24, 0x05BC
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	f9 01       	movw	r30, r18
    1142:	e8 0f       	add	r30, r24
    1144:	f9 1f       	adc	r31, r25
    1146:	80 81       	ld	r24, Z
    1148:	8c 93       	st	X, r24
  }
}
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	7f 91       	pop	r23
    115c:	6f 91       	pop	r22
    115e:	5f 91       	pop	r21
    1160:	4f 91       	pop	r20
    1162:	3f 91       	pop	r19
    1164:	2f 91       	pop	r18
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <TIMER0_vInit>:
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_vInit(void)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
			#endif

		#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

			/*Initialize Waveform Generation Mode as Fast PWM Mode*/
			SET_BIT(TCCR0 , TCCR0_WGM00) ;
    1178:	a3 e5       	ldi	r26, 0x53	; 83
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e3 e5       	ldi	r30, 0x53	; 83
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 64       	ori	r24, 0x40	; 64
    1184:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , TCCR0_WGM01) ;
    1186:	a3 e5       	ldi	r26, 0x53	; 83
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e3 e5       	ldi	r30, 0x53	; 83
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	88 60       	ori	r24, 0x08	; 8
    1192:	8c 93       	st	X, r24
			/*Set CTC Fast PWM MODE*/
			#if TIMER0_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
					CLR_BIT(TCCR0 , TCCR0_COM01) ;
			#elif TIMER0_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
					CLR_BIT(TCCR0 , TCCR0_COM00) ;
    1194:	a3 e5       	ldi	r26, 0x53	; 83
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e3 e5       	ldi	r30, 0x53	; 83
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7e       	andi	r24, 0xEF	; 239
    11a0:	8c 93       	st	X, r24
					SET_BIT(TCCR0 , TCCR0_COM01) ;
    11a2:	a3 e5       	ldi	r26, 0x53	; 83
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e3 e5       	ldi	r30, 0x53	; 83
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 62       	ori	r24, 0x20	; 32
    11ae:	8c 93       	st	X, r24
			#else
					#error "Wrong TIMER0_CTC_PWM_MODE Config"
			#endif

			/*Set the Required CTC Value*/
			OCR0 = TIMER0_CTC_VAL ;
    11b0:	ec e5       	ldi	r30, 0x5C	; 92
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	10 82       	st	Z, r1
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    11b6:	a3 e5       	ldi	r26, 0x53	; 83
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e3 e5       	ldi	r30, 0x53	; 83
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	88 7f       	andi	r24, 0xF8	; 248
    11c2:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    11c4:	a3 e5       	ldi	r26, 0x53	; 83
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e3 e5       	ldi	r30, 0x53	; 83
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	85 60       	ori	r24, 0x05	; 5
    11d0:	8c 93       	st	X, r24
}
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    11e0:	af e4       	ldi	r26, 0x4F	; 79
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	ef e4       	ldi	r30, 0x4F	; 79
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	8e 7f       	andi	r24, 0xFE	; 254
    11ec:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    11ee:	af e4       	ldi	r26, 0x4F	; 79
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ef e4       	ldi	r30, 0x4F	; 79
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	82 60       	ori	r24, 0x02	; 2
    11fa:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    11fc:	ae e4       	ldi	r26, 0x4E	; 78
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	ee e4       	ldi	r30, 0x4E	; 78
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	88 60       	ori	r24, 0x08	; 8
    1208:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    120a:	ae e4       	ldi	r26, 0x4E	; 78
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ee e4       	ldi	r30, 0x4E	; 78
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 61       	ori	r24, 0x10	; 16
    1216:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    1218:	ea e4       	ldi	r30, 0x4A	; 74
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	11 82       	std	Z+1, r1	; 0x01
    121e:	10 82       	st	Z, r1
			OCR1B = TIMER1_CTCB_VAL ;
    1220:	e8 e4       	ldi	r30, 0x48	; 72
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	11 82       	std	Z+1, r1	; 0x01
    1226:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    1228:	e6 e4       	ldi	r30, 0x46	; 70
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    1234:	ae e4       	ldi	r26, 0x4E	; 78
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	ee e4       	ldi	r30, 0x4E	; 78
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	80 64       	ori	r24, 0x40	; 64
    1240:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    1242:	af e4       	ldi	r26, 0x4F	; 79
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	ef e4       	ldi	r30, 0x4F	; 79
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8f 7b       	andi	r24, 0xBF	; 191
    124e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    1250:	af e4       	ldi	r26, 0x4F	; 79
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ef e4       	ldi	r30, 0x4F	; 79
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	80 68       	ori	r24, 0x80	; 128
    125c:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    125e:	af e4       	ldi	r26, 0x4F	; 79
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ef e4       	ldi	r30, 0x4F	; 79
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	8f 7e       	andi	r24, 0xEF	; 239
    126a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    126c:	af e4       	ldi	r26, 0x4F	; 79
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ef e4       	ldi	r30, 0x4F	; 79
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 62       	ori	r24, 0x20	; 32
    1278:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    127a:	a9 e5       	ldi	r26, 0x59	; 89
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e9 e5       	ldi	r30, 0x59	; 89
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8b 7f       	andi	r24, 0xFB	; 251
    1286:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    1288:	a9 e5       	ldi	r26, 0x59	; 89
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e9 e5       	ldi	r30, 0x59	; 89
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 7e       	andi	r24, 0xEF	; 239
    1294:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    1296:	a9 e5       	ldi	r26, 0x59	; 89
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e9 e5       	ldi	r30, 0x59	; 89
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	87 7f       	andi	r24, 0xF7	; 247
    12a2:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    12a4:	a9 e5       	ldi	r26, 0x59	; 89
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e9 e5       	ldi	r30, 0x59	; 89
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8f 7d       	andi	r24, 0xDF	; 223
    12b0:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    12b2:	ae e4       	ldi	r26, 0x4E	; 78
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ee e4       	ldi	r30, 0x4E	; 78
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	88 7f       	andi	r24, 0xF8	; 248
    12be:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    12c0:	ae e4       	ldi	r26, 0x4E	; 78
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	ee e4       	ldi	r30, 0x4E	; 78
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	82 60       	ori	r24, 0x02	; 2
    12cc:	8c 93       	st	X, r24


}
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
			#endif

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

			/*Initialize Waveform Generation Mode as Fast PWM Mode*/
			SET_BIT(TCCR2 , TCCR2_WGM20) ;
    12dc:	a5 e4       	ldi	r26, 0x45	; 69
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e4       	ldi	r30, 0x45	; 69
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	80 64       	ori	r24, 0x40	; 64
    12e8:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    12ea:	a5 e4       	ldi	r26, 0x45	; 69
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e4       	ldi	r30, 0x45	; 69
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	88 60       	ori	r24, 0x08	; 8
    12f6:	8c 93       	st	X, r24
			/*Set CTC Fast PWM MODE*/
			#if TIMER2_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
					CLR_BIT(TCCR2 , TCCR2_COM20) ;
					CLR_BIT(TCCR2 , TCCR2_COM21) ;
			#elif TIMER2_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
					CLR_BIT(TCCR2 , TCCR2_COM20) ;
    12f8:	a5 e4       	ldi	r26, 0x45	; 69
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e5 e4       	ldi	r30, 0x45	; 69
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8f 7e       	andi	r24, 0xEF	; 239
    1304:	8c 93       	st	X, r24
					SET_BIT(TCCR2 , TCCR2_COM21) ;
    1306:	a5 e4       	ldi	r26, 0x45	; 69
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e5 e4       	ldi	r30, 0x45	; 69
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	80 62       	ori	r24, 0x20	; 32
    1312:	8c 93       	st	X, r24
			#else
					#error "Wrong TIMER2_CTC_PWM_MODE Config"
			#endif

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    1314:	e3 e4       	ldi	r30, 0x43	; 67
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	10 82       	st	Z, r1
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    131a:	a5 e4       	ldi	r26, 0x45	; 69
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e5 e4       	ldi	r30, 0x45	; 69
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	88 7f       	andi	r24, 0xF8	; 248
    1326:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    1328:	a5 e4       	ldi	r26, 0x45	; 69
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e4       	ldi	r30, 0x45	; 69
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	85 60       	ori	r24, 0x05	; 5
    1334:	8c 93       	st	X, r24
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1348:	e2 e5       	ldi	r30, 0x52	; 82
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	80 83       	st	Z, r24
}
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <TIMER1_vSetPreload+0x6>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1366:	ec e4       	ldi	r30, 0x4C	; 76
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	0f 92       	push	r0
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1388:	e4 e4       	ldi	r30, 0x44	; 68
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	80 83       	st	Z, r24
}
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	0f 92       	push	r0
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    13a4:	ec e5       	ldi	r30, 0x5C	; 92
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	80 83       	st	Z, r24
}
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (u16 Copy_u16CTCA)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <TIMER1_vSetCTCA+0x6>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	9a 83       	std	Y+2, r25	; 0x02
    13c0:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    13c2:	ea e4       	ldi	r30, 0x4A	; 74
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	80 83       	st	Z, r24
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <TIMER1_vSetCTCB+0x6>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    13e6:	e8 e4       	ldi	r30, 0x48	; 72
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	80 83       	st	Z, r24
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1408:	e3 e4       	ldi	r30, 0x43	; 67
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	80 83       	st	Z, r24
}
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <TIMER1_vSetICR1+0x6>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    1426:	e6 e4       	ldi	r30, 0x46	; 70
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    1444:	e2 e5       	ldi	r30, 0x52	; 82
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1458:	ec e4       	ldi	r30, 0x4C	; 76
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    146e:	e4 e4       	ldi	r30, 0x44	; 68
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
}
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <TIMER_vSetPWM+0x6>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1488:	ea e4       	ldi	r30, 0x4A	; 74
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    14a6:	ae e4       	ldi	r26, 0x4E	; 78
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ee e4       	ldi	r30, 0x4E	; 78
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	80 64       	ori	r24, 0x40	; 64
    14b2:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    14b4:	a9 e5       	ldi	r26, 0x59	; 89
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e9 e5       	ldi	r30, 0x59	; 89
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	80 62       	ori	r24, 0x20	; 32
    14c0:	8c 93       	st	X, r24
}
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <TIMER_vICUSetTriggerEdge+0x6>
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    14d4:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	41 f4       	brne	.+16     	; 0x14ec <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    14dc:	ae e4       	ldi	r26, 0x4E	; 78
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ee e4       	ldi	r30, 0x4E	; 78
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	80 64       	ori	r24, 0x40	; 64
    14e8:	8c 93       	st	X, r24
    14ea:	0d c0       	rjmp	.+26     	; 0x1506 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	88 23       	and	r24, r24
    14f0:	41 f4       	brne	.+16     	; 0x1502 <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    14f2:	ae e4       	ldi	r26, 0x4E	; 78
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ee e4       	ldi	r30, 0x4E	; 78
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 7b       	andi	r24, 0xBF	; 191
    14fe:	8c 93       	st	X, r24
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    151a:	a9 e5       	ldi	r26, 0x59	; 89
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e9 e5       	ldi	r30, 0x59	; 89
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 62       	ori	r24, 0x20	; 32
    1526:	8c 93       	st	X, r24
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1536:	a9 e5       	ldi	r26, 0x59	; 89
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e9 e5       	ldi	r30, 0x59	; 89
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8f 7d       	andi	r24, 0xDF	; 223
    1542:	8c 93       	st	X, r24
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1552:	e6 e4       	ldi	r30, 0x46	; 70
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	91 81       	ldd	r25, Z+1	; 0x01
}
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <TIMER_vWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1568:	a1 e4       	ldi	r26, 0x41	; 65
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e1 e4       	ldi	r30, 0x41	; 65
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	88 7f       	andi	r24, 0xF8	; 248
    1574:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    1576:	a1 e4       	ldi	r26, 0x41	; 65
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e1 e4       	ldi	r30, 0x41	; 65
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	86 60       	ori	r24, 0x06	; 6
    1582:	8c 93       	st	X, r24
}
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    1592:	a1 e4       	ldi	r26, 0x41	; 65
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e1 e4       	ldi	r30, 0x41	; 65
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	88 60       	ori	r24, 0x08	; 8
    159e:	8c 93       	st	X, r24
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    15ae:	a1 e4       	ldi	r26, 0x41	; 65
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e1 e4       	ldi	r30, 0x41	; 65
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	88 61       	ori	r24, 0x18	; 24
    15ba:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    15bc:	e1 e4       	ldi	r30, 0x41	; 65
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	10 82       	st	Z, r1
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <TIMER_u8SetCallBack+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <TIMER_u8SetCallBack+0x8>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	9b 83       	std	Y+3, r25	; 0x03
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    15da:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	69 f0       	breq	.+26     	; 0x15fe <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	fc 01       	movw	r30, r24
    15f0:	e3 54       	subi	r30, 0x43	; 67
    15f2:	fa 4f       	sbci	r31, 0xFA	; 250
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	9b 81       	ldd	r25, Y+3	; 0x03
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1602:	89 81       	ldd	r24, Y+1	; 0x01
}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    163c:	80 91 d3 05 	lds	r24, 0x05D3
    1640:	90 91 d4 05 	lds	r25, 0x05D4
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	29 f0       	breq	.+10     	; 0x1652 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    1648:	e0 91 d3 05 	lds	r30, 0x05D3
    164c:	f0 91 d4 05 	lds	r31, 0x05D4
    1650:	09 95       	icall
	}
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	bf 91       	pop	r27
    165c:	af 91       	pop	r26
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	7f 91       	pop	r23
    1664:	6f 91       	pop	r22
    1666:	5f 91       	pop	r21
    1668:	4f 91       	pop	r20
    166a:	3f 91       	pop	r19
    166c:	2f 91       	pop	r18
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    16a2:	80 91 d1 05 	lds	r24, 0x05D1
    16a6:	90 91 d2 05 	lds	r25, 0x05D2
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    16ae:	e0 91 d1 05 	lds	r30, 0x05D1
    16b2:	f0 91 d2 05 	lds	r31, 0x05D2
    16b6:	09 95       	icall
	}
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	ff 91       	pop	r31
    16be:	ef 91       	pop	r30
    16c0:	bf 91       	pop	r27
    16c2:	af 91       	pop	r26
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	7f 91       	pop	r23
    16ca:	6f 91       	pop	r22
    16cc:	5f 91       	pop	r21
    16ce:	4f 91       	pop	r20
    16d0:	3f 91       	pop	r19
    16d2:	2f 91       	pop	r18
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	0f 90       	pop	r0
    16da:	1f 90       	pop	r1
    16dc:	18 95       	reti

000016de <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    16de:	1f 92       	push	r1
    16e0:	0f 92       	push	r0
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	0f 92       	push	r0
    16e6:	11 24       	eor	r1, r1
    16e8:	2f 93       	push	r18
    16ea:	3f 93       	push	r19
    16ec:	4f 93       	push	r20
    16ee:	5f 93       	push	r21
    16f0:	6f 93       	push	r22
    16f2:	7f 93       	push	r23
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	af 93       	push	r26
    16fa:	bf 93       	push	r27
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    1708:	80 91 cf 05 	lds	r24, 0x05CF
    170c:	90 91 d0 05 	lds	r25, 0x05D0
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	29 f0       	breq	.+10     	; 0x171e <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    1714:	e0 91 cf 05 	lds	r30, 0x05CF
    1718:	f0 91 d0 05 	lds	r31, 0x05D0
    171c:	09 95       	icall
	}
}
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	ff 91       	pop	r31
    1724:	ef 91       	pop	r30
    1726:	bf 91       	pop	r27
    1728:	af 91       	pop	r26
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	0f 90       	pop	r0
    1740:	1f 90       	pop	r1
    1742:	18 95       	reti

00001744 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    1744:	1f 92       	push	r1
    1746:	0f 92       	push	r0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	0f 92       	push	r0
    174c:	11 24       	eor	r1, r1
    174e:	2f 93       	push	r18
    1750:	3f 93       	push	r19
    1752:	4f 93       	push	r20
    1754:	5f 93       	push	r21
    1756:	6f 93       	push	r22
    1758:	7f 93       	push	r23
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
    175e:	af 93       	push	r26
    1760:	bf 93       	push	r27
    1762:	ef 93       	push	r30
    1764:	ff 93       	push	r31
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    176e:	80 91 cd 05 	lds	r24, 0x05CD
    1772:	90 91 ce 05 	lds	r25, 0x05CE
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	29 f0       	breq	.+10     	; 0x1784 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    177a:	e0 91 cd 05 	lds	r30, 0x05CD
    177e:	f0 91 ce 05 	lds	r31, 0x05CE
    1782:	09 95       	icall
	}
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	ff 91       	pop	r31
    178a:	ef 91       	pop	r30
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	0f 90       	pop	r0
    17a6:	1f 90       	pop	r1
    17a8:	18 95       	reti

000017aa <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    17aa:	1f 92       	push	r1
    17ac:	0f 92       	push	r0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	11 24       	eor	r1, r1
    17b4:	2f 93       	push	r18
    17b6:	3f 93       	push	r19
    17b8:	4f 93       	push	r20
    17ba:	5f 93       	push	r21
    17bc:	6f 93       	push	r22
    17be:	7f 93       	push	r23
    17c0:	8f 93       	push	r24
    17c2:	9f 93       	push	r25
    17c4:	af 93       	push	r26
    17c6:	bf 93       	push	r27
    17c8:	ef 93       	push	r30
    17ca:	ff 93       	push	r31
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    17d4:	80 91 cb 05 	lds	r24, 0x05CB
    17d8:	90 91 cc 05 	lds	r25, 0x05CC
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	29 f0       	breq	.+10     	; 0x17ea <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    17e0:	e0 91 cb 05 	lds	r30, 0x05CB
    17e4:	f0 91 cc 05 	lds	r31, 0x05CC
    17e8:	09 95       	icall
	}
}
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	ff 91       	pop	r31
    17f0:	ef 91       	pop	r30
    17f2:	bf 91       	pop	r27
    17f4:	af 91       	pop	r26
    17f6:	9f 91       	pop	r25
    17f8:	8f 91       	pop	r24
    17fa:	7f 91       	pop	r23
    17fc:	6f 91       	pop	r22
    17fe:	5f 91       	pop	r21
    1800:	4f 91       	pop	r20
    1802:	3f 91       	pop	r19
    1804:	2f 91       	pop	r18
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	2f 93       	push	r18
    181c:	3f 93       	push	r19
    181e:	4f 93       	push	r20
    1820:	5f 93       	push	r21
    1822:	6f 93       	push	r22
    1824:	7f 93       	push	r23
    1826:	8f 93       	push	r24
    1828:	9f 93       	push	r25
    182a:	af 93       	push	r26
    182c:	bf 93       	push	r27
    182e:	ef 93       	push	r30
    1830:	ff 93       	push	r31
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    183a:	80 91 c9 05 	lds	r24, 0x05C9
    183e:	90 91 ca 05 	lds	r25, 0x05CA
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	29 f0       	breq	.+10     	; 0x1850 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    1846:	e0 91 c9 05 	lds	r30, 0x05C9
    184a:	f0 91 ca 05 	lds	r31, 0x05CA
    184e:	09 95       	icall
	}
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	bf 91       	pop	r27
    185a:	af 91       	pop	r26
    185c:	9f 91       	pop	r25
    185e:	8f 91       	pop	r24
    1860:	7f 91       	pop	r23
    1862:	6f 91       	pop	r22
    1864:	5f 91       	pop	r21
    1866:	4f 91       	pop	r20
    1868:	3f 91       	pop	r19
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	2f 93       	push	r18
    1882:	3f 93       	push	r19
    1884:	4f 93       	push	r20
    1886:	5f 93       	push	r21
    1888:	6f 93       	push	r22
    188a:	7f 93       	push	r23
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    18a0:	80 91 c7 05 	lds	r24, 0x05C7
    18a4:	90 91 c8 05 	lds	r25, 0x05C8
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    18ac:	e0 91 c7 05 	lds	r30, 0x05C7
    18b0:	f0 91 c8 05 	lds	r31, 0x05C8
    18b4:	09 95       	icall
	}
}
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	ff 91       	pop	r31
    18bc:	ef 91       	pop	r30
    18be:	bf 91       	pop	r27
    18c0:	af 91       	pop	r26
    18c2:	9f 91       	pop	r25
    18c4:	8f 91       	pop	r24
    18c6:	7f 91       	pop	r23
    18c8:	6f 91       	pop	r22
    18ca:	5f 91       	pop	r21
    18cc:	4f 91       	pop	r20
    18ce:	3f 91       	pop	r19
    18d0:	2f 91       	pop	r18
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	0f 90       	pop	r0
    18d8:	1f 90       	pop	r1
    18da:	18 95       	reti

000018dc <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    1906:	80 91 c5 05 	lds	r24, 0x05C5
    190a:	90 91 c6 05 	lds	r25, 0x05C6
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	29 f0       	breq	.+10     	; 0x191c <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    1912:	e0 91 c5 05 	lds	r30, 0x05C5
    1916:	f0 91 c6 05 	lds	r31, 0x05C6
    191a:	09 95       	icall
	}
}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <SPI_vInit>:
static u8 SPI_u8State = IDLE;

/*___________________________________________________________________________________________________________________*/

void SPI_vInit(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
/*Data Order*/
#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
	SET_BIT(SPCR, SPCR_DORD);
#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
	CLR_BIT(SPCR, SPCR_DORD);
    194a:	ad e2       	ldi	r26, 0x2D	; 45
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	ed e2       	ldi	r30, 0x2D	; 45
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8f 7d       	andi	r24, 0xDF	; 223
    1956:	8c 93       	st	X, r24
#error "wrong SPI_DATA_ORDER config"
#endif

/*Master/Slave Select*/
#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
	SET_BIT(SPCR, SPCR_MSTR);
    1958:	ad e2       	ldi	r26, 0x2D	; 45
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ed e2       	ldi	r30, 0x2D	; 45
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	80 61       	ori	r24, 0x10	; 16
    1964:	8c 93       	st	X, r24
	DIO_enumSetPinDir(DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	65 e0       	ldi	r22, 0x05	; 5
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_enumSetPinDir>
	DIO_enumSetPinDir(DIO_PORTB, DIO_PIN7, DIO_PIN_OUTPUT);
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	67 e0       	ldi	r22, 0x07	; 7
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_enumSetPinDir>
#error "wrong SPI_MASTER_SLAVE_SELECT config"
#endif

/*Clock Polarity*/
#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
	CLR_BIT(SPCR, SPCR_CPOL);
    197a:	ad e2       	ldi	r26, 0x2D	; 45
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ed e2       	ldi	r30, 0x2D	; 45
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	87 7f       	andi	r24, 0xF7	; 247
    1986:	8c 93       	st	X, r24
#error "wrong SPI_CLOCK_POLARITY config"
#endif

/*Clock Phase*/
#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
	CLR_BIT(SPCR, SPCR_CPHA);
    1988:	ad e2       	ldi	r26, 0x2D	; 45
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ed e2       	ldi	r30, 0x2D	; 45
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8b 7f       	andi	r24, 0xFB	; 251
    1994:	8c 93       	st	X, r24
#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
	SET_BIT(SPCR, SPCR_SPR0);
	CLR_BIT(SPCR, SPCR_SPR1);
	SET_BIT(SPSR, SPSR_SPI2X);
#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
	SET_BIT(SPCR, SPCR_SPR0);
    1996:	ad e2       	ldi	r26, 0x2D	; 45
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	ed e2       	ldi	r30, 0x2D	; 45
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	81 60       	ori	r24, 0x01	; 1
    19a2:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
    19a4:	ad e2       	ldi	r26, 0x2D	; 45
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ed e2       	ldi	r30, 0x2D	; 45
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8d 7f       	andi	r24, 0xFD	; 253
    19b0:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
    19b2:	ae e2       	ldi	r26, 0x2E	; 46
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ee e2       	ldi	r30, 0x2E	; 46
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8e 7f       	andi	r24, 0xFE	; 254
    19be:	8c 93       	st	X, r24
#error "wrong SPI_CLOCK_RATE config"
#endif

/*SPI Interrupt Enable*/
#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
	CLR_BIT(SPCR, SPCR_SPIE);
    19c0:	ad e2       	ldi	r26, 0x2D	; 45
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ed e2       	ldi	r30, 0x2D	; 45
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 77       	andi	r24, 0x7F	; 127
    19cc:	8c 93       	st	X, r24
#error "wrong SPI_INTERRUPT_ENABLE_MODE config"
#endif

/*SPI Enable*/
#if SPI_ENABLE_MODE == SPI_ENABLE
	SET_BIT(SPCR, SPCR_SPE);
    19ce:	ad e2       	ldi	r26, 0x2D	; 45
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ed e2       	ldi	r30, 0x2D	; 45
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	80 64       	ori	r24, 0x40	; 64
    19da:	8c 93       	st	X, r24
#elif SPI_ENABLE_MODE == SPI_DISABLE
	CLR_BIT(SPCR, SPCR_SPE);
#else
#error "wrong SPI_ENABLE_MODE config"
#endif
}
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <SPI_u8InitConfig>:
			6-SPI_FREQ_DIVIDED_BY_64
			7-SPI_FREQ_DIVIDED_BY_128
*/

u8 SPI_u8InitConfig(SPI_CONFIG *spi)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	61 97       	sbiw	r28, 0x11	; 17
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	9b 83       	std	Y+3, r25	; 0x03
    19f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    19fa:	19 82       	std	Y+1, r1	; 0x01

	if (
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <SPI_u8InitConfig+0x24>
    1a04:	cd c1       	rjmp	.+922    	; 0x1da0 <SPI_u8InitConfig+0x3be>
    1a06:	ea 81       	ldd	r30, Y+2	; 0x02
    1a08:	fb 81       	ldd	r31, Y+3	; 0x03
    1a0a:	85 81       	ldd	r24, Z+5	; 0x05
    1a0c:	88 23       	and	r24, r24
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <SPI_u8InitConfig+0x30>
    1a10:	c7 c1       	rjmp	.+910    	; 0x1da0 <SPI_u8InitConfig+0x3be>
    1a12:	ea 81       	ldd	r30, Y+2	; 0x02
    1a14:	fb 81       	ldd	r31, Y+3	; 0x03
    1a16:	84 81       	ldd	r24, Z+4	; 0x04
    1a18:	88 23       	and	r24, r24
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <SPI_u8InitConfig+0x3c>
    1a1c:	c1 c1       	rjmp	.+898    	; 0x1da0 <SPI_u8InitConfig+0x3be>
    1a1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a20:	fb 81       	ldd	r31, Y+3	; 0x03
    1a22:	86 81       	ldd	r24, Z+6	; 0x06
    1a24:	88 23       	and	r24, r24
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <SPI_u8InitConfig+0x48>
    1a28:	bb c1       	rjmp	.+886    	; 0x1da0 <SPI_u8InitConfig+0x3be>
    1a2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	88 23       	and	r24, r24
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <SPI_u8InitConfig+0x54>
    1a34:	b5 c1       	rjmp	.+874    	; 0x1da0 <SPI_u8InitConfig+0x3be>
    1a36:	ea 81       	ldd	r30, Y+2	; 0x02
    1a38:	fb 81       	ldd	r31, Y+3	; 0x03
    1a3a:	80 81       	ld	r24, Z
    1a3c:	88 23       	and	r24, r24
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <SPI_u8InitConfig+0x60>
    1a40:	af c1       	rjmp	.+862    	; 0x1da0 <SPI_u8InitConfig+0x3be>
    1a42:	ea 81       	ldd	r30, Y+2	; 0x02
    1a44:	fb 81       	ldd	r31, Y+3	; 0x03
    1a46:	83 81       	ldd	r24, Z+3	; 0x03
    1a48:	88 23       	and	r24, r24
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <SPI_u8InitConfig+0x6c>
    1a4c:	a9 c1       	rjmp	.+850    	; 0x1da0 <SPI_u8InitConfig+0x3be>
    1a4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a50:	fb 81       	ldd	r31, Y+3	; 0x03
    1a52:	81 81       	ldd	r24, Z+1	; 0x01
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <SPI_u8InitConfig+0x78>
    1a58:	a3 c1       	rjmp	.+838    	; 0x1da0 <SPI_u8InitConfig+0x3be>
			(spi->SPI_u8DataOrder != NULL)         &&
			(spi->SPI_u8InterruptEnable != NULL)   &&
			(spi->SPI_u8MasterSlaveSelect != NULL) &&
			(spi->SPI_u8SPIEnable != NULL))
	{
		switch (spi->SPI_u8ClockPhase)
    1a5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a5e:	85 81       	ldd	r24, Z+5	; 0x05
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	39 8b       	std	Y+17, r19	; 0x11
    1a66:	28 8b       	std	Y+16, r18	; 0x10
    1a68:	88 89       	ldd	r24, Y+16	; 0x10
    1a6a:	99 89       	ldd	r25, Y+17	; 0x11
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	31 f0       	breq	.+12     	; 0x1a7c <SPI_u8InitConfig+0x9a>
    1a70:	28 89       	ldd	r18, Y+16	; 0x10
    1a72:	39 89       	ldd	r19, Y+17	; 0x11
    1a74:	21 30       	cpi	r18, 0x01	; 1
    1a76:	31 05       	cpc	r19, r1
    1a78:	49 f0       	breq	.+18     	; 0x1a8c <SPI_u8InitConfig+0xaa>
    1a7a:	10 c0       	rjmp	.+32     	; 0x1a9c <SPI_u8InitConfig+0xba>
		{
		case SPI_SAMPLE_LEADING_SETUP_TRAILING:
			CLR_BIT(SPCR, SPCR_CPHA);
    1a7c:	ad e2       	ldi	r26, 0x2D	; 45
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ed e2       	ldi	r30, 0x2D	; 45
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8b 7f       	andi	r24, 0xFB	; 251
    1a88:	8c 93       	st	X, r24
    1a8a:	0a c0       	rjmp	.+20     	; 0x1aa0 <SPI_u8InitConfig+0xbe>
			break;
		case SPI_SETUP_LEADING_SAMPLE_TRAILING:
			SET_BIT(SPCR, SPCR_CPHA);
    1a8c:	ad e2       	ldi	r26, 0x2D	; 45
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	ed e2       	ldi	r30, 0x2D	; 45
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	84 60       	ori	r24, 0x04	; 4
    1a98:	8c 93       	st	X, r24
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <SPI_u8InitConfig+0xbe>
			break;
		default:
			Local_u8ErrorState = NOK;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8ClockPolarity)
    1aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa4:	84 81       	ldd	r24, Z+4	; 0x04
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	3f 87       	std	Y+15, r19	; 0x0f
    1aac:	2e 87       	std	Y+14, r18	; 0x0e
    1aae:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ab0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	31 f0       	breq	.+12     	; 0x1ac2 <SPI_u8InitConfig+0xe0>
    1ab6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ab8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1aba:	21 30       	cpi	r18, 0x01	; 1
    1abc:	31 05       	cpc	r19, r1
    1abe:	49 f0       	breq	.+18     	; 0x1ad2 <SPI_u8InitConfig+0xf0>
    1ac0:	10 c0       	rjmp	.+32     	; 0x1ae2 <SPI_u8InitConfig+0x100>
		{
		case SPI_RISING_LEADING_FALLING_TRAILING:
			CLR_BIT(SPCR, SPCR_CPOL);
    1ac2:	ad e2       	ldi	r26, 0x2D	; 45
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	ed e2       	ldi	r30, 0x2D	; 45
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	87 7f       	andi	r24, 0xF7	; 247
    1ace:	8c 93       	st	X, r24
    1ad0:	0a c0       	rjmp	.+20     	; 0x1ae6 <SPI_u8InitConfig+0x104>
			break;
		case SPI_FALLING_LEADING_RISING_TRAILING:
			SET_BIT(SPCR, SPCR_CPOL);
    1ad2:	ad e2       	ldi	r26, 0x2D	; 45
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ed e2       	ldi	r30, 0x2D	; 45
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	88 60       	ori	r24, 0x08	; 8
    1ade:	8c 93       	st	X, r24
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <SPI_u8InitConfig+0x104>
			break;
		default:
			Local_u8ErrorState = NOK;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8ClockRate)
    1ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aea:	86 81       	ldd	r24, Z+6	; 0x06
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3d 87       	std	Y+13, r19	; 0x0d
    1af2:	2c 87       	std	Y+12, r18	; 0x0c
    1af4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1af6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	91 05       	cpc	r25, r1
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <SPI_u8InitConfig+0x11e>
    1afe:	6a c0       	rjmp	.+212    	; 0x1bd4 <SPI_u8InitConfig+0x1f2>
    1b00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b02:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b04:	24 30       	cpi	r18, 0x04	; 4
    1b06:	31 05       	cpc	r19, r1
    1b08:	84 f4       	brge	.+32     	; 0x1b2a <SPI_u8InitConfig+0x148>
    1b0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	91 05       	cpc	r25, r1
    1b12:	a1 f1       	breq	.+104    	; 0x1b7c <SPI_u8InitConfig+0x19a>
    1b14:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b16:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	0c f0       	brlt	.+2      	; 0x1b20 <SPI_u8InitConfig+0x13e>
    1b1e:	44 c0       	rjmp	.+136    	; 0x1ba8 <SPI_u8InitConfig+0x1c6>
    1b20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b22:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	a1 f0       	breq	.+40     	; 0x1b50 <SPI_u8InitConfig+0x16e>
    1b28:	ad c0       	rjmp	.+346    	; 0x1c84 <SPI_u8InitConfig+0x2a2>
    1b2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b2c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b2e:	25 30       	cpi	r18, 0x05	; 5
    1b30:	31 05       	cpc	r19, r1
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <SPI_u8InitConfig+0x154>
    1b34:	7b c0       	rjmp	.+246    	; 0x1c2c <SPI_u8InitConfig+0x24a>
    1b36:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b38:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b3a:	85 30       	cpi	r24, 0x05	; 5
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	0c f4       	brge	.+2      	; 0x1b42 <SPI_u8InitConfig+0x160>
    1b40:	5f c0       	rjmp	.+190    	; 0x1c00 <SPI_u8InitConfig+0x21e>
    1b42:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b44:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b46:	26 30       	cpi	r18, 0x06	; 6
    1b48:	31 05       	cpc	r19, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <SPI_u8InitConfig+0x16c>
    1b4c:	85 c0       	rjmp	.+266    	; 0x1c58 <SPI_u8InitConfig+0x276>
    1b4e:	9a c0       	rjmp	.+308    	; 0x1c84 <SPI_u8InitConfig+0x2a2>
		{
		case SPI_FREQ_DIVIDED_BY_2:
			CLR_BIT(SPCR, SPCR_SPR0);
    1b50:	ad e2       	ldi	r26, 0x2D	; 45
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ed e2       	ldi	r30, 0x2D	; 45
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	8e 7f       	andi	r24, 0xFE	; 254
    1b5c:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    1b5e:	ad e2       	ldi	r26, 0x2D	; 45
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	ed e2       	ldi	r30, 0x2D	; 45
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8d 7f       	andi	r24, 0xFD	; 253
    1b6a:	8c 93       	st	X, r24
			SET_BIT(SPSR, SPSR_SPI2X);
    1b6c:	ae e2       	ldi	r26, 0x2E	; 46
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ee e2       	ldi	r30, 0x2E	; 46
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	81 60       	ori	r24, 0x01	; 1
    1b78:	8c 93       	st	X, r24
    1b7a:	86 c0       	rjmp	.+268    	; 0x1c88 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_4:
			CLR_BIT(SPCR, SPCR_SPR0);
    1b7c:	ad e2       	ldi	r26, 0x2D	; 45
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	ed e2       	ldi	r30, 0x2D	; 45
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8e 7f       	andi	r24, 0xFE	; 254
    1b88:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    1b8a:	ad e2       	ldi	r26, 0x2D	; 45
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ed e2       	ldi	r30, 0x2D	; 45
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	8d 7f       	andi	r24, 0xFD	; 253
    1b96:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    1b98:	ae e2       	ldi	r26, 0x2E	; 46
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ee e2       	ldi	r30, 0x2E	; 46
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8e 7f       	andi	r24, 0xFE	; 254
    1ba4:	8c 93       	st	X, r24
    1ba6:	70 c0       	rjmp	.+224    	; 0x1c88 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_8:
			SET_BIT(SPCR, SPCR_SPR0);
    1ba8:	ad e2       	ldi	r26, 0x2D	; 45
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ed e2       	ldi	r30, 0x2D	; 45
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	81 60       	ori	r24, 0x01	; 1
    1bb4:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    1bb6:	ad e2       	ldi	r26, 0x2D	; 45
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ed e2       	ldi	r30, 0x2D	; 45
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8d 7f       	andi	r24, 0xFD	; 253
    1bc2:	8c 93       	st	X, r24
			SET_BIT(SPSR, SPSR_SPI2X);
    1bc4:	ae e2       	ldi	r26, 0x2E	; 46
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ee e2       	ldi	r30, 0x2E	; 46
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	81 60       	ori	r24, 0x01	; 1
    1bd0:	8c 93       	st	X, r24
    1bd2:	5a c0       	rjmp	.+180    	; 0x1c88 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_16:
			SET_BIT(SPCR, SPCR_SPR0);
    1bd4:	ad e2       	ldi	r26, 0x2D	; 45
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ed e2       	ldi	r30, 0x2D	; 45
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	81 60       	ori	r24, 0x01	; 1
    1be0:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    1be2:	ad e2       	ldi	r26, 0x2D	; 45
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	ed e2       	ldi	r30, 0x2D	; 45
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8d 7f       	andi	r24, 0xFD	; 253
    1bee:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    1bf0:	ae e2       	ldi	r26, 0x2E	; 46
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ee e2       	ldi	r30, 0x2E	; 46
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	8e 7f       	andi	r24, 0xFE	; 254
    1bfc:	8c 93       	st	X, r24
    1bfe:	44 c0       	rjmp	.+136    	; 0x1c88 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_32:
			CLR_BIT(SPCR, SPCR_SPR0);
    1c00:	ad e2       	ldi	r26, 0x2D	; 45
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	ed e2       	ldi	r30, 0x2D	; 45
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	8e 7f       	andi	r24, 0xFE	; 254
    1c0c:	8c 93       	st	X, r24
			SET_BIT(SPCR, SPCR_SPR1);
    1c0e:	ad e2       	ldi	r26, 0x2D	; 45
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ed e2       	ldi	r30, 0x2D	; 45
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	82 60       	ori	r24, 0x02	; 2
    1c1a:	8c 93       	st	X, r24
			SET_BIT(SPSR, SPSR_SPI2X);
    1c1c:	ae e2       	ldi	r26, 0x2E	; 46
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	ee e2       	ldi	r30, 0x2E	; 46
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	81 60       	ori	r24, 0x01	; 1
    1c28:	8c 93       	st	X, r24
    1c2a:	2e c0       	rjmp	.+92     	; 0x1c88 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_64:
			CLR_BIT(SPCR, SPCR_SPR0);
    1c2c:	ad e2       	ldi	r26, 0x2D	; 45
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	ed e2       	ldi	r30, 0x2D	; 45
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	8e 7f       	andi	r24, 0xFE	; 254
    1c38:	8c 93       	st	X, r24
			SET_BIT(SPCR, SPCR_SPR1);
    1c3a:	ad e2       	ldi	r26, 0x2D	; 45
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	ed e2       	ldi	r30, 0x2D	; 45
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	82 60       	ori	r24, 0x02	; 2
    1c46:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    1c48:	ae e2       	ldi	r26, 0x2E	; 46
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ee e2       	ldi	r30, 0x2E	; 46
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8e 7f       	andi	r24, 0xFE	; 254
    1c54:	8c 93       	st	X, r24
    1c56:	18 c0       	rjmp	.+48     	; 0x1c88 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_128:
			SET_BIT(SPCR, SPCR_SPR0);
    1c58:	ad e2       	ldi	r26, 0x2D	; 45
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ed e2       	ldi	r30, 0x2D	; 45
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	81 60       	ori	r24, 0x01	; 1
    1c64:	8c 93       	st	X, r24
			SET_BIT(SPCR, SPCR_SPR1);
    1c66:	ad e2       	ldi	r26, 0x2D	; 45
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ed e2       	ldi	r30, 0x2D	; 45
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	82 60       	ori	r24, 0x02	; 2
    1c72:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    1c74:	ae e2       	ldi	r26, 0x2E	; 46
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ee e2       	ldi	r30, 0x2E	; 46
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8e 7f       	andi	r24, 0xFE	; 254
    1c80:	8c 93       	st	X, r24
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <SPI_u8InitConfig+0x2a6>
			break;
		default:
			Local_u8ErrorState = NOK;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8DataOrder)
    1c88:	ea 81       	ldd	r30, Y+2	; 0x02
    1c8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	3b 87       	std	Y+11, r19	; 0x0b
    1c94:	2a 87       	std	Y+10, r18	; 0x0a
    1c96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	69 f0       	breq	.+26     	; 0x1cb8 <SPI_u8InitConfig+0x2d6>
    1c9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ca0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ca2:	21 30       	cpi	r18, 0x01	; 1
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	81 f4       	brne	.+32     	; 0x1cc8 <SPI_u8InitConfig+0x2e6>
		{
		case SPI_DATA_MSP_FIRST:
			CLR_BIT(SPCR, SPCR_DORD);
    1ca8:	ad e2       	ldi	r26, 0x2D	; 45
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	ed e2       	ldi	r30, 0x2D	; 45
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8f 7d       	andi	r24, 0xDF	; 223
    1cb4:	8c 93       	st	X, r24
    1cb6:	0a c0       	rjmp	.+20     	; 0x1ccc <SPI_u8InitConfig+0x2ea>
			break;
		case SPI_DATA_LSB_FIRST:
			SET_BIT(SPCR, SPCR_DORD);
    1cb8:	ad e2       	ldi	r26, 0x2D	; 45
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	ed e2       	ldi	r30, 0x2D	; 45
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 62       	ori	r24, 0x20	; 32
    1cc4:	8c 93       	st	X, r24
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <SPI_u8InitConfig+0x2ea>
			break;
		default:
			Local_u8ErrorState = NOK;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8MasterSlaveSelect)
    1ccc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cce:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd0:	83 81       	ldd	r24, Z+3	; 0x03
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	39 87       	std	Y+9, r19	; 0x09
    1cd8:	28 87       	std	Y+8, r18	; 0x08
    1cda:	88 85       	ldd	r24, Y+8	; 0x08
    1cdc:	99 85       	ldd	r25, Y+9	; 0x09
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	31 f0       	breq	.+12     	; 0x1cee <SPI_u8InitConfig+0x30c>
    1ce2:	28 85       	ldd	r18, Y+8	; 0x08
    1ce4:	39 85       	ldd	r19, Y+9	; 0x09
    1ce6:	21 30       	cpi	r18, 0x01	; 1
    1ce8:	31 05       	cpc	r19, r1
    1cea:	49 f0       	breq	.+18     	; 0x1cfe <SPI_u8InitConfig+0x31c>
    1cec:	10 c0       	rjmp	.+32     	; 0x1d0e <SPI_u8InitConfig+0x32c>
		{
		case SPI_MASTER:
			SET_BIT(SPCR, SPCR_MSTR);
    1cee:	ad e2       	ldi	r26, 0x2D	; 45
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	ed e2       	ldi	r30, 0x2D	; 45
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 61       	ori	r24, 0x10	; 16
    1cfa:	8c 93       	st	X, r24
    1cfc:	0a c0       	rjmp	.+20     	; 0x1d12 <SPI_u8InitConfig+0x330>
			break;
		case SPI_SLAVE:
			CLR_BIT(SPCR, SPCR_MSTR);
    1cfe:	ad e2       	ldi	r26, 0x2D	; 45
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	ed e2       	ldi	r30, 0x2D	; 45
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	8f 7e       	andi	r24, 0xEF	; 239
    1d0a:	8c 93       	st	X, r24
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <SPI_u8InitConfig+0x330>
			break;
		default:
			Local_u8ErrorState = NOK;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8InterruptEnable)
    1d12:	ea 81       	ldd	r30, Y+2	; 0x02
    1d14:	fb 81       	ldd	r31, Y+3	; 0x03
    1d16:	80 81       	ld	r24, Z
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	3f 83       	std	Y+7, r19	; 0x07
    1d1e:	2e 83       	std	Y+6, r18	; 0x06
    1d20:	8e 81       	ldd	r24, Y+6	; 0x06
    1d22:	9f 81       	ldd	r25, Y+7	; 0x07
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	31 f0       	breq	.+12     	; 0x1d34 <SPI_u8InitConfig+0x352>
    1d28:	2e 81       	ldd	r18, Y+6	; 0x06
    1d2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d2c:	21 30       	cpi	r18, 0x01	; 1
    1d2e:	31 05       	cpc	r19, r1
    1d30:	49 f0       	breq	.+18     	; 0x1d44 <SPI_u8InitConfig+0x362>
    1d32:	10 c0       	rjmp	.+32     	; 0x1d54 <SPI_u8InitConfig+0x372>
		{
		case SPI_INTERRUPT_DISABLE:
			CLR_BIT(SPCR, SPCR_SPIE);
    1d34:	ad e2       	ldi	r26, 0x2D	; 45
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	ed e2       	ldi	r30, 0x2D	; 45
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 77       	andi	r24, 0x7F	; 127
    1d40:	8c 93       	st	X, r24
    1d42:	0a c0       	rjmp	.+20     	; 0x1d58 <SPI_u8InitConfig+0x376>
			break;
		case SPI_INTERRUPT_ENABLE:
			SET_BIT(SPCR, SPCR_SPIE);
    1d44:	ad e2       	ldi	r26, 0x2D	; 45
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	ed e2       	ldi	r30, 0x2D	; 45
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	80 68       	ori	r24, 0x80	; 128
    1d50:	8c 93       	st	X, r24
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <SPI_u8InitConfig+0x376>
			break;
		default:
			Local_u8ErrorState = NOK;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8SPIEnable)
    1d58:	ea 81       	ldd	r30, Y+2	; 0x02
    1d5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d5c:	81 81       	ldd	r24, Z+1	; 0x01
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	3d 83       	std	Y+5, r19	; 0x05
    1d64:	2c 83       	std	Y+4, r18	; 0x04
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	31 f0       	breq	.+12     	; 0x1d7a <SPI_u8InitConfig+0x398>
    1d6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d70:	3d 81       	ldd	r19, Y+5	; 0x05
    1d72:	21 30       	cpi	r18, 0x01	; 1
    1d74:	31 05       	cpc	r19, r1
    1d76:	49 f0       	breq	.+18     	; 0x1d8a <SPI_u8InitConfig+0x3a8>
    1d78:	10 c0       	rjmp	.+32     	; 0x1d9a <SPI_u8InitConfig+0x3b8>
		{
		case SPI_DISABLE:
			CLR_BIT(SPCR, SPCR_SPE);
    1d7a:	ad e2       	ldi	r26, 0x2D	; 45
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	ed e2       	ldi	r30, 0x2D	; 45
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 7b       	andi	r24, 0xBF	; 191
    1d86:	8c 93       	st	X, r24
    1d88:	0d c0       	rjmp	.+26     	; 0x1da4 <SPI_u8InitConfig+0x3c2>
			break;
		case SPI_ENABLE:
			SET_BIT(SPCR, SPCR_SPE);
    1d8a:	ad e2       	ldi	r26, 0x2D	; 45
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ed e2       	ldi	r30, 0x2D	; 45
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	80 64       	ori	r24, 0x40	; 64
    1d96:	8c 93       	st	X, r24
    1d98:	05 c0       	rjmp	.+10     	; 0x1da4 <SPI_u8InitConfig+0x3c2>
			break;
		default:
			Local_u8ErrorState = NOK;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <SPI_u8InitConfig+0x3c2>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da6:	61 96       	adiw	r28, 0x11	; 17
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <SPI_u8Tranceive>:
 *		Copy_u8RData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 SPI_u8Tranceive(u8 Copy_u8TData, u8 *Copy_u8RData)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	28 97       	sbiw	r28, 0x08	; 8
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	8e 83       	std	Y+6, r24	; 0x06
    1dce:	78 87       	std	Y+8, r23	; 0x08
    1dd0:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK;
    1dd2:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32TimeoutCounter = 0;
    1dd4:	19 82       	std	Y+1, r1	; 0x01
    1dd6:	1a 82       	std	Y+2, r1	; 0x02
    1dd8:	1b 82       	std	Y+3, r1	; 0x03
    1dda:	1c 82       	std	Y+4, r1	; 0x04

	if (SPI_u8State == IDLE)
    1ddc:	80 91 d3 05 	lds	r24, 0x05D3
    1de0:	88 23       	and	r24, r24
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <SPI_u8Tranceive+0x2e>
    1de4:	42 c0       	rjmp	.+132    	; 0x1e6a <SPI_u8Tranceive+0xb2>
	{
		SPI_u8State = BUSY;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	80 93 d3 05 	sts	0x05D3, r24

		SPDR = Copy_u8TData;
    1dec:	ef e2       	ldi	r30, 0x2F	; 47
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	80 83       	st	Z, r24
    1df4:	0b c0       	rjmp	.+22     	; 0x1e0c <SPI_u8Tranceive+0x54>

		while (((READ_BIT(SPSR, SPSR_SPIF)) == 0) && (Local_u32TimeoutCounter < SPI_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	ab 81       	ldd	r26, Y+3	; 0x03
    1dfc:	bc 81       	ldd	r27, Y+4	; 0x04
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	a1 1d       	adc	r26, r1
    1e02:	b1 1d       	adc	r27, r1
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	ab 83       	std	Y+3, r26	; 0x03
    1e0a:	bc 83       	std	Y+4, r27	; 0x04
	{
		SPI_u8State = BUSY;

		SPDR = Copy_u8TData;

		while (((READ_BIT(SPSR, SPSR_SPIF)) == 0) && (Local_u32TimeoutCounter < SPI_u32TIMEOUT))
    1e0c:	ee e2       	ldi	r30, 0x2E	; 46
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	88 1f       	adc	r24, r24
    1e14:	88 27       	eor	r24, r24
    1e16:	88 1f       	adc	r24, r24
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	90 70       	andi	r25, 0x00	; 0
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	61 f4       	brne	.+24     	; 0x1e3a <SPI_u8Tranceive+0x82>
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	ab 81       	ldd	r26, Y+3	; 0x03
    1e28:	bc 81       	ldd	r27, Y+4	; 0x04
    1e2a:	80 31       	cpi	r24, 0x10	; 16
    1e2c:	27 e2       	ldi	r18, 0x27	; 39
    1e2e:	92 07       	cpc	r25, r18
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	a2 07       	cpc	r26, r18
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	b2 07       	cpc	r27, r18
    1e38:	f0 f2       	brcs	.-68     	; 0x1df6 <SPI_u8Tranceive+0x3e>
		{
			Local_u32TimeoutCounter++;
		}
		if (Local_u32TimeoutCounter == SPI_u32TIMEOUT)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e40:	bc 81       	ldd	r27, Y+4	; 0x04
    1e42:	80 31       	cpi	r24, 0x10	; 16
    1e44:	27 e2       	ldi	r18, 0x27	; 39
    1e46:	92 07       	cpc	r25, r18
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	a2 07       	cpc	r26, r18
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	b2 07       	cpc	r27, r18
    1e50:	19 f4       	brne	.+6      	; 0x1e58 <SPI_u8Tranceive+0xa0>
		{
			Local_u8ErrorState = TIMEOUT_STATE;
    1e52:	84 e0       	ldi	r24, 0x04	; 4
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	06 c0       	rjmp	.+12     	; 0x1e64 <SPI_u8Tranceive+0xac>
		}
		else
		{
			*Copy_u8RData = SPDR;
    1e58:	ef e2       	ldi	r30, 0x2F	; 47
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	ef 81       	ldd	r30, Y+7	; 0x07
    1e60:	f8 85       	ldd	r31, Y+8	; 0x08
    1e62:	80 83       	st	Z, r24
		}
		SPI_u8State = IDLE;
    1e64:	10 92 d3 05 	sts	0x05D3, r1
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <SPI_u8Tranceive+0xb6>
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE;
    1e6a:	83 e0       	ldi	r24, 0x03	; 3
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrorState;
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1e70:	28 96       	adiw	r28, 0x08	; 8
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <SPI_u8BufferTranceiverSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 SPI_u8BufferTranceiverSynch(u8 *Copy_u8TData, u8 *Copy_u8RData, u8 Copy_u8BufferSize)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	27 97       	sbiw	r28, 0x07	; 7
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	9c 83       	std	Y+4, r25	; 0x04
    1e98:	8b 83       	std	Y+3, r24	; 0x03
    1e9a:	7e 83       	std	Y+6, r23	; 0x06
    1e9c:	6d 83       	std	Y+5, r22	; 0x05
    1e9e:	4f 83       	std	Y+7, r20	; 0x07
	u8 Local_u8ErrorState = OK;
    1ea0:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter = 0;
    1ea2:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	09 f1       	breq	.+66     	; 0x1eee <SPI_u8BufferTranceiverSynch+0x6c>
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	e9 f0       	breq	.+58     	; 0x1eee <SPI_u8BufferTranceiverSynch+0x6c>
    1eb4:	17 c0       	rjmp	.+46     	; 0x1ee4 <SPI_u8BufferTranceiverSynch+0x62>
	{
		while (Local_u8Counter < Copy_u8BufferSize)
		{
			SPI_u8Tranceive(Copy_u8TData[Local_u8Counter], &Copy_u8RData[Local_u8Counter]);
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	e2 0f       	add	r30, r18
    1ec4:	f3 1f       	adc	r31, r19
    1ec6:	40 81       	ld	r20, Z
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	28 0f       	add	r18, r24
    1ed4:	39 1f       	adc	r19, r25
    1ed6:	84 2f       	mov	r24, r20
    1ed8:	b9 01       	movw	r22, r18
    1eda:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
			Local_u8Counter++;
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	89 83       	std	Y+1, r24	; 0x01
{
	u8 Local_u8ErrorState = OK;
	u8 Local_u8Counter = 0;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
	{
		while (Local_u8Counter < Copy_u8BufferSize)
    1ee4:	99 81       	ldd	r25, Y+1	; 0x01
    1ee6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee8:	98 17       	cp	r25, r24
    1eea:	28 f3       	brcs	.-54     	; 0x1eb6 <SPI_u8BufferTranceiverSynch+0x34>
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <SPI_u8BufferTranceiverSynch+0x70>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ef4:	27 96       	adiw	r28, 0x07	; 7
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <SPI_u8BufferTranceiverAsynch>:
 *		      NotificationFuncn => function that called after the tranceive complete
 *
 * return     : Error status with type u8
 */
u8 SPI_u8BufferTranceiverAsynch(SPI_BUFFER *spi_buffer)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <SPI_u8BufferTranceiverAsynch+0x6>
    1f0c:	0f 92       	push	r0
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	9b 83       	std	Y+3, r25	; 0x03
    1f14:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1f16:	19 82       	std	Y+1, r1	; 0x01

	if (SPI_u8State == IDLE)
    1f18:	80 91 d3 05 	lds	r24, 0x05D3
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <SPI_u8BufferTranceiverAsynch+0x1c>
    1f20:	55 c0       	rjmp	.+170    	; 0x1fcc <SPI_u8BufferTranceiverAsynch+0xc6>
	{
		if ((spi_buffer != NULL) &&
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	9b 81       	ldd	r25, Y+3	; 0x03
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <SPI_u8BufferTranceiverAsynch+0x26>
    1f2a:	4d c0       	rjmp	.+154    	; 0x1fc6 <SPI_u8BufferTranceiverAsynch+0xc0>
    1f2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <SPI_u8BufferTranceiverAsynch+0x34>
    1f38:	46 c0       	rjmp	.+140    	; 0x1fc6 <SPI_u8BufferTranceiverAsynch+0xc0>
    1f3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <SPI_u8BufferTranceiverAsynch+0x42>
    1f46:	3f c0       	rjmp	.+126    	; 0x1fc6 <SPI_u8BufferTranceiverAsynch+0xc0>
    1f48:	ea 81       	ldd	r30, Y+2	; 0x02
    1f4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f4c:	85 81       	ldd	r24, Z+5	; 0x05
    1f4e:	96 81       	ldd	r25, Z+6	; 0x06
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	c9 f1       	breq	.+114    	; 0x1fc6 <SPI_u8BufferTranceiverAsynch+0xc0>
		(spi_buffer->Copy_u8TData != NULL) &&
		(spi_buffer->Copy_u8RData != NULL) &&
		(spi_buffer->NotificationFuncn != NULL))
		{
			/*SPI is now Busy*/
			SPI_u8State = BUSY;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	80 93 d3 05 	sts	0x05D3, r24

			/*Assign the SPI data globally*/
			SPI_pu8TData           = spi_buffer->Copy_u8TData     ;
    1f5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f5e:	80 81       	ld	r24, Z
    1f60:	91 81       	ldd	r25, Z+1	; 0x01
    1f62:	90 93 ce 05 	sts	0x05CE, r25
    1f66:	80 93 cd 05 	sts	0x05CD, r24
			SPI_pu8RData           = spi_buffer->Copy_u8RData     ;
    1f6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	90 93 d0 05 	sts	0x05D0, r25
    1f76:	80 93 cf 05 	sts	0x05CF, r24
			SPI_u8BufferSize       = spi_buffer->Copy_u8BufferSize;
    1f7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7e:	84 81       	ldd	r24, Z+4	; 0x04
    1f80:	80 93 d4 05 	sts	0x05D4, r24
			SPI_pvNotificationFunc = spi_buffer->NotificationFuncn;
    1f84:	ea 81       	ldd	r30, Y+2	; 0x02
    1f86:	fb 81       	ldd	r31, Y+3	; 0x03
    1f88:	85 81       	ldd	r24, Z+5	; 0x05
    1f8a:	96 81       	ldd	r25, Z+6	; 0x06
    1f8c:	90 93 d2 05 	sts	0x05D2, r25
    1f90:	80 93 d1 05 	sts	0x05D1, r24

			/*Set Index to first element*/
			SPI_u8Index = 0;
    1f94:	10 92 d5 05 	sts	0x05D5, r1

			/*Transmit first Data */
			SPDR = SPI_pu8TData[SPI_u8Index];
    1f98:	af e2       	ldi	r26, 0x2F	; 47
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	20 91 cd 05 	lds	r18, 0x05CD
    1fa0:	30 91 ce 05 	lds	r19, 0x05CE
    1fa4:	80 91 d5 05 	lds	r24, 0x05D5
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	f9 01       	movw	r30, r18
    1fae:	e8 0f       	add	r30, r24
    1fb0:	f9 1f       	adc	r31, r25
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8c 93       	st	X, r24

			/*SPI Interrupt Enable*/
			SET_BIT(SPCR, SPCR_SPIE);
    1fb6:	ad e2       	ldi	r26, 0x2D	; 45
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	ed e2       	ldi	r30, 0x2D	; 45
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	80 68       	ori	r24, 0x80	; 128
    1fc2:	8c 93       	st	X, r24
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <SPI_u8BufferTranceiverAsynch+0xca>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER;
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <SPI_u8BufferTranceiverAsynch+0xca>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE;
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <__vector_12>:

//-------------------------------------------------------------------------------------------------------------------------------

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    1fde:	1f 92       	push	r1
    1fe0:	0f 92       	push	r0
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	0f 92       	push	r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	2f 93       	push	r18
    1fea:	3f 93       	push	r19
    1fec:	4f 93       	push	r20
    1fee:	5f 93       	push	r21
    1ff0:	6f 93       	push	r22
    1ff2:	7f 93       	push	r23
    1ff4:	8f 93       	push	r24
    1ff6:	9f 93       	push	r25
    1ff8:	af 93       	push	r26
    1ffa:	bf 93       	push	r27
    1ffc:	ef 93       	push	r30
    1ffe:	ff 93       	push	r31
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
	/*Receive Data*/
	SPI_pu8RData[SPI_u8Index] = SPDR;
    2008:	20 91 cf 05 	lds	r18, 0x05CF
    200c:	30 91 d0 05 	lds	r19, 0x05D0
    2010:	80 91 d5 05 	lds	r24, 0x05D5
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	d9 01       	movw	r26, r18
    201a:	a8 0f       	add	r26, r24
    201c:	b9 1f       	adc	r27, r25
    201e:	ef e2       	ldi	r30, 0x2F	; 47
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	8c 93       	st	X, r24

	/*Increment Data index of the buffer*/
	SPI_u8Index++;
    2026:	80 91 d5 05 	lds	r24, 0x05D5
    202a:	8f 5f       	subi	r24, 0xFF	; 255
    202c:	80 93 d5 05 	sts	0x05D5, r24

	if (SPI_u8Index == SPI_u8BufferSize)
    2030:	90 91 d5 05 	lds	r25, 0x05D5
    2034:	80 91 d4 05 	lds	r24, 0x05D4
    2038:	98 17       	cp	r25, r24
    203a:	a9 f4       	brne	.+42     	; 0x2066 <__vector_12+0x88>
	{
		/*Buffer Complete*/

		/*SPI is now IDLE*/
		SPI_u8State = IDLE;
    203c:	10 92 d3 05 	sts	0x05D3, r1

		/*SPI Interrupt Disable*/
		CLR_BIT(SPCR, SPCR_SPIE);
    2040:	ad e2       	ldi	r26, 0x2D	; 45
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	ed e2       	ldi	r30, 0x2D	; 45
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	8f 77       	andi	r24, 0x7F	; 127
    204c:	8c 93       	st	X, r24

		/*Call Notification Function*/
		if (SPI_pvNotificationFunc != NULL)
    204e:	80 91 d1 05 	lds	r24, 0x05D1
    2052:	90 91 d2 05 	lds	r25, 0x05D2
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	a9 f0       	breq	.+42     	; 0x2084 <__vector_12+0xa6>
		{
			SPI_pvNotificationFunc();
    205a:	e0 91 d1 05 	lds	r30, 0x05D1
    205e:	f0 91 d2 05 	lds	r31, 0x05D2
    2062:	09 95       	icall
    2064:	0f c0       	rjmp	.+30     	; 0x2084 <__vector_12+0xa6>
	else
	{
		/*Buffer not Complete*/

		/*Transmit next Data*/
		SPDR = SPI_pu8TData[SPI_u8Index];
    2066:	af e2       	ldi	r26, 0x2F	; 47
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	20 91 cd 05 	lds	r18, 0x05CD
    206e:	30 91 ce 05 	lds	r19, 0x05CE
    2072:	80 91 d5 05 	lds	r24, 0x05D5
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	f9 01       	movw	r30, r18
    207c:	e8 0f       	add	r30, r24
    207e:	f9 1f       	adc	r31, r25
    2080:	80 81       	ld	r24, Z
    2082:	8c 93       	st	X, r24
	}
}
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	ff 91       	pop	r31
    208a:	ef 91       	pop	r30
    208c:	bf 91       	pop	r27
    208e:	af 91       	pop	r26
    2090:	9f 91       	pop	r25
    2092:	8f 91       	pop	r24
    2094:	7f 91       	pop	r23
    2096:	6f 91       	pop	r22
    2098:	5f 91       	pop	r21
    209a:	4f 91       	pop	r20
    209c:	3f 91       	pop	r19
    209e:	2f 91       	pop	r18
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	0f 90       	pop	r0
    20a6:	1f 90       	pop	r1
    20a8:	18 95       	reti

000020aa <GIE_vEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vEnable(void)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG, SREG_I_BIT);
    20b2:	af e5       	ldi	r26, 0x5F	; 95
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	ef e5       	ldi	r30, 0x5F	; 95
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	80 68       	ori	r24, 0x80	; 128
    20be:	8c 93       	st	X, r24
}
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <GIE_vDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
 */
void GIE_vDisable(void)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG, SREG_I_BIT);
    20ce:	af e5       	ldi	r26, 0x5F	; 95
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ef e5       	ldi	r30, 0x5F	; 95
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8f 77       	andi	r24, 0x7F	; 127
    20da:	8c 93       	st	X, r24
}
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <EXTI_vInit>:
 *                                             *-----------------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void EXTI_vInit(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62

        CLR_BIT(MCUCSR, 6);

      #elif EXTI_SENSE_MODE == EXTI_RISING_EDGE

        SET_BIT(MCUCSR, 6);
    20ea:	a4 e5       	ldi	r26, 0x54	; 84
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e4 e5       	ldi	r30, 0x54	; 84
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 64       	ori	r24, 0x40	; 64
    20f6:	8c 93       	st	X, r24

      #endif
    #endif
  #endif
}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <EXTI_vSetSignal>:
 *		Copy_u8Line      => [EXTI_LINEx](x=0..2)
 *
 * return     : Nothing
 */
void EXTI_vSetSignal(u8 Copy_u8SenseMode, u8 Copy_u8Line)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <EXTI_vSetSignal+0x6>
    2104:	00 d0       	rcall	.+0      	; 0x2106 <EXTI_vSetSignal+0x8>
    2106:	00 d0       	rcall	.+0      	; 0x2108 <EXTI_vSetSignal+0xa>
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	6a 83       	std	Y+2, r22	; 0x02
  if (Copy_u8Line >= EXTI_LINE0 && Copy_u8Line <= EXTI_LINE1)
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	86 30       	cpi	r24, 0x06	; 6
    2114:	08 f4       	brcc	.+2      	; 0x2118 <EXTI_vSetSignal+0x1a>
    2116:	d3 c0       	rjmp	.+422    	; 0x22be <EXTI_vSetSignal+0x1c0>
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	88 30       	cpi	r24, 0x08	; 8
    211c:	08 f0       	brcs	.+2      	; 0x2120 <EXTI_vSetSignal+0x22>
    211e:	cf c0       	rjmp	.+414    	; 0x22be <EXTI_vSetSignal+0x1c0>
  {
    Copy_u8Line = (6 - Copy_u8Line) * -2;
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	06 97       	sbiw	r24, 0x06	; 6
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	8a 83       	std	Y+2, r24	; 0x02

    switch (Copy_u8SenseMode)
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	3e 83       	std	Y+6, r19	; 0x06
    2136:	2d 83       	std	Y+5, r18	; 0x05
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	91 05       	cpc	r25, r1
    2140:	09 f4       	brne	.+2      	; 0x2144 <EXTI_vSetSignal+0x46>
    2142:	95 c0       	rjmp	.+298    	; 0x226e <EXTI_vSetSignal+0x170>
    2144:	2d 81       	ldd	r18, Y+5	; 0x05
    2146:	3e 81       	ldd	r19, Y+6	; 0x06
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	34 f4       	brge	.+12     	; 0x215a <EXTI_vSetSignal+0x5c>
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	09 f4       	brne	.+2      	; 0x2158 <EXTI_vSetSignal+0x5a>
    2156:	61 c0       	rjmp	.+194    	; 0x221a <EXTI_vSetSignal+0x11c>
    2158:	b2 c0       	rjmp	.+356    	; 0x22be <EXTI_vSetSignal+0x1c0>
    215a:	2d 81       	ldd	r18, Y+5	; 0x05
    215c:	3e 81       	ldd	r19, Y+6	; 0x06
    215e:	22 30       	cpi	r18, 0x02	; 2
    2160:	31 05       	cpc	r19, r1
    2162:	31 f0       	breq	.+12     	; 0x2170 <EXTI_vSetSignal+0x72>
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	91 05       	cpc	r25, r1
    216c:	61 f1       	breq	.+88     	; 0x21c6 <EXTI_vSetSignal+0xc8>
    216e:	a7 c0       	rjmp	.+334    	; 0x22be <EXTI_vSetSignal+0x1c0>
    {
    case EXTI_LOW_LEVEL:
      CLR_BIT(MCUCR, Copy_u8Line);
    2170:	a5 e5       	ldi	r26, 0x55	; 85
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e5 e5       	ldi	r30, 0x55	; 85
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	48 2f       	mov	r20, r24
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 c0       	rjmp	.+4      	; 0x218c <EXTI_vSetSignal+0x8e>
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	2a 95       	dec	r18
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <EXTI_vSetSignal+0x8a>
    2190:	80 95       	com	r24
    2192:	84 23       	and	r24, r20
    2194:	8c 93       	st	X, r24
      CLR_BIT(MCUCR, Copy_u8Line + 1);
    2196:	a5 e5       	ldi	r26, 0x55	; 85
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e5 e5       	ldi	r30, 0x55	; 85
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	48 2f       	mov	r20, r24
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9c 01       	movw	r18, r24
    21aa:	2f 5f       	subi	r18, 0xFF	; 255
    21ac:	3f 4f       	sbci	r19, 0xFF	; 255
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 2e       	mov	r0, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <EXTI_vSetSignal+0xbc>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	0a 94       	dec	r0
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <EXTI_vSetSignal+0xb8>
    21be:	80 95       	com	r24
    21c0:	84 23       	and	r24, r20
    21c2:	8c 93       	st	X, r24
    21c4:	7c c0       	rjmp	.+248    	; 0x22be <EXTI_vSetSignal+0x1c0>
      break;
    case EXTI_ON_CHANGE:
      SET_BIT(MCUCR, Copy_u8Line);
    21c6:	a5 e5       	ldi	r26, 0x55	; 85
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e5 e5       	ldi	r30, 0x55	; 85
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	48 2f       	mov	r20, r24
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <EXTI_vSetSignal+0xe4>
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	2a 95       	dec	r18
    21e4:	e2 f7       	brpl	.-8      	; 0x21de <EXTI_vSetSignal+0xe0>
    21e6:	84 2b       	or	r24, r20
    21e8:	8c 93       	st	X, r24
      CLR_BIT(MCUCR, Copy_u8Line + 1);
    21ea:	a5 e5       	ldi	r26, 0x55	; 85
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e5 e5       	ldi	r30, 0x55	; 85
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9c 01       	movw	r18, r24
    21fe:	2f 5f       	subi	r18, 0xFF	; 255
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 2e       	mov	r0, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <EXTI_vSetSignal+0x110>
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	0a 94       	dec	r0
    2210:	e2 f7       	brpl	.-8      	; 0x220a <EXTI_vSetSignal+0x10c>
    2212:	80 95       	com	r24
    2214:	84 23       	and	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	52 c0       	rjmp	.+164    	; 0x22be <EXTI_vSetSignal+0x1c0>
      break;
    case EXTI_FALLING_EDGE:
      CLR_BIT(MCUCR, Copy_u8Line);
    221a:	a5 e5       	ldi	r26, 0x55	; 85
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e5 e5       	ldi	r30, 0x55	; 85
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	48 2f       	mov	r20, r24
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <EXTI_vSetSignal+0x138>
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	2a 95       	dec	r18
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <EXTI_vSetSignal+0x134>
    223a:	80 95       	com	r24
    223c:	84 23       	and	r24, r20
    223e:	8c 93       	st	X, r24
      SET_BIT(MCUCR, Copy_u8Line + 1);
    2240:	a5 e5       	ldi	r26, 0x55	; 85
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e5 e5       	ldi	r30, 0x55	; 85
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	48 2f       	mov	r20, r24
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9c 01       	movw	r18, r24
    2254:	2f 5f       	subi	r18, 0xFF	; 255
    2256:	3f 4f       	sbci	r19, 0xFF	; 255
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	02 2e       	mov	r0, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <EXTI_vSetSignal+0x166>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <EXTI_vSetSignal+0x162>
    2268:	84 2b       	or	r24, r20
    226a:	8c 93       	st	X, r24
    226c:	28 c0       	rjmp	.+80     	; 0x22be <EXTI_vSetSignal+0x1c0>
      break;
    case EXTI_RISING_EDGE:
      SET_BIT(MCUCR, Copy_u8Line);
    226e:	a5 e5       	ldi	r26, 0x55	; 85
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e5 e5       	ldi	r30, 0x55	; 85
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	48 2f       	mov	r20, r24
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	02 c0       	rjmp	.+4      	; 0x228a <EXTI_vSetSignal+0x18c>
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	2a 95       	dec	r18
    228c:	e2 f7       	brpl	.-8      	; 0x2286 <EXTI_vSetSignal+0x188>
    228e:	84 2b       	or	r24, r20
    2290:	8c 93       	st	X, r24
      SET_BIT(MCUCR, Copy_u8Line + 1);
    2292:	a5 e5       	ldi	r26, 0x55	; 85
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e5 e5       	ldi	r30, 0x55	; 85
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9c 01       	movw	r18, r24
    22a6:	2f 5f       	subi	r18, 0xFF	; 255
    22a8:	3f 4f       	sbci	r19, 0xFF	; 255
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 2e       	mov	r0, r18
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <EXTI_vSetSignal+0x1b8>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <EXTI_vSetSignal+0x1b4>
    22ba:	84 2b       	or	r24, r20
    22bc:	8c 93       	st	X, r24
      break;
    }
  }
  if (Copy_u8Line == EXTI_LINE2)
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	85 30       	cpi	r24, 0x05	; 5
    22c2:	f1 f4       	brne	.+60     	; 0x2300 <EXTI_vSetSignal+0x202>
  {
    switch (Copy_u8SenseMode)
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	3c 83       	std	Y+4, r19	; 0x04
    22cc:	2b 83       	std	Y+3, r18	; 0x03
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	31 f0       	breq	.+12     	; 0x22e2 <EXTI_vSetSignal+0x1e4>
    22d6:	2b 81       	ldd	r18, Y+3	; 0x03
    22d8:	3c 81       	ldd	r19, Y+4	; 0x04
    22da:	21 30       	cpi	r18, 0x01	; 1
    22dc:	31 05       	cpc	r19, r1
    22de:	49 f0       	breq	.+18     	; 0x22f2 <EXTI_vSetSignal+0x1f4>
    22e0:	0f c0       	rjmp	.+30     	; 0x2300 <EXTI_vSetSignal+0x202>
    {
    case EXTI_FALLING_EDGE:
      CLR_BIT(MCUCSR, 6);
    22e2:	a4 e5       	ldi	r26, 0x54	; 84
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e4 e5       	ldi	r30, 0x54	; 84
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	8f 7b       	andi	r24, 0xBF	; 191
    22ee:	8c 93       	st	X, r24
    22f0:	07 c0       	rjmp	.+14     	; 0x2300 <EXTI_vSetSignal+0x202>
      break;
    case EXTI_RISING_EDGE:
      SET_BIT(MCUCSR, 6);
    22f2:	a4 e5       	ldi	r26, 0x54	; 84
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e4 e5       	ldi	r30, 0x54	; 84
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	80 64       	ori	r24, 0x40	; 64
    22fe:	8c 93       	st	X, r24
      break;
      ;
    }
  }
}
    2300:	26 96       	adiw	r28, 0x06	; 6
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <EXTI_vDisableInterrupt>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : Error status with type u8
 */
u8 EXTI_vDisableInterrupt(u8 Copy_u8Line)
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	00 d0       	rcall	.+0      	; 0x2318 <EXTI_vDisableInterrupt+0x6>
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    231e:	19 82       	std	Y+1, r1	; 0x01
  if ((Copy_u8Line == EXTI_LINE0) || (Copy_u8Line == EXTI_LINE1) || (Copy_u8Line == EXTI_LINE2))
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	86 30       	cpi	r24, 0x06	; 6
    2324:	31 f0       	breq	.+12     	; 0x2332 <EXTI_vDisableInterrupt+0x20>
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	87 30       	cpi	r24, 0x07	; 7
    232a:	19 f0       	breq	.+6      	; 0x2332 <EXTI_vDisableInterrupt+0x20>
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	85 30       	cpi	r24, 0x05	; 5
    2330:	a9 f4       	brne	.+42     	; 0x235c <EXTI_vDisableInterrupt+0x4a>
  {
    /* Clear The Required BIT */
    CLR_BIT(GICR, Copy_u8Line);
    2332:	ab e5       	ldi	r26, 0x5B	; 91
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	eb e5       	ldi	r30, 0x5B	; 91
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	48 2f       	mov	r20, r24
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	02 2e       	mov	r0, r18
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <EXTI_vDisableInterrupt+0x3e>
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	0a 94       	dec	r0
    2352:	e2 f7       	brpl	.-8      	; 0x234c <EXTI_vDisableInterrupt+0x3a>
    2354:	80 95       	com	r24
    2356:	84 23       	and	r24, r20
    2358:	8c 93       	st	X, r24
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <EXTI_vDisableInterrupt+0x4e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    2360:	89 81       	ldd	r24, Y+1	; 0x01
}
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <EXTI_vEnableInterrupt>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : Error status with type u8
 */
u8 EXTI_vEnableInterrupt(u8 Copy_u8Line)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	00 d0       	rcall	.+0      	; 0x2372 <EXTI_vEnableInterrupt+0x6>
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    2378:	19 82       	std	Y+1, r1	; 0x01
  if ((Copy_u8Line == EXTI_LINE0) || (Copy_u8Line == EXTI_LINE1) || (Copy_u8Line == EXTI_LINE2))
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	86 30       	cpi	r24, 0x06	; 6
    237e:	31 f0       	breq	.+12     	; 0x238c <EXTI_vEnableInterrupt+0x20>
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	87 30       	cpi	r24, 0x07	; 7
    2384:	19 f0       	breq	.+6      	; 0x238c <EXTI_vEnableInterrupt+0x20>
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	85 30       	cpi	r24, 0x05	; 5
    238a:	a1 f4       	brne	.+40     	; 0x23b4 <EXTI_vEnableInterrupt+0x48>
  {
    SET_BIT(GICR, Copy_u8Line);
    238c:	ab e5       	ldi	r26, 0x5B	; 91
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	eb e5       	ldi	r30, 0x5B	; 91
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	48 2f       	mov	r20, r24
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <EXTI_vEnableInterrupt+0x3e>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <EXTI_vEnableInterrupt+0x3a>
    23ae:	84 2b       	or	r24, r20
    23b0:	8c 93       	st	X, r24
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <EXTI_vEnableInterrupt+0x4c>
  }
  else
  {
    Local_u8ErrorState = NOK;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <EXTI_vClearFlag>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : nothing
 */
void EXTI_vClearFlag(u8 Copy_u8Line)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	0f 92       	push	r0
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	89 83       	std	Y+1, r24	; 0x01
  SET_BIT(GIFR, Copy_u8Line);
    23d0:	aa e5       	ldi	r26, 0x5A	; 90
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	ea e5       	ldi	r30, 0x5A	; 90
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	48 2f       	mov	r20, r24
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 2e       	mov	r0, r18
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <EXTI_vClearFlag+0x2a>
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <EXTI_vClearFlag+0x26>
    23f2:	84 2b       	or	r24, r20
    23f4:	8c 93       	st	X, r24
}
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <EXTI_u8GETFlag>:
 *		Copy_u8Line  => [EXTI_LINEx](x=0..2)
 *
 * return     : Reading value
 */
u8 EXTI_u8GETFlag(u8 Copy_u8Line)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	0f 92       	push	r0
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	89 83       	std	Y+1, r24	; 0x01

  return READ_BIT(GIFR, Copy_u8Line);
    240a:	ea e5       	ldi	r30, 0x5A	; 90
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	48 2f       	mov	r20, r24
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <EXTI_u8GETFlag+0x26>
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	2a 95       	dec	r18
    2426:	e2 f7       	brpl	.-8      	; 0x2420 <EXTI_u8GETFlag+0x22>
    2428:	9a 01       	movw	r18, r20
    242a:	28 23       	and	r18, r24
    242c:	39 23       	and	r19, r25
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a9 01       	movw	r20, r18
    2436:	02 c0       	rjmp	.+4      	; 0x243c <EXTI_u8GETFlag+0x3e>
    2438:	55 95       	asr	r21
    243a:	47 95       	ror	r20
    243c:	8a 95       	dec	r24
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <EXTI_u8GETFlag+0x3a>
    2440:	ca 01       	movw	r24, r20
}
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <EXTI_vSetCallBack>:
 * 		Copy_u8Line        => [EXTI_LINE0 , EXTI_LINE1 , EXTI_LINE2]
 *
 * return     : Error status with type u8
 */
u8 EXTI_vSetCallBack(void (*Copy_pvCallBack)(void), u8 Copy_u8Line)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <EXTI_vSetCallBack+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <EXTI_vSetCallBack+0x8>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9b 83       	std	Y+3, r25	; 0x03
    2458:	8a 83       	std	Y+2, r24	; 0x02
    245a:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
    245c:	19 82       	std	Y+1, r1	; 0x01
  if (Copy_pvCallBack != NULL)
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	9b 81       	ldd	r25, Y+3	; 0x03
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	09 f1       	breq	.+66     	; 0x24a8 <EXTI_vSetCallBack+0x5e>
  {
    if (Copy_u8Line == EXTI_LINE0)
    2466:	8c 81       	ldd	r24, Y+4	; 0x04
    2468:	86 30       	cpi	r24, 0x06	; 6
    246a:	39 f4       	brne	.+14     	; 0x247a <EXTI_vSetCallBack+0x30>
    {

      EXTI_CallBack[0] = Copy_pvCallBack;
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	9b 81       	ldd	r25, Y+3	; 0x03
    2470:	90 93 d7 05 	sts	0x05D7, r25
    2474:	80 93 d6 05 	sts	0x05D6, r24
    2478:	19 c0       	rjmp	.+50     	; 0x24ac <EXTI_vSetCallBack+0x62>
    }
    else if (Copy_u8Line == EXTI_LINE1)
    247a:	8c 81       	ldd	r24, Y+4	; 0x04
    247c:	87 30       	cpi	r24, 0x07	; 7
    247e:	39 f4       	brne	.+14     	; 0x248e <EXTI_vSetCallBack+0x44>
    {

      EXTI_CallBack[1] = Copy_pvCallBack;
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	90 93 d9 05 	sts	0x05D9, r25
    2488:	80 93 d8 05 	sts	0x05D8, r24
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <EXTI_vSetCallBack+0x62>
    }
    else if (Copy_u8Line == EXTI_LINE2)
    248e:	8c 81       	ldd	r24, Y+4	; 0x04
    2490:	85 30       	cpi	r24, 0x05	; 5
    2492:	39 f4       	brne	.+14     	; 0x24a2 <EXTI_vSetCallBack+0x58>
    {

      EXTI_CallBack[2] = Copy_pvCallBack;
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	9b 81       	ldd	r25, Y+3	; 0x03
    2498:	90 93 db 05 	sts	0x05DB, r25
    249c:	80 93 da 05 	sts	0x05DA, r24
    24a0:	05 c0       	rjmp	.+10     	; 0x24ac <EXTI_vSetCallBack+0x62>
    }
    else
    {
      Local_u8ErrorState = NOK;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <EXTI_vSetCallBack+0x62>
    }
  }
  else
  {
    Local_u8ErrorState = NOK;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <__vector_1>:

/* ISR --> Implementation */

void __vector_1(void)              __attribute__((signal));
void __vector_1(void)
{
    24bc:	1f 92       	push	r1
    24be:	0f 92       	push	r0
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	0f 92       	push	r0
    24c4:	11 24       	eor	r1, r1
    24c6:	2f 93       	push	r18
    24c8:	3f 93       	push	r19
    24ca:	4f 93       	push	r20
    24cc:	5f 93       	push	r21
    24ce:	6f 93       	push	r22
    24d0:	7f 93       	push	r23
    24d2:	8f 93       	push	r24
    24d4:	9f 93       	push	r25
    24d6:	af 93       	push	r26
    24d8:	bf 93       	push	r27
    24da:	ef 93       	push	r30
    24dc:	ff 93       	push	r31
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62

  if (EXTI_CallBack[0] != NULL)
    24e6:	80 91 d6 05 	lds	r24, 0x05D6
    24ea:	90 91 d7 05 	lds	r25, 0x05D7
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	41 f0       	breq	.+16     	; 0x2502 <__vector_1+0x46>
  {

    EXTI_CallBack[0]();
    24f2:	e0 91 d6 05 	lds	r30, 0x05D6
    24f6:	f0 91 d7 05 	lds	r31, 0x05D7
    24fa:	09 95       	icall
    EXTI_vClearFlag(EXTI_LINE0);
    24fc:	86 e0       	ldi	r24, 0x06	; 6
    24fe:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <EXTI_vClearFlag>
  }
}
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	ff 91       	pop	r31
    2508:	ef 91       	pop	r30
    250a:	bf 91       	pop	r27
    250c:	af 91       	pop	r26
    250e:	9f 91       	pop	r25
    2510:	8f 91       	pop	r24
    2512:	7f 91       	pop	r23
    2514:	6f 91       	pop	r22
    2516:	5f 91       	pop	r21
    2518:	4f 91       	pop	r20
    251a:	3f 91       	pop	r19
    251c:	2f 91       	pop	r18
    251e:	0f 90       	pop	r0
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	0f 90       	pop	r0
    2524:	1f 90       	pop	r1
    2526:	18 95       	reti

00002528 <__vector_2>:

void __vector_2(void)            __attribute__((signal));
void __vector_2(void)
{
    2528:	1f 92       	push	r1
    252a:	0f 92       	push	r0
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	0f 92       	push	r0
    2530:	11 24       	eor	r1, r1
    2532:	2f 93       	push	r18
    2534:	3f 93       	push	r19
    2536:	4f 93       	push	r20
    2538:	5f 93       	push	r21
    253a:	6f 93       	push	r22
    253c:	7f 93       	push	r23
    253e:	8f 93       	push	r24
    2540:	9f 93       	push	r25
    2542:	af 93       	push	r26
    2544:	bf 93       	push	r27
    2546:	ef 93       	push	r30
    2548:	ff 93       	push	r31
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62

  if (EXTI_CallBack[1] != NULL)
    2552:	80 91 d8 05 	lds	r24, 0x05D8
    2556:	90 91 d9 05 	lds	r25, 0x05D9
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	41 f0       	breq	.+16     	; 0x256e <__vector_2+0x46>
  {

    EXTI_CallBack[1]();
    255e:	e0 91 d8 05 	lds	r30, 0x05D8
    2562:	f0 91 d9 05 	lds	r31, 0x05D9
    2566:	09 95       	icall
    EXTI_vClearFlag(EXTI_LINE1);
    2568:	87 e0       	ldi	r24, 0x07	; 7
    256a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <EXTI_vClearFlag>
  }
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	ff 91       	pop	r31
    2574:	ef 91       	pop	r30
    2576:	bf 91       	pop	r27
    2578:	af 91       	pop	r26
    257a:	9f 91       	pop	r25
    257c:	8f 91       	pop	r24
    257e:	7f 91       	pop	r23
    2580:	6f 91       	pop	r22
    2582:	5f 91       	pop	r21
    2584:	4f 91       	pop	r20
    2586:	3f 91       	pop	r19
    2588:	2f 91       	pop	r18
    258a:	0f 90       	pop	r0
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	0f 90       	pop	r0
    2590:	1f 90       	pop	r1
    2592:	18 95       	reti

00002594 <__vector_3>:

void __vector_3(void)              __attribute__((signal));
void __vector_3(void) 
{
    2594:	1f 92       	push	r1
    2596:	0f 92       	push	r0
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	0f 92       	push	r0
    259c:	11 24       	eor	r1, r1
    259e:	2f 93       	push	r18
    25a0:	3f 93       	push	r19
    25a2:	4f 93       	push	r20
    25a4:	5f 93       	push	r21
    25a6:	6f 93       	push	r22
    25a8:	7f 93       	push	r23
    25aa:	8f 93       	push	r24
    25ac:	9f 93       	push	r25
    25ae:	af 93       	push	r26
    25b0:	bf 93       	push	r27
    25b2:	ef 93       	push	r30
    25b4:	ff 93       	push	r31
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62

  if (EXTI_CallBack[2] != NULL)
    25be:	80 91 da 05 	lds	r24, 0x05DA
    25c2:	90 91 db 05 	lds	r25, 0x05DB
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	41 f0       	breq	.+16     	; 0x25da <__vector_3+0x46>
  {

    EXTI_CallBack[2]();
    25ca:	e0 91 da 05 	lds	r30, 0x05DA
    25ce:	f0 91 db 05 	lds	r31, 0x05DB
    25d2:	09 95       	icall
    EXTI_vClearFlag(EXTI_LINE2);
    25d4:	85 e0       	ldi	r24, 0x05	; 5
    25d6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <EXTI_vClearFlag>
  }
}
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	ff 91       	pop	r31
    25e0:	ef 91       	pop	r30
    25e2:	bf 91       	pop	r27
    25e4:	af 91       	pop	r26
    25e6:	9f 91       	pop	r25
    25e8:	8f 91       	pop	r24
    25ea:	7f 91       	pop	r23
    25ec:	6f 91       	pop	r22
    25ee:	5f 91       	pop	r21
    25f0:	4f 91       	pop	r20
    25f2:	3f 91       	pop	r19
    25f4:	2f 91       	pop	r18
    25f6:	0f 90       	pop	r0
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	0f 90       	pop	r0
    25fc:	1f 90       	pop	r1
    25fe:	18 95       	reti

00002600 <EEPROM_vWrite>:
Function Returns     : void
Function Arguments   : unsigned short address, unsigned char data
Function Description :  write one byte to the given  address.
*/
void EEPROM_vWrite(u16 address, u8 data)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	00 d0       	rcall	.+0      	; 0x2606 <EEPROM_vWrite+0x6>
    2606:	0f 92       	push	r0
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	9a 83       	std	Y+2, r25	; 0x02
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	6b 83       	std	Y+3, r22	; 0x03
  /*set up address register*/
  EEAR_REG = address;
    2612:	ee e3       	ldi	r30, 0x3E	; 62
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
  /*set up data register*/
  EEDR_REG = data;
    261e:	ed e3       	ldi	r30, 0x3D	; 61
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	80 83       	st	Z, r24
  /*write logical one to EEMWE*/
  SET_BIT(EECR_REG, EECR_EEMWE);
    2626:	ac e3       	ldi	r26, 0x3C	; 60
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	ec e3       	ldi	r30, 0x3C	; 60
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	84 60       	ori	r24, 0x04	; 4
    2632:	8c 93       	st	X, r24
  /*start EEPROM write by setting EEWE*/
  SET_BIT(EECR_REG, EECR_EEWE );
    2634:	ac e3       	ldi	r26, 0x3C	; 60
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	ec e3       	ldi	r30, 0x3C	; 60
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	82 60       	ori	r24, 0x02	; 2
    2640:	8c 93       	st	X, r24
  /* wait for completion of  write operation*/
  while (READ_BIT(EECR_REG, EECR_EEWE) == 1);
    2642:	ec e3       	ldi	r30, 0x3C	; 60
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	88 2f       	mov	r24, r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	82 70       	andi	r24, 0x02	; 2
    264e:	90 70       	andi	r25, 0x00	; 0
    2650:	95 95       	asr	r25
    2652:	87 95       	ror	r24
    2654:	81 30       	cpi	r24, 0x01	; 1
    2656:	91 05       	cpc	r25, r1
    2658:	a1 f3       	breq	.-24     	; 0x2642 <EEPROM_vWrite+0x42>
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <EEPROM_vRead>:
Function Returns     : unsigned char
Function Arguments   :  unsigned short address
Function Description :  read one byte from the given  address.
*/
u8 EEPROM_vRead(u16 address)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	00 d0       	rcall	.+0      	; 0x266c <EEPROM_vRead+0x6>
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
  /*set up address register*/
  EEARL_REG = (char)address;
    2674:	ee e3       	ldi	r30, 0x3E	; 62
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	80 83       	st	Z, r24
  EEARH_REG = (char)(address >> 8);
    267c:	ef e3       	ldi	r30, 0x3F	; 63
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	89 2f       	mov	r24, r25
    2686:	99 27       	eor	r25, r25
    2688:	80 83       	st	Z, r24
  /*start EEPROM read by setting EERE*/
  SET_BIT(EECR_REG, EECR_EERE);
    268a:	ac e3       	ldi	r26, 0x3C	; 60
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	ec e3       	ldi	r30, 0x3C	; 60
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	81 60       	ori	r24, 0x01	; 1
    2696:	8c 93       	st	X, r24
  /*return data from data register*/
  return EEDR_REG;
    2698:	ed e3       	ldi	r30, 0x3D	; 61
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	28 97       	sbiw	r28, 0x08	; 8
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	8a 83       	std	Y+2, r24	; 0x02
    26be:	6b 83       	std	Y+3, r22	; 0x03
    26c0:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	84 30       	cpi	r24, 0x04	; 4
    26ca:	08 f0       	brcs	.+2      	; 0x26ce <DIO_enumSetPinDir+0x26>
    26cc:	f1 c0       	rjmp	.+482    	; 0x28b0 <DIO_enumSetPinDir+0x208>
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	88 30       	cpi	r24, 0x08	; 8
    26d2:	08 f0       	brcs	.+2      	; 0x26d6 <DIO_enumSetPinDir+0x2e>
    26d4:	ed c0       	rjmp	.+474    	; 0x28b0 <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    26d6:	8c 81       	ldd	r24, Y+4	; 0x04
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	09 f0       	breq	.+2      	; 0x26de <DIO_enumSetPinDir+0x36>
    26dc:	6f c0       	rjmp	.+222    	; 0x27bc <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	38 87       	std	Y+8, r19	; 0x08
    26e6:	2f 83       	std	Y+7, r18	; 0x07
    26e8:	8f 81       	ldd	r24, Y+7	; 0x07
    26ea:	98 85       	ldd	r25, Y+8	; 0x08
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	91 05       	cpc	r25, r1
    26f0:	49 f1       	breq	.+82     	; 0x2744 <DIO_enumSetPinDir+0x9c>
    26f2:	2f 81       	ldd	r18, Y+7	; 0x07
    26f4:	38 85       	ldd	r19, Y+8	; 0x08
    26f6:	22 30       	cpi	r18, 0x02	; 2
    26f8:	31 05       	cpc	r19, r1
    26fa:	2c f4       	brge	.+10     	; 0x2706 <DIO_enumSetPinDir+0x5e>
    26fc:	8f 81       	ldd	r24, Y+7	; 0x07
    26fe:	98 85       	ldd	r25, Y+8	; 0x08
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	61 f0       	breq	.+24     	; 0x271c <DIO_enumSetPinDir+0x74>
    2704:	d6 c0       	rjmp	.+428    	; 0x28b2 <DIO_enumSetPinDir+0x20a>
    2706:	2f 81       	ldd	r18, Y+7	; 0x07
    2708:	38 85       	ldd	r19, Y+8	; 0x08
    270a:	22 30       	cpi	r18, 0x02	; 2
    270c:	31 05       	cpc	r19, r1
    270e:	71 f1       	breq	.+92     	; 0x276c <DIO_enumSetPinDir+0xc4>
    2710:	8f 81       	ldd	r24, Y+7	; 0x07
    2712:	98 85       	ldd	r25, Y+8	; 0x08
    2714:	83 30       	cpi	r24, 0x03	; 3
    2716:	91 05       	cpc	r25, r1
    2718:	e9 f1       	breq	.+122    	; 0x2794 <DIO_enumSetPinDir+0xec>
    271a:	cb c0       	rjmp	.+406    	; 0x28b2 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    271c:	aa e3       	ldi	r26, 0x3A	; 58
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	ea e3       	ldi	r30, 0x3A	; 58
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	48 2f       	mov	r20, r24
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	02 2e       	mov	r0, r18
    2734:	02 c0       	rjmp	.+4      	; 0x273a <DIO_enumSetPinDir+0x92>
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	0a 94       	dec	r0
    273c:	e2 f7       	brpl	.-8      	; 0x2736 <DIO_enumSetPinDir+0x8e>
    273e:	84 2b       	or	r24, r20
    2740:	8c 93       	st	X, r24
    2742:	b7 c0       	rjmp	.+366    	; 0x28b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    2744:	a7 e3       	ldi	r26, 0x37	; 55
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e7 e3       	ldi	r30, 0x37	; 55
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	48 2f       	mov	r20, r24
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	28 2f       	mov	r18, r24
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	02 2e       	mov	r0, r18
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <DIO_enumSetPinDir+0xba>
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	0a 94       	dec	r0
    2764:	e2 f7       	brpl	.-8      	; 0x275e <DIO_enumSetPinDir+0xb6>
    2766:	84 2b       	or	r24, r20
    2768:	8c 93       	st	X, r24
    276a:	a3 c0       	rjmp	.+326    	; 0x28b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    276c:	a4 e3       	ldi	r26, 0x34	; 52
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e4 e3       	ldi	r30, 0x34	; 52
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	48 2f       	mov	r20, r24
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	02 2e       	mov	r0, r18
    2784:	02 c0       	rjmp	.+4      	; 0x278a <DIO_enumSetPinDir+0xe2>
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	0a 94       	dec	r0
    278c:	e2 f7       	brpl	.-8      	; 0x2786 <DIO_enumSetPinDir+0xde>
    278e:	84 2b       	or	r24, r20
    2790:	8c 93       	st	X, r24
    2792:	8f c0       	rjmp	.+286    	; 0x28b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    2794:	a1 e3       	ldi	r26, 0x31	; 49
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e1 e3       	ldi	r30, 0x31	; 49
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	48 2f       	mov	r20, r24
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	02 2e       	mov	r0, r18
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <DIO_enumSetPinDir+0x10a>
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	0a 94       	dec	r0
    27b4:	e2 f7       	brpl	.-8      	; 0x27ae <DIO_enumSetPinDir+0x106>
    27b6:	84 2b       	or	r24, r20
    27b8:	8c 93       	st	X, r24
    27ba:	7b c0       	rjmp	.+246    	; 0x28b2 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	88 23       	and	r24, r24
    27c0:	09 f0       	breq	.+2      	; 0x27c4 <DIO_enumSetPinDir+0x11c>
    27c2:	74 c0       	rjmp	.+232    	; 0x28ac <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	28 2f       	mov	r18, r24
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	3e 83       	std	Y+6, r19	; 0x06
    27cc:	2d 83       	std	Y+5, r18	; 0x05
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	9e 81       	ldd	r25, Y+6	; 0x06
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	91 05       	cpc	r25, r1
    27d6:	59 f1       	breq	.+86     	; 0x282e <DIO_enumSetPinDir+0x186>
    27d8:	2d 81       	ldd	r18, Y+5	; 0x05
    27da:	3e 81       	ldd	r19, Y+6	; 0x06
    27dc:	22 30       	cpi	r18, 0x02	; 2
    27de:	31 05       	cpc	r19, r1
    27e0:	2c f4       	brge	.+10     	; 0x27ec <DIO_enumSetPinDir+0x144>
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	69 f0       	breq	.+26     	; 0x2804 <DIO_enumSetPinDir+0x15c>
    27ea:	63 c0       	rjmp	.+198    	; 0x28b2 <DIO_enumSetPinDir+0x20a>
    27ec:	2d 81       	ldd	r18, Y+5	; 0x05
    27ee:	3e 81       	ldd	r19, Y+6	; 0x06
    27f0:	22 30       	cpi	r18, 0x02	; 2
    27f2:	31 05       	cpc	r19, r1
    27f4:	89 f1       	breq	.+98     	; 0x2858 <DIO_enumSetPinDir+0x1b0>
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	83 30       	cpi	r24, 0x03	; 3
    27fc:	91 05       	cpc	r25, r1
    27fe:	09 f4       	brne	.+2      	; 0x2802 <DIO_enumSetPinDir+0x15a>
    2800:	40 c0       	rjmp	.+128    	; 0x2882 <DIO_enumSetPinDir+0x1da>
    2802:	57 c0       	rjmp	.+174    	; 0x28b2 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    2804:	aa e3       	ldi	r26, 0x3A	; 58
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	ea e3       	ldi	r30, 0x3A	; 58
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	48 2f       	mov	r20, r24
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	02 2e       	mov	r0, r18
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <DIO_enumSetPinDir+0x17a>
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	0a 94       	dec	r0
    2824:	e2 f7       	brpl	.-8      	; 0x281e <DIO_enumSetPinDir+0x176>
    2826:	80 95       	com	r24
    2828:	84 23       	and	r24, r20
    282a:	8c 93       	st	X, r24
    282c:	42 c0       	rjmp	.+132    	; 0x28b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    282e:	a7 e3       	ldi	r26, 0x37	; 55
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e7 e3       	ldi	r30, 0x37	; 55
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	48 2f       	mov	r20, r24
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	28 2f       	mov	r18, r24
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	02 2e       	mov	r0, r18
    2846:	02 c0       	rjmp	.+4      	; 0x284c <DIO_enumSetPinDir+0x1a4>
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	0a 94       	dec	r0
    284e:	e2 f7       	brpl	.-8      	; 0x2848 <DIO_enumSetPinDir+0x1a0>
    2850:	80 95       	com	r24
    2852:	84 23       	and	r24, r20
    2854:	8c 93       	st	X, r24
    2856:	2d c0       	rjmp	.+90     	; 0x28b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    2858:	a4 e3       	ldi	r26, 0x34	; 52
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e4 e3       	ldi	r30, 0x34	; 52
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	48 2f       	mov	r20, r24
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	28 2f       	mov	r18, r24
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	02 2e       	mov	r0, r18
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <DIO_enumSetPinDir+0x1ce>
    2872:	88 0f       	add	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	0a 94       	dec	r0
    2878:	e2 f7       	brpl	.-8      	; 0x2872 <DIO_enumSetPinDir+0x1ca>
    287a:	80 95       	com	r24
    287c:	84 23       	and	r24, r20
    287e:	8c 93       	st	X, r24
    2880:	18 c0       	rjmp	.+48     	; 0x28b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    2882:	a1 e3       	ldi	r26, 0x31	; 49
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e1 e3       	ldi	r30, 0x31	; 49
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	48 2f       	mov	r20, r24
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	02 2e       	mov	r0, r18
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <DIO_enumSetPinDir+0x1f8>
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	0a 94       	dec	r0
    28a2:	e2 f7       	brpl	.-8      	; 0x289c <DIO_enumSetPinDir+0x1f4>
    28a4:	80 95       	com	r24
    28a6:	84 23       	and	r24, r20
    28a8:	8c 93       	st	X, r24
    28aa:	03 c0       	rjmp	.+6      	; 0x28b2 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    28ac:	19 82       	std	Y+1, r1	; 0x01
    28ae:	01 c0       	rjmp	.+2      	; 0x28b2 <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    28b0:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b4:	28 96       	adiw	r28, 0x08	; 8
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	08 95       	ret

000028c6 <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	28 97       	sbiw	r28, 0x08	; 8
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	8a 83       	std	Y+2, r24	; 0x02
    28dc:	6b 83       	std	Y+3, r22	; 0x03
    28de:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	84 30       	cpi	r24, 0x04	; 4
    28e8:	08 f0       	brcs	.+2      	; 0x28ec <DIO_enumWritePinVal+0x26>
    28ea:	f1 c0       	rjmp	.+482    	; 0x2ace <DIO_enumWritePinVal+0x208>
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	88 30       	cpi	r24, 0x08	; 8
    28f0:	08 f0       	brcs	.+2      	; 0x28f4 <DIO_enumWritePinVal+0x2e>
    28f2:	ed c0       	rjmp	.+474    	; 0x2ace <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    28f4:	8c 81       	ldd	r24, Y+4	; 0x04
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	09 f0       	breq	.+2      	; 0x28fc <DIO_enumWritePinVal+0x36>
    28fa:	6f c0       	rjmp	.+222    	; 0x29da <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	38 87       	std	Y+8, r19	; 0x08
    2904:	2f 83       	std	Y+7, r18	; 0x07
    2906:	8f 81       	ldd	r24, Y+7	; 0x07
    2908:	98 85       	ldd	r25, Y+8	; 0x08
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	91 05       	cpc	r25, r1
    290e:	49 f1       	breq	.+82     	; 0x2962 <DIO_enumWritePinVal+0x9c>
    2910:	2f 81       	ldd	r18, Y+7	; 0x07
    2912:	38 85       	ldd	r19, Y+8	; 0x08
    2914:	22 30       	cpi	r18, 0x02	; 2
    2916:	31 05       	cpc	r19, r1
    2918:	2c f4       	brge	.+10     	; 0x2924 <DIO_enumWritePinVal+0x5e>
    291a:	8f 81       	ldd	r24, Y+7	; 0x07
    291c:	98 85       	ldd	r25, Y+8	; 0x08
    291e:	00 97       	sbiw	r24, 0x00	; 0
    2920:	61 f0       	breq	.+24     	; 0x293a <DIO_enumWritePinVal+0x74>
    2922:	d6 c0       	rjmp	.+428    	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
    2924:	2f 81       	ldd	r18, Y+7	; 0x07
    2926:	38 85       	ldd	r19, Y+8	; 0x08
    2928:	22 30       	cpi	r18, 0x02	; 2
    292a:	31 05       	cpc	r19, r1
    292c:	71 f1       	breq	.+92     	; 0x298a <DIO_enumWritePinVal+0xc4>
    292e:	8f 81       	ldd	r24, Y+7	; 0x07
    2930:	98 85       	ldd	r25, Y+8	; 0x08
    2932:	83 30       	cpi	r24, 0x03	; 3
    2934:	91 05       	cpc	r25, r1
    2936:	e9 f1       	breq	.+122    	; 0x29b2 <DIO_enumWritePinVal+0xec>
    2938:	cb c0       	rjmp	.+406    	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    293a:	ab e3       	ldi	r26, 0x3B	; 59
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	eb e3       	ldi	r30, 0x3B	; 59
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	48 2f       	mov	r20, r24
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	02 2e       	mov	r0, r18
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <DIO_enumWritePinVal+0x92>
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	0a 94       	dec	r0
    295a:	e2 f7       	brpl	.-8      	; 0x2954 <DIO_enumWritePinVal+0x8e>
    295c:	84 2b       	or	r24, r20
    295e:	8c 93       	st	X, r24
    2960:	b7 c0       	rjmp	.+366    	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    2962:	a8 e3       	ldi	r26, 0x38	; 56
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e8 e3       	ldi	r30, 0x38	; 56
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	48 2f       	mov	r20, r24
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	02 2e       	mov	r0, r18
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <DIO_enumWritePinVal+0xba>
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	0a 94       	dec	r0
    2982:	e2 f7       	brpl	.-8      	; 0x297c <DIO_enumWritePinVal+0xb6>
    2984:	84 2b       	or	r24, r20
    2986:	8c 93       	st	X, r24
    2988:	a3 c0       	rjmp	.+326    	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    298a:	a5 e3       	ldi	r26, 0x35	; 53
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e5 e3       	ldi	r30, 0x35	; 53
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	48 2f       	mov	r20, r24
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	02 2e       	mov	r0, r18
    29a2:	02 c0       	rjmp	.+4      	; 0x29a8 <DIO_enumWritePinVal+0xe2>
    29a4:	88 0f       	add	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	0a 94       	dec	r0
    29aa:	e2 f7       	brpl	.-8      	; 0x29a4 <DIO_enumWritePinVal+0xde>
    29ac:	84 2b       	or	r24, r20
    29ae:	8c 93       	st	X, r24
    29b0:	8f c0       	rjmp	.+286    	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    29b2:	a2 e3       	ldi	r26, 0x32	; 50
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e2 e3       	ldi	r30, 0x32	; 50
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	48 2f       	mov	r20, r24
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	02 2e       	mov	r0, r18
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <DIO_enumWritePinVal+0x10a>
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	0a 94       	dec	r0
    29d2:	e2 f7       	brpl	.-8      	; 0x29cc <DIO_enumWritePinVal+0x106>
    29d4:	84 2b       	or	r24, r20
    29d6:	8c 93       	st	X, r24
    29d8:	7b c0       	rjmp	.+246    	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	88 23       	and	r24, r24
    29de:	09 f0       	breq	.+2      	; 0x29e2 <DIO_enumWritePinVal+0x11c>
    29e0:	74 c0       	rjmp	.+232    	; 0x2aca <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    29e2:	8a 81       	ldd	r24, Y+2	; 0x02
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	3e 83       	std	Y+6, r19	; 0x06
    29ea:	2d 83       	std	Y+5, r18	; 0x05
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	81 30       	cpi	r24, 0x01	; 1
    29f2:	91 05       	cpc	r25, r1
    29f4:	59 f1       	breq	.+86     	; 0x2a4c <DIO_enumWritePinVal+0x186>
    29f6:	2d 81       	ldd	r18, Y+5	; 0x05
    29f8:	3e 81       	ldd	r19, Y+6	; 0x06
    29fa:	22 30       	cpi	r18, 0x02	; 2
    29fc:	31 05       	cpc	r19, r1
    29fe:	2c f4       	brge	.+10     	; 0x2a0a <DIO_enumWritePinVal+0x144>
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f0       	breq	.+26     	; 0x2a22 <DIO_enumWritePinVal+0x15c>
    2a08:	63 c0       	rjmp	.+198    	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
    2a0a:	2d 81       	ldd	r18, Y+5	; 0x05
    2a0c:	3e 81       	ldd	r19, Y+6	; 0x06
    2a0e:	22 30       	cpi	r18, 0x02	; 2
    2a10:	31 05       	cpc	r19, r1
    2a12:	89 f1       	breq	.+98     	; 0x2a76 <DIO_enumWritePinVal+0x1b0>
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	83 30       	cpi	r24, 0x03	; 3
    2a1a:	91 05       	cpc	r25, r1
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <DIO_enumWritePinVal+0x15a>
    2a1e:	40 c0       	rjmp	.+128    	; 0x2aa0 <DIO_enumWritePinVal+0x1da>
    2a20:	57 c0       	rjmp	.+174    	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    2a22:	ab e3       	ldi	r26, 0x3B	; 59
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	eb e3       	ldi	r30, 0x3B	; 59
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	48 2f       	mov	r20, r24
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	02 2e       	mov	r0, r18
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <DIO_enumWritePinVal+0x17a>
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	0a 94       	dec	r0
    2a42:	e2 f7       	brpl	.-8      	; 0x2a3c <DIO_enumWritePinVal+0x176>
    2a44:	80 95       	com	r24
    2a46:	84 23       	and	r24, r20
    2a48:	8c 93       	st	X, r24
    2a4a:	42 c0       	rjmp	.+132    	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    2a4c:	a8 e3       	ldi	r26, 0x38	; 56
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e8 e3       	ldi	r30, 0x38	; 56
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	48 2f       	mov	r20, r24
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	02 2e       	mov	r0, r18
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <DIO_enumWritePinVal+0x1a4>
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	0a 94       	dec	r0
    2a6c:	e2 f7       	brpl	.-8      	; 0x2a66 <DIO_enumWritePinVal+0x1a0>
    2a6e:	80 95       	com	r24
    2a70:	84 23       	and	r24, r20
    2a72:	8c 93       	st	X, r24
    2a74:	2d c0       	rjmp	.+90     	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    2a76:	a5 e3       	ldi	r26, 0x35	; 53
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e5 e3       	ldi	r30, 0x35	; 53
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	48 2f       	mov	r20, r24
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	02 2e       	mov	r0, r18
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <DIO_enumWritePinVal+0x1ce>
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	0a 94       	dec	r0
    2a96:	e2 f7       	brpl	.-8      	; 0x2a90 <DIO_enumWritePinVal+0x1ca>
    2a98:	80 95       	com	r24
    2a9a:	84 23       	and	r24, r20
    2a9c:	8c 93       	st	X, r24
    2a9e:	18 c0       	rjmp	.+48     	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    2aa0:	a2 e3       	ldi	r26, 0x32	; 50
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e2 e3       	ldi	r30, 0x32	; 50
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	48 2f       	mov	r20, r24
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	02 2e       	mov	r0, r18
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <DIO_enumWritePinVal+0x1f8>
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	0a 94       	dec	r0
    2ac0:	e2 f7       	brpl	.-8      	; 0x2aba <DIO_enumWritePinVal+0x1f4>
    2ac2:	80 95       	com	r24
    2ac4:	84 23       	and	r24, r20
    2ac6:	8c 93       	st	X, r24
    2ac8:	03 c0       	rjmp	.+6      	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    2aca:	19 82       	std	Y+1, r1	; 0x01
    2acc:	01 c0       	rjmp	.+2      	; 0x2ad0 <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2ace:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ad2:	28 96       	adiw	r28, 0x08	; 8
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	27 97       	sbiw	r28, 0x07	; 7
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	8a 83       	std	Y+2, r24	; 0x02
    2afa:	6b 83       	std	Y+3, r22	; 0x03
    2afc:	5d 83       	std	Y+5, r21	; 0x05
    2afe:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	84 30       	cpi	r24, 0x04	; 4
    2b08:	08 f0       	brcs	.+2      	; 0x2b0c <DIO_enumReadPinVal+0x28>
    2b0a:	a6 c0       	rjmp	.+332    	; 0x2c58 <DIO_enumReadPinVal+0x174>
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	88 30       	cpi	r24, 0x08	; 8
    2b10:	08 f0       	brcs	.+2      	; 0x2b14 <DIO_enumReadPinVal+0x30>
    2b12:	a2 c0       	rjmp	.+324    	; 0x2c58 <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	3f 83       	std	Y+7, r19	; 0x07
    2b1c:	2e 83       	std	Y+6, r18	; 0x06
    2b1e:	4e 81       	ldd	r20, Y+6	; 0x06
    2b20:	5f 81       	ldd	r21, Y+7	; 0x07
    2b22:	41 30       	cpi	r20, 0x01	; 1
    2b24:	51 05       	cpc	r21, r1
    2b26:	c1 f1       	breq	.+112    	; 0x2b98 <DIO_enumReadPinVal+0xb4>
    2b28:	8e 81       	ldd	r24, Y+6	; 0x06
    2b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b2c:	82 30       	cpi	r24, 0x02	; 2
    2b2e:	91 05       	cpc	r25, r1
    2b30:	34 f4       	brge	.+12     	; 0x2b3e <DIO_enumReadPinVal+0x5a>
    2b32:	2e 81       	ldd	r18, Y+6	; 0x06
    2b34:	3f 81       	ldd	r19, Y+7	; 0x07
    2b36:	21 15       	cp	r18, r1
    2b38:	31 05       	cpc	r19, r1
    2b3a:	71 f0       	breq	.+28     	; 0x2b58 <DIO_enumReadPinVal+0x74>
    2b3c:	8e c0       	rjmp	.+284    	; 0x2c5a <DIO_enumReadPinVal+0x176>
    2b3e:	4e 81       	ldd	r20, Y+6	; 0x06
    2b40:	5f 81       	ldd	r21, Y+7	; 0x07
    2b42:	42 30       	cpi	r20, 0x02	; 2
    2b44:	51 05       	cpc	r21, r1
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <DIO_enumReadPinVal+0x66>
    2b48:	47 c0       	rjmp	.+142    	; 0x2bd8 <DIO_enumReadPinVal+0xf4>
    2b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b4e:	83 30       	cpi	r24, 0x03	; 3
    2b50:	91 05       	cpc	r25, r1
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <DIO_enumReadPinVal+0x72>
    2b54:	61 c0       	rjmp	.+194    	; 0x2c18 <DIO_enumReadPinVal+0x134>
    2b56:	81 c0       	rjmp	.+258    	; 0x2c5a <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    2b58:	e9 e3       	ldi	r30, 0x39	; 57
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	48 2f       	mov	r20, r24
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	02 c0       	rjmp	.+4      	; 0x2b72 <DIO_enumReadPinVal+0x8e>
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	2a 95       	dec	r18
    2b74:	e2 f7       	brpl	.-8      	; 0x2b6e <DIO_enumReadPinVal+0x8a>
    2b76:	9a 01       	movw	r18, r20
    2b78:	28 23       	and	r18, r24
    2b7a:	39 23       	and	r19, r25
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	88 2f       	mov	r24, r24
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	a9 01       	movw	r20, r18
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <DIO_enumReadPinVal+0xa6>
    2b86:	55 95       	asr	r21
    2b88:	47 95       	ror	r20
    2b8a:	8a 95       	dec	r24
    2b8c:	e2 f7       	brpl	.-8      	; 0x2b86 <DIO_enumReadPinVal+0xa2>
    2b8e:	ca 01       	movw	r24, r20
    2b90:	ec 81       	ldd	r30, Y+4	; 0x04
    2b92:	fd 81       	ldd	r31, Y+5	; 0x05
    2b94:	80 83       	st	Z, r24
    2b96:	61 c0       	rjmp	.+194    	; 0x2c5a <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    2b98:	e6 e3       	ldi	r30, 0x36	; 54
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	48 2f       	mov	r20, r24
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <DIO_enumReadPinVal+0xce>
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	2a 95       	dec	r18
    2bb4:	e2 f7       	brpl	.-8      	; 0x2bae <DIO_enumReadPinVal+0xca>
    2bb6:	9a 01       	movw	r18, r20
    2bb8:	28 23       	and	r18, r24
    2bba:	39 23       	and	r19, r25
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	a9 01       	movw	r20, r18
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <DIO_enumReadPinVal+0xe6>
    2bc6:	55 95       	asr	r21
    2bc8:	47 95       	ror	r20
    2bca:	8a 95       	dec	r24
    2bcc:	e2 f7       	brpl	.-8      	; 0x2bc6 <DIO_enumReadPinVal+0xe2>
    2bce:	ca 01       	movw	r24, r20
    2bd0:	ec 81       	ldd	r30, Y+4	; 0x04
    2bd2:	fd 81       	ldd	r31, Y+5	; 0x05
    2bd4:	80 83       	st	Z, r24
    2bd6:	41 c0       	rjmp	.+130    	; 0x2c5a <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    2bd8:	e3 e3       	ldi	r30, 0x33	; 51
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	48 2f       	mov	r20, r24
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	28 2f       	mov	r18, r24
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	02 c0       	rjmp	.+4      	; 0x2bf2 <DIO_enumReadPinVal+0x10e>
    2bee:	88 0f       	add	r24, r24
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	2a 95       	dec	r18
    2bf4:	e2 f7       	brpl	.-8      	; 0x2bee <DIO_enumReadPinVal+0x10a>
    2bf6:	9a 01       	movw	r18, r20
    2bf8:	28 23       	and	r18, r24
    2bfa:	39 23       	and	r19, r25
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	88 2f       	mov	r24, r24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	a9 01       	movw	r20, r18
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <DIO_enumReadPinVal+0x126>
    2c06:	55 95       	asr	r21
    2c08:	47 95       	ror	r20
    2c0a:	8a 95       	dec	r24
    2c0c:	e2 f7       	brpl	.-8      	; 0x2c06 <DIO_enumReadPinVal+0x122>
    2c0e:	ca 01       	movw	r24, r20
    2c10:	ec 81       	ldd	r30, Y+4	; 0x04
    2c12:	fd 81       	ldd	r31, Y+5	; 0x05
    2c14:	80 83       	st	Z, r24
    2c16:	21 c0       	rjmp	.+66     	; 0x2c5a <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    2c18:	e0 e3       	ldi	r30, 0x30	; 48
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	48 2f       	mov	r20, r24
    2c20:	50 e0       	ldi	r21, 0x00	; 0
    2c22:	8b 81       	ldd	r24, Y+3	; 0x03
    2c24:	28 2f       	mov	r18, r24
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <DIO_enumReadPinVal+0x14e>
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	2a 95       	dec	r18
    2c34:	e2 f7       	brpl	.-8      	; 0x2c2e <DIO_enumReadPinVal+0x14a>
    2c36:	9a 01       	movw	r18, r20
    2c38:	28 23       	and	r18, r24
    2c3a:	39 23       	and	r19, r25
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	88 2f       	mov	r24, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	a9 01       	movw	r20, r18
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <DIO_enumReadPinVal+0x166>
    2c46:	55 95       	asr	r21
    2c48:	47 95       	ror	r20
    2c4a:	8a 95       	dec	r24
    2c4c:	e2 f7       	brpl	.-8      	; 0x2c46 <DIO_enumReadPinVal+0x162>
    2c4e:	ca 01       	movw	r24, r20
    2c50:	ec 81       	ldd	r30, Y+4	; 0x04
    2c52:	fd 81       	ldd	r31, Y+5	; 0x05
    2c54:	80 83       	st	Z, r24
    2c56:	01 c0       	rjmp	.+2      	; 0x2c5a <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    2c58:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c5c:	27 96       	adiw	r28, 0x07	; 7
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <DIO_enumTogglePinVal+0x6>
    2c74:	00 d0       	rcall	.+0      	; 0x2c76 <DIO_enumTogglePinVal+0x8>
    2c76:	0f 92       	push	r0
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	8a 83       	std	Y+2, r24	; 0x02
    2c7e:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	84 30       	cpi	r24, 0x04	; 4
    2c88:	08 f0       	brcs	.+2      	; 0x2c8c <DIO_enumTogglePinVal+0x1e>
    2c8a:	73 c0       	rjmp	.+230    	; 0x2d72 <DIO_enumTogglePinVal+0x104>
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	88 30       	cpi	r24, 0x08	; 8
    2c90:	08 f0       	brcs	.+2      	; 0x2c94 <DIO_enumTogglePinVal+0x26>
    2c92:	6f c0       	rjmp	.+222    	; 0x2d72 <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	3d 83       	std	Y+5, r19	; 0x05
    2c9c:	2c 83       	std	Y+4, r18	; 0x04
    2c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	49 f1       	breq	.+82     	; 0x2cfa <DIO_enumTogglePinVal+0x8c>
    2ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    2caa:	3d 81       	ldd	r19, Y+5	; 0x05
    2cac:	22 30       	cpi	r18, 0x02	; 2
    2cae:	31 05       	cpc	r19, r1
    2cb0:	2c f4       	brge	.+10     	; 0x2cbc <DIO_enumTogglePinVal+0x4e>
    2cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	61 f0       	breq	.+24     	; 0x2cd2 <DIO_enumTogglePinVal+0x64>
    2cba:	5c c0       	rjmp	.+184    	; 0x2d74 <DIO_enumTogglePinVal+0x106>
    2cbc:	2c 81       	ldd	r18, Y+4	; 0x04
    2cbe:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc0:	22 30       	cpi	r18, 0x02	; 2
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	71 f1       	breq	.+92     	; 0x2d22 <DIO_enumTogglePinVal+0xb4>
    2cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2cca:	83 30       	cpi	r24, 0x03	; 3
    2ccc:	91 05       	cpc	r25, r1
    2cce:	e9 f1       	breq	.+122    	; 0x2d4a <DIO_enumTogglePinVal+0xdc>
    2cd0:	51 c0       	rjmp	.+162    	; 0x2d74 <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    2cd2:	ab e3       	ldi	r26, 0x3B	; 59
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	eb e3       	ldi	r30, 0x3B	; 59
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	48 2f       	mov	r20, r24
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	02 2e       	mov	r0, r18
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <DIO_enumTogglePinVal+0x82>
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	0a 94       	dec	r0
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <DIO_enumTogglePinVal+0x7e>
    2cf4:	84 27       	eor	r24, r20
    2cf6:	8c 93       	st	X, r24
    2cf8:	3d c0       	rjmp	.+122    	; 0x2d74 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    2cfa:	a8 e3       	ldi	r26, 0x38	; 56
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e8 e3       	ldi	r30, 0x38	; 56
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	48 2f       	mov	r20, r24
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	02 2e       	mov	r0, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <DIO_enumTogglePinVal+0xaa>
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	0a 94       	dec	r0
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <DIO_enumTogglePinVal+0xa6>
    2d1c:	84 27       	eor	r24, r20
    2d1e:	8c 93       	st	X, r24
    2d20:	29 c0       	rjmp	.+82     	; 0x2d74 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    2d22:	a5 e3       	ldi	r26, 0x35	; 53
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e5 e3       	ldi	r30, 0x35	; 53
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	48 2f       	mov	r20, r24
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	02 2e       	mov	r0, r18
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <DIO_enumTogglePinVal+0xd2>
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	0a 94       	dec	r0
    2d42:	e2 f7       	brpl	.-8      	; 0x2d3c <DIO_enumTogglePinVal+0xce>
    2d44:	84 27       	eor	r24, r20
    2d46:	8c 93       	st	X, r24
    2d48:	15 c0       	rjmp	.+42     	; 0x2d74 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    2d4a:	a2 e3       	ldi	r26, 0x32	; 50
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e2 e3       	ldi	r30, 0x32	; 50
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	48 2f       	mov	r20, r24
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	02 2e       	mov	r0, r18
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <DIO_enumTogglePinVal+0xfa>
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	0a 94       	dec	r0
    2d6a:	e2 f7       	brpl	.-8      	; 0x2d64 <DIO_enumTogglePinVal+0xf6>
    2d6c:	84 27       	eor	r24, r20
    2d6e:	8c 93       	st	X, r24
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    2d72:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <DIO_enumConnectPullUp+0x6>
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <DIO_enumConnectPullUp+0x8>
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <DIO_enumConnectPullUp+0xa>
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    2d94:	8a 83       	std	Y+2, r24	; 0x02
    2d96:	6b 83       	std	Y+3, r22	; 0x03
    2d98:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	84 30       	cpi	r24, 0x04	; 4
    2da2:	08 f0       	brcs	.+2      	; 0x2da6 <DIO_enumConnectPullUp+0x20>
    2da4:	3e c1       	rjmp	.+636    	; 0x3022 <DIO_enumConnectPullUp+0x29c>
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	88 30       	cpi	r24, 0x08	; 8
    2daa:	08 f0       	brcs	.+2      	; 0x2dae <DIO_enumConnectPullUp+0x28>
    2dac:	3a c1       	rjmp	.+628    	; 0x3022 <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	3e 83       	std	Y+6, r19	; 0x06
    2db6:	2d 83       	std	Y+5, r18	; 0x05
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <DIO_enumConnectPullUp+0x3e>
    2dc2:	5d c0       	rjmp	.+186    	; 0x2e7e <DIO_enumConnectPullUp+0xf8>
    2dc4:	2d 81       	ldd	r18, Y+5	; 0x05
    2dc6:	3e 81       	ldd	r19, Y+6	; 0x06
    2dc8:	22 30       	cpi	r18, 0x02	; 2
    2dca:	31 05       	cpc	r19, r1
    2dcc:	2c f4       	brge	.+10     	; 0x2dd8 <DIO_enumConnectPullUp+0x52>
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	71 f0       	breq	.+28     	; 0x2df2 <DIO_enumConnectPullUp+0x6c>
    2dd6:	26 c1       	rjmp	.+588    	; 0x3024 <DIO_enumConnectPullUp+0x29e>
    2dd8:	2d 81       	ldd	r18, Y+5	; 0x05
    2dda:	3e 81       	ldd	r19, Y+6	; 0x06
    2ddc:	22 30       	cpi	r18, 0x02	; 2
    2dde:	31 05       	cpc	r19, r1
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <DIO_enumConnectPullUp+0x5e>
    2de2:	93 c0       	rjmp	.+294    	; 0x2f0a <DIO_enumConnectPullUp+0x184>
    2de4:	8d 81       	ldd	r24, Y+5	; 0x05
    2de6:	9e 81       	ldd	r25, Y+6	; 0x06
    2de8:	83 30       	cpi	r24, 0x03	; 3
    2dea:	91 05       	cpc	r25, r1
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <DIO_enumConnectPullUp+0x6a>
    2dee:	d3 c0       	rjmp	.+422    	; 0x2f96 <DIO_enumConnectPullUp+0x210>
    2df0:	19 c1       	rjmp	.+562    	; 0x3024 <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2df2:	8c 81       	ldd	r24, Y+4	; 0x04
    2df4:	81 30       	cpi	r24, 0x01	; 1
    2df6:	71 f5       	brne	.+92     	; 0x2e54 <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    2df8:	a0 e5       	ldi	r26, 0x50	; 80
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e0 e5       	ldi	r30, 0x50	; 80
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	8b 7f       	andi	r24, 0xFB	; 251
    2e04:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    2e06:	aa e3       	ldi	r26, 0x3A	; 58
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	ea e3       	ldi	r30, 0x3A	; 58
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	48 2f       	mov	r20, r24
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	02 c0       	rjmp	.+4      	; 0x2e22 <DIO_enumConnectPullUp+0x9c>
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	2a 95       	dec	r18
    2e24:	e2 f7       	brpl	.-8      	; 0x2e1e <DIO_enumConnectPullUp+0x98>
    2e26:	80 95       	com	r24
    2e28:	84 23       	and	r24, r20
    2e2a:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    2e2c:	ab e3       	ldi	r26, 0x3B	; 59
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	eb e3       	ldi	r30, 0x3B	; 59
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	48 2f       	mov	r20, r24
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	02 2e       	mov	r0, r18
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <DIO_enumConnectPullUp+0xc4>
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	0a 94       	dec	r0
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <DIO_enumConnectPullUp+0xc0>
    2e4e:	84 2b       	or	r24, r20
    2e50:	8c 93       	st	X, r24
    2e52:	e8 c0       	rjmp	.+464    	; 0x3024 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    2e54:	ab e3       	ldi	r26, 0x3B	; 59
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	eb e3       	ldi	r30, 0x3B	; 59
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	48 2f       	mov	r20, r24
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	28 2f       	mov	r18, r24
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	02 2e       	mov	r0, r18
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <DIO_enumConnectPullUp+0xec>
    2e6e:	88 0f       	add	r24, r24
    2e70:	99 1f       	adc	r25, r25
    2e72:	0a 94       	dec	r0
    2e74:	e2 f7       	brpl	.-8      	; 0x2e6e <DIO_enumConnectPullUp+0xe8>
    2e76:	80 95       	com	r24
    2e78:	84 23       	and	r24, r20
    2e7a:	8c 93       	st	X, r24
    2e7c:	d3 c0       	rjmp	.+422    	; 0x3024 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e80:	81 30       	cpi	r24, 0x01	; 1
    2e82:	71 f5       	brne	.+92     	; 0x2ee0 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2e84:	a0 e5       	ldi	r26, 0x50	; 80
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e0 e5       	ldi	r30, 0x50	; 80
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	8b 7f       	andi	r24, 0xFB	; 251
    2e90:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    2e92:	a7 e3       	ldi	r26, 0x37	; 55
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e7 e3       	ldi	r30, 0x37	; 55
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	48 2f       	mov	r20, r24
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	28 2f       	mov	r18, r24
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <DIO_enumConnectPullUp+0x128>
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	2a 95       	dec	r18
    2eb0:	e2 f7       	brpl	.-8      	; 0x2eaa <DIO_enumConnectPullUp+0x124>
    2eb2:	80 95       	com	r24
    2eb4:	84 23       	and	r24, r20
    2eb6:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    2eb8:	a8 e3       	ldi	r26, 0x38	; 56
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e8 e3       	ldi	r30, 0x38	; 56
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	48 2f       	mov	r20, r24
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	28 2f       	mov	r18, r24
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	02 2e       	mov	r0, r18
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <DIO_enumConnectPullUp+0x150>
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	0a 94       	dec	r0
    2ed8:	e2 f7       	brpl	.-8      	; 0x2ed2 <DIO_enumConnectPullUp+0x14c>
    2eda:	84 2b       	or	r24, r20
    2edc:	8c 93       	st	X, r24
    2ede:	a2 c0       	rjmp	.+324    	; 0x3024 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    2ee0:	a8 e3       	ldi	r26, 0x38	; 56
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e8 e3       	ldi	r30, 0x38	; 56
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	48 2f       	mov	r20, r24
    2eec:	8b 81       	ldd	r24, Y+3	; 0x03
    2eee:	28 2f       	mov	r18, r24
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	02 2e       	mov	r0, r18
    2ef8:	02 c0       	rjmp	.+4      	; 0x2efe <DIO_enumConnectPullUp+0x178>
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	0a 94       	dec	r0
    2f00:	e2 f7       	brpl	.-8      	; 0x2efa <DIO_enumConnectPullUp+0x174>
    2f02:	80 95       	com	r24
    2f04:	84 23       	and	r24, r20
    2f06:	8c 93       	st	X, r24
    2f08:	8d c0       	rjmp	.+282    	; 0x3024 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	71 f5       	brne	.+92     	; 0x2f6c <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2f10:	a0 e5       	ldi	r26, 0x50	; 80
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e0 e5       	ldi	r30, 0x50	; 80
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	8b 7f       	andi	r24, 0xFB	; 251
    2f1c:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    2f1e:	a4 e3       	ldi	r26, 0x34	; 52
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e4 e3       	ldi	r30, 0x34	; 52
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	48 2f       	mov	r20, r24
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	28 2f       	mov	r18, r24
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <DIO_enumConnectPullUp+0x1b4>
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	2a 95       	dec	r18
    2f3c:	e2 f7       	brpl	.-8      	; 0x2f36 <DIO_enumConnectPullUp+0x1b0>
    2f3e:	80 95       	com	r24
    2f40:	84 23       	and	r24, r20
    2f42:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    2f44:	a5 e3       	ldi	r26, 0x35	; 53
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e5 e3       	ldi	r30, 0x35	; 53
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	48 2f       	mov	r20, r24
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	28 2f       	mov	r18, r24
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	02 2e       	mov	r0, r18
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <DIO_enumConnectPullUp+0x1dc>
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	0a 94       	dec	r0
    2f64:	e2 f7       	brpl	.-8      	; 0x2f5e <DIO_enumConnectPullUp+0x1d8>
    2f66:	84 2b       	or	r24, r20
    2f68:	8c 93       	st	X, r24
    2f6a:	5c c0       	rjmp	.+184    	; 0x3024 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    2f6c:	a5 e3       	ldi	r26, 0x35	; 53
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e5 e3       	ldi	r30, 0x35	; 53
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	48 2f       	mov	r20, r24
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	02 2e       	mov	r0, r18
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <DIO_enumConnectPullUp+0x204>
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	0a 94       	dec	r0
    2f8c:	e2 f7       	brpl	.-8      	; 0x2f86 <DIO_enumConnectPullUp+0x200>
    2f8e:	80 95       	com	r24
    2f90:	84 23       	and	r24, r20
    2f92:	8c 93       	st	X, r24
    2f94:	47 c0       	rjmp	.+142    	; 0x3024 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	81 30       	cpi	r24, 0x01	; 1
    2f9a:	71 f5       	brne	.+92     	; 0x2ff8 <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2f9c:	a0 e5       	ldi	r26, 0x50	; 80
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e0 e5       	ldi	r30, 0x50	; 80
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8b 7f       	andi	r24, 0xFB	; 251
    2fa8:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    2faa:	a1 e3       	ldi	r26, 0x31	; 49
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e1 e3       	ldi	r30, 0x31	; 49
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	48 2f       	mov	r20, r24
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <DIO_enumConnectPullUp+0x240>
    2fc2:	88 0f       	add	r24, r24
    2fc4:	99 1f       	adc	r25, r25
    2fc6:	2a 95       	dec	r18
    2fc8:	e2 f7       	brpl	.-8      	; 0x2fc2 <DIO_enumConnectPullUp+0x23c>
    2fca:	80 95       	com	r24
    2fcc:	84 23       	and	r24, r20
    2fce:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    2fd0:	a2 e3       	ldi	r26, 0x32	; 50
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e2 e3       	ldi	r30, 0x32	; 50
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	48 2f       	mov	r20, r24
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	02 2e       	mov	r0, r18
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <DIO_enumConnectPullUp+0x268>
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	0a 94       	dec	r0
    2ff0:	e2 f7       	brpl	.-8      	; 0x2fea <DIO_enumConnectPullUp+0x264>
    2ff2:	84 2b       	or	r24, r20
    2ff4:	8c 93       	st	X, r24
    2ff6:	16 c0       	rjmp	.+44     	; 0x3024 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    2ff8:	a2 e3       	ldi	r26, 0x32	; 50
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	e2 e3       	ldi	r30, 0x32	; 50
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	48 2f       	mov	r20, r24
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	28 2f       	mov	r18, r24
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	02 2e       	mov	r0, r18
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <DIO_enumConnectPullUp+0x290>
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	0a 94       	dec	r0
    3018:	e2 f7       	brpl	.-8      	; 0x3012 <DIO_enumConnectPullUp+0x28c>
    301a:	80 95       	com	r24
    301c:	84 23       	and	r24, r20
    301e:	8c 93       	st	X, r24
    3020:	01 c0       	rjmp	.+2      	; 0x3024 <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    3022:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    3024:	89 81       	ldd	r24, Y+1	; 0x01
}
    3026:	26 96       	adiw	r28, 0x06	; 6
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	00 d0       	rcall	.+0      	; 0x303e <DIO_enumSetPortDir+0x6>
    303e:	00 d0       	rcall	.+0      	; 0x3040 <DIO_enumSetPortDir+0x8>
    3040:	0f 92       	push	r0
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	8a 83       	std	Y+2, r24	; 0x02
    3048:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	84 30       	cpi	r24, 0x04	; 4
    3052:	a8 f5       	brcc	.+106    	; 0x30be <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	28 2f       	mov	r18, r24
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	3d 83       	std	Y+5, r19	; 0x05
    305c:	2c 83       	std	Y+4, r18	; 0x04
    305e:	8c 81       	ldd	r24, Y+4	; 0x04
    3060:	9d 81       	ldd	r25, Y+5	; 0x05
    3062:	81 30       	cpi	r24, 0x01	; 1
    3064:	91 05       	cpc	r25, r1
    3066:	d1 f0       	breq	.+52     	; 0x309c <DIO_enumSetPortDir+0x64>
    3068:	2c 81       	ldd	r18, Y+4	; 0x04
    306a:	3d 81       	ldd	r19, Y+5	; 0x05
    306c:	22 30       	cpi	r18, 0x02	; 2
    306e:	31 05       	cpc	r19, r1
    3070:	2c f4       	brge	.+10     	; 0x307c <DIO_enumSetPortDir+0x44>
    3072:	8c 81       	ldd	r24, Y+4	; 0x04
    3074:	9d 81       	ldd	r25, Y+5	; 0x05
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	61 f0       	breq	.+24     	; 0x3092 <DIO_enumSetPortDir+0x5a>
    307a:	1f c0       	rjmp	.+62     	; 0x30ba <DIO_enumSetPortDir+0x82>
    307c:	2c 81       	ldd	r18, Y+4	; 0x04
    307e:	3d 81       	ldd	r19, Y+5	; 0x05
    3080:	22 30       	cpi	r18, 0x02	; 2
    3082:	31 05       	cpc	r19, r1
    3084:	81 f0       	breq	.+32     	; 0x30a6 <DIO_enumSetPortDir+0x6e>
    3086:	8c 81       	ldd	r24, Y+4	; 0x04
    3088:	9d 81       	ldd	r25, Y+5	; 0x05
    308a:	83 30       	cpi	r24, 0x03	; 3
    308c:	91 05       	cpc	r25, r1
    308e:	81 f0       	breq	.+32     	; 0x30b0 <DIO_enumSetPortDir+0x78>
    3090:	14 c0       	rjmp	.+40     	; 0x30ba <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    3092:	ea e3       	ldi	r30, 0x3A	; 58
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	80 83       	st	Z, r24
    309a:	12 c0       	rjmp	.+36     	; 0x30c0 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    309c:	e7 e3       	ldi	r30, 0x37	; 55
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	80 83       	st	Z, r24
    30a4:	0d c0       	rjmp	.+26     	; 0x30c0 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    30a6:	e4 e3       	ldi	r30, 0x34	; 52
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	80 83       	st	Z, r24
    30ae:	08 c0       	rjmp	.+16     	; 0x30c0 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    30b0:	e1 e3       	ldi	r30, 0x31	; 49
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	80 83       	st	Z, r24
    30b8:	03 c0       	rjmp	.+6      	; 0x30c0 <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    30ba:	19 82       	std	Y+1, r1	; 0x01
    30bc:	01 c0       	rjmp	.+2      	; 0x30c0 <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    30be:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	00 d0       	rcall	.+0      	; 0x30d8 <DIO_enumWritePortVal+0x6>
    30d8:	00 d0       	rcall	.+0      	; 0x30da <DIO_enumWritePortVal+0x8>
    30da:	0f 92       	push	r0
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	8a 83       	std	Y+2, r24	; 0x02
    30e2:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	84 30       	cpi	r24, 0x04	; 4
    30ec:	a8 f5       	brcc	.+106    	; 0x3158 <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	3d 83       	std	Y+5, r19	; 0x05
    30f6:	2c 83       	std	Y+4, r18	; 0x04
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	9d 81       	ldd	r25, Y+5	; 0x05
    30fc:	81 30       	cpi	r24, 0x01	; 1
    30fe:	91 05       	cpc	r25, r1
    3100:	d1 f0       	breq	.+52     	; 0x3136 <DIO_enumWritePortVal+0x64>
    3102:	2c 81       	ldd	r18, Y+4	; 0x04
    3104:	3d 81       	ldd	r19, Y+5	; 0x05
    3106:	22 30       	cpi	r18, 0x02	; 2
    3108:	31 05       	cpc	r19, r1
    310a:	2c f4       	brge	.+10     	; 0x3116 <DIO_enumWritePortVal+0x44>
    310c:	8c 81       	ldd	r24, Y+4	; 0x04
    310e:	9d 81       	ldd	r25, Y+5	; 0x05
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	61 f0       	breq	.+24     	; 0x312c <DIO_enumWritePortVal+0x5a>
    3114:	1f c0       	rjmp	.+62     	; 0x3154 <DIO_enumWritePortVal+0x82>
    3116:	2c 81       	ldd	r18, Y+4	; 0x04
    3118:	3d 81       	ldd	r19, Y+5	; 0x05
    311a:	22 30       	cpi	r18, 0x02	; 2
    311c:	31 05       	cpc	r19, r1
    311e:	81 f0       	breq	.+32     	; 0x3140 <DIO_enumWritePortVal+0x6e>
    3120:	8c 81       	ldd	r24, Y+4	; 0x04
    3122:	9d 81       	ldd	r25, Y+5	; 0x05
    3124:	83 30       	cpi	r24, 0x03	; 3
    3126:	91 05       	cpc	r25, r1
    3128:	81 f0       	breq	.+32     	; 0x314a <DIO_enumWritePortVal+0x78>
    312a:	14 c0       	rjmp	.+40     	; 0x3154 <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    312c:	eb e3       	ldi	r30, 0x3B	; 59
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	80 83       	st	Z, r24
    3134:	12 c0       	rjmp	.+36     	; 0x315a <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    3136:	e8 e3       	ldi	r30, 0x38	; 56
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	8b 81       	ldd	r24, Y+3	; 0x03
    313c:	80 83       	st	Z, r24
    313e:	0d c0       	rjmp	.+26     	; 0x315a <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    3140:	e5 e3       	ldi	r30, 0x35	; 53
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	8b 81       	ldd	r24, Y+3	; 0x03
    3146:	80 83       	st	Z, r24
    3148:	08 c0       	rjmp	.+16     	; 0x315a <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    314a:	e2 e3       	ldi	r30, 0x32	; 50
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	80 83       	st	Z, r24
    3152:	03 c0       	rjmp	.+6      	; 0x315a <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    3154:	19 82       	std	Y+1, r1	; 0x01
    3156:	01 c0       	rjmp	.+2      	; 0x315a <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3158:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    315a:	89 81       	ldd	r24, Y+1	; 0x01
}
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	27 97       	sbiw	r28, 0x07	; 7
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	8a 83       	std	Y+2, r24	; 0x02
    3182:	7c 83       	std	Y+4, r23	; 0x04
    3184:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    318a:	8a 81       	ldd	r24, Y+2	; 0x02
    318c:	84 30       	cpi	r24, 0x04	; 4
    318e:	08 f0       	brcs	.+2      	; 0x3192 <DIO_enumReadPorVal+0x26>
    3190:	3f c0       	rjmp	.+126    	; 0x3210 <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	28 2f       	mov	r18, r24
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	3f 83       	std	Y+7, r19	; 0x07
    319a:	2e 83       	std	Y+6, r18	; 0x06
    319c:	8e 81       	ldd	r24, Y+6	; 0x06
    319e:	9f 81       	ldd	r25, Y+7	; 0x07
    31a0:	81 30       	cpi	r24, 0x01	; 1
    31a2:	91 05       	cpc	r25, r1
    31a4:	e1 f0       	breq	.+56     	; 0x31de <DIO_enumReadPorVal+0x72>
    31a6:	2e 81       	ldd	r18, Y+6	; 0x06
    31a8:	3f 81       	ldd	r19, Y+7	; 0x07
    31aa:	22 30       	cpi	r18, 0x02	; 2
    31ac:	31 05       	cpc	r19, r1
    31ae:	2c f4       	brge	.+10     	; 0x31ba <DIO_enumReadPorVal+0x4e>
    31b0:	8e 81       	ldd	r24, Y+6	; 0x06
    31b2:	9f 81       	ldd	r25, Y+7	; 0x07
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	61 f0       	breq	.+24     	; 0x31d0 <DIO_enumReadPorVal+0x64>
    31b8:	27 c0       	rjmp	.+78     	; 0x3208 <DIO_enumReadPorVal+0x9c>
    31ba:	2e 81       	ldd	r18, Y+6	; 0x06
    31bc:	3f 81       	ldd	r19, Y+7	; 0x07
    31be:	22 30       	cpi	r18, 0x02	; 2
    31c0:	31 05       	cpc	r19, r1
    31c2:	a1 f0       	breq	.+40     	; 0x31ec <DIO_enumReadPorVal+0x80>
    31c4:	8e 81       	ldd	r24, Y+6	; 0x06
    31c6:	9f 81       	ldd	r25, Y+7	; 0x07
    31c8:	83 30       	cpi	r24, 0x03	; 3
    31ca:	91 05       	cpc	r25, r1
    31cc:	b1 f0       	breq	.+44     	; 0x31fa <DIO_enumReadPorVal+0x8e>
    31ce:	1c c0       	rjmp	.+56     	; 0x3208 <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    31d0:	e9 e3       	ldi	r30, 0x39	; 57
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	eb 81       	ldd	r30, Y+3	; 0x03
    31d8:	fc 81       	ldd	r31, Y+4	; 0x04
    31da:	80 83       	st	Z, r24
    31dc:	16 c0       	rjmp	.+44     	; 0x320a <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    31de:	e6 e3       	ldi	r30, 0x36	; 54
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	eb 81       	ldd	r30, Y+3	; 0x03
    31e6:	fc 81       	ldd	r31, Y+4	; 0x04
    31e8:	80 83       	st	Z, r24
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    31ec:	e3 e3       	ldi	r30, 0x33	; 51
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	eb 81       	ldd	r30, Y+3	; 0x03
    31f4:	fc 81       	ldd	r31, Y+4	; 0x04
    31f6:	80 83       	st	Z, r24
    31f8:	08 c0       	rjmp	.+16     	; 0x320a <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    31fa:	e0 e3       	ldi	r30, 0x30	; 48
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	eb 81       	ldd	r30, Y+3	; 0x03
    3202:	fc 81       	ldd	r31, Y+4	; 0x04
    3204:	80 83       	st	Z, r24
    3206:	01 c0       	rjmp	.+2      	; 0x320a <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    3208:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    320a:	99 81       	ldd	r25, Y+1	; 0x01
    320c:	9d 83       	std	Y+5, r25	; 0x05
    320e:	03 c0       	rjmp	.+6      	; 0x3216 <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3210:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    3212:	29 81       	ldd	r18, Y+1	; 0x01
    3214:	2d 83       	std	Y+5, r18	; 0x05
    3216:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3218:	27 96       	adiw	r28, 0x07	; 7
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	00 d0       	rcall	.+0      	; 0x3230 <DIO_enumTogglePortValue+0x6>
    3230:	00 d0       	rcall	.+0      	; 0x3232 <DIO_enumTogglePortValue+0x8>
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	84 30       	cpi	r24, 0x04	; 4
    3240:	08 f0       	brcs	.+2      	; 0x3244 <DIO_enumTogglePortValue+0x1a>
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	28 2f       	mov	r18, r24
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	3c 83       	std	Y+4, r19	; 0x04
    324c:	2b 83       	std	Y+3, r18	; 0x03
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	9c 81       	ldd	r25, Y+4	; 0x04
    3252:	81 30       	cpi	r24, 0x01	; 1
    3254:	91 05       	cpc	r25, r1
    3256:	e9 f0       	breq	.+58     	; 0x3292 <DIO_enumTogglePortValue+0x68>
    3258:	2b 81       	ldd	r18, Y+3	; 0x03
    325a:	3c 81       	ldd	r19, Y+4	; 0x04
    325c:	22 30       	cpi	r18, 0x02	; 2
    325e:	31 05       	cpc	r19, r1
    3260:	2c f4       	brge	.+10     	; 0x326c <DIO_enumTogglePortValue+0x42>
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	9c 81       	ldd	r25, Y+4	; 0x04
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	61 f0       	breq	.+24     	; 0x3282 <DIO_enumTogglePortValue+0x58>
    326a:	2c c0       	rjmp	.+88     	; 0x32c4 <DIO_enumTogglePortValue+0x9a>
    326c:	2b 81       	ldd	r18, Y+3	; 0x03
    326e:	3c 81       	ldd	r19, Y+4	; 0x04
    3270:	22 30       	cpi	r18, 0x02	; 2
    3272:	31 05       	cpc	r19, r1
    3274:	b1 f0       	breq	.+44     	; 0x32a2 <DIO_enumTogglePortValue+0x78>
    3276:	8b 81       	ldd	r24, Y+3	; 0x03
    3278:	9c 81       	ldd	r25, Y+4	; 0x04
    327a:	83 30       	cpi	r24, 0x03	; 3
    327c:	91 05       	cpc	r25, r1
    327e:	c9 f0       	breq	.+50     	; 0x32b2 <DIO_enumTogglePortValue+0x88>
    3280:	21 c0       	rjmp	.+66     	; 0x32c4 <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    3282:	ab e3       	ldi	r26, 0x3B	; 59
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	eb e3       	ldi	r30, 0x3B	; 59
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	80 95       	com	r24
    328e:	8c 93       	st	X, r24
    3290:	19 c0       	rjmp	.+50     	; 0x32c4 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    3292:	a8 e3       	ldi	r26, 0x38	; 56
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	e8 e3       	ldi	r30, 0x38	; 56
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	80 95       	com	r24
    329e:	8c 93       	st	X, r24
    32a0:	11 c0       	rjmp	.+34     	; 0x32c4 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    32a2:	a5 e3       	ldi	r26, 0x35	; 53
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e5 e3       	ldi	r30, 0x35	; 53
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	80 95       	com	r24
    32ae:	8c 93       	st	X, r24
    32b0:	09 c0       	rjmp	.+18     	; 0x32c4 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    32b2:	a2 e3       	ldi	r26, 0x32	; 50
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	e2 e3       	ldi	r30, 0x32	; 50
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	80 95       	com	r24
    32be:	8c 93       	st	X, r24
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    32c2:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	00 d0       	rcall	.+0      	; 0x32da <DIO_vWriteLowNibble+0x6>
    32da:	00 d0       	rcall	.+0      	; 0x32dc <DIO_vWriteLowNibble+0x8>
    32dc:	0f 92       	push	r0
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	8a 83       	std	Y+2, r24	; 0x02
    32e4:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    32ea:	8a 81       	ldd	r24, Y+2	; 0x02
    32ec:	84 30       	cpi	r24, 0x04	; 4
    32ee:	08 f0       	brcs	.+2      	; 0x32f2 <DIO_vWriteLowNibble+0x1e>
    32f0:	62 c0       	rjmp	.+196    	; 0x33b6 <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	8f 70       	andi	r24, 0x0F	; 15
    32f6:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	28 2f       	mov	r18, r24
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	3d 83       	std	Y+5, r19	; 0x05
    3300:	2c 83       	std	Y+4, r18	; 0x04
    3302:	8c 81       	ldd	r24, Y+4	; 0x04
    3304:	9d 81       	ldd	r25, Y+5	; 0x05
    3306:	81 30       	cpi	r24, 0x01	; 1
    3308:	91 05       	cpc	r25, r1
    330a:	29 f1       	breq	.+74     	; 0x3356 <DIO_vWriteLowNibble+0x82>
    330c:	2c 81       	ldd	r18, Y+4	; 0x04
    330e:	3d 81       	ldd	r19, Y+5	; 0x05
    3310:	22 30       	cpi	r18, 0x02	; 2
    3312:	31 05       	cpc	r19, r1
    3314:	2c f4       	brge	.+10     	; 0x3320 <DIO_vWriteLowNibble+0x4c>
    3316:	8c 81       	ldd	r24, Y+4	; 0x04
    3318:	9d 81       	ldd	r25, Y+5	; 0x05
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	61 f0       	breq	.+24     	; 0x3336 <DIO_vWriteLowNibble+0x62>
    331e:	4c c0       	rjmp	.+152    	; 0x33b8 <DIO_vWriteLowNibble+0xe4>
    3320:	2c 81       	ldd	r18, Y+4	; 0x04
    3322:	3d 81       	ldd	r19, Y+5	; 0x05
    3324:	22 30       	cpi	r18, 0x02	; 2
    3326:	31 05       	cpc	r19, r1
    3328:	31 f1       	breq	.+76     	; 0x3376 <DIO_vWriteLowNibble+0xa2>
    332a:	8c 81       	ldd	r24, Y+4	; 0x04
    332c:	9d 81       	ldd	r25, Y+5	; 0x05
    332e:	83 30       	cpi	r24, 0x03	; 3
    3330:	91 05       	cpc	r25, r1
    3332:	89 f1       	breq	.+98     	; 0x3396 <DIO_vWriteLowNibble+0xc2>
    3334:	41 c0       	rjmp	.+130    	; 0x33b8 <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    3336:	ab e3       	ldi	r26, 0x3B	; 59
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	eb e3       	ldi	r30, 0x3B	; 59
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	80 7f       	andi	r24, 0xF0	; 240
    3342:	8c 93       	st	X, r24
      PORTA_REG |= value;
    3344:	ab e3       	ldi	r26, 0x3B	; 59
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	eb e3       	ldi	r30, 0x3B	; 59
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	90 81       	ld	r25, Z
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	89 2b       	or	r24, r25
    3352:	8c 93       	st	X, r24
    3354:	31 c0       	rjmp	.+98     	; 0x33b8 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    3356:	a8 e3       	ldi	r26, 0x38	; 56
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	e8 e3       	ldi	r30, 0x38	; 56
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	80 7f       	andi	r24, 0xF0	; 240
    3362:	8c 93       	st	X, r24
      PORTB_REG |= value;
    3364:	a8 e3       	ldi	r26, 0x38	; 56
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	e8 e3       	ldi	r30, 0x38	; 56
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	90 81       	ld	r25, Z
    336e:	8b 81       	ldd	r24, Y+3	; 0x03
    3370:	89 2b       	or	r24, r25
    3372:	8c 93       	st	X, r24
    3374:	21 c0       	rjmp	.+66     	; 0x33b8 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    3376:	a5 e3       	ldi	r26, 0x35	; 53
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	e5 e3       	ldi	r30, 0x35	; 53
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	80 7f       	andi	r24, 0xF0	; 240
    3382:	8c 93       	st	X, r24
      PORTC_REG |= value;
    3384:	a5 e3       	ldi	r26, 0x35	; 53
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	e5 e3       	ldi	r30, 0x35	; 53
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	90 81       	ld	r25, Z
    338e:	8b 81       	ldd	r24, Y+3	; 0x03
    3390:	89 2b       	or	r24, r25
    3392:	8c 93       	st	X, r24
    3394:	11 c0       	rjmp	.+34     	; 0x33b8 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    3396:	a2 e3       	ldi	r26, 0x32	; 50
    3398:	b0 e0       	ldi	r27, 0x00	; 0
    339a:	e2 e3       	ldi	r30, 0x32	; 50
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	80 7f       	andi	r24, 0xF0	; 240
    33a2:	8c 93       	st	X, r24
      PORTD_REG |= value;
    33a4:	a2 e3       	ldi	r26, 0x32	; 50
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	e2 e3       	ldi	r30, 0x32	; 50
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	90 81       	ld	r25, Z
    33ae:	8b 81       	ldd	r24, Y+3	; 0x03
    33b0:	89 2b       	or	r24, r25
    33b2:	8c 93       	st	X, r24
    33b4:	01 c0       	rjmp	.+2      	; 0x33b8 <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    33b6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <DIO_vWriteHighNibble+0x6>
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <DIO_vWriteHighNibble+0x8>
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	8a 83       	std	Y+2, r24	; 0x02
    33da:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    33e0:	8a 81       	ldd	r24, Y+2	; 0x02
    33e2:	84 30       	cpi	r24, 0x04	; 4
    33e4:	08 f0       	brcs	.+2      	; 0x33e8 <DIO_vWriteHighNibble+0x1e>
    33e6:	63 c0       	rjmp	.+198    	; 0x34ae <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	82 95       	swap	r24
    33ec:	80 7f       	andi	r24, 0xF0	; 240
    33ee:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	3d 83       	std	Y+5, r19	; 0x05
    33f8:	2c 83       	std	Y+4, r18	; 0x04
    33fa:	8c 81       	ldd	r24, Y+4	; 0x04
    33fc:	9d 81       	ldd	r25, Y+5	; 0x05
    33fe:	81 30       	cpi	r24, 0x01	; 1
    3400:	91 05       	cpc	r25, r1
    3402:	29 f1       	breq	.+74     	; 0x344e <DIO_vWriteHighNibble+0x84>
    3404:	2c 81       	ldd	r18, Y+4	; 0x04
    3406:	3d 81       	ldd	r19, Y+5	; 0x05
    3408:	22 30       	cpi	r18, 0x02	; 2
    340a:	31 05       	cpc	r19, r1
    340c:	2c f4       	brge	.+10     	; 0x3418 <DIO_vWriteHighNibble+0x4e>
    340e:	8c 81       	ldd	r24, Y+4	; 0x04
    3410:	9d 81       	ldd	r25, Y+5	; 0x05
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	61 f0       	breq	.+24     	; 0x342e <DIO_vWriteHighNibble+0x64>
    3416:	4c c0       	rjmp	.+152    	; 0x34b0 <DIO_vWriteHighNibble+0xe6>
    3418:	2c 81       	ldd	r18, Y+4	; 0x04
    341a:	3d 81       	ldd	r19, Y+5	; 0x05
    341c:	22 30       	cpi	r18, 0x02	; 2
    341e:	31 05       	cpc	r19, r1
    3420:	31 f1       	breq	.+76     	; 0x346e <DIO_vWriteHighNibble+0xa4>
    3422:	8c 81       	ldd	r24, Y+4	; 0x04
    3424:	9d 81       	ldd	r25, Y+5	; 0x05
    3426:	83 30       	cpi	r24, 0x03	; 3
    3428:	91 05       	cpc	r25, r1
    342a:	89 f1       	breq	.+98     	; 0x348e <DIO_vWriteHighNibble+0xc4>
    342c:	41 c0       	rjmp	.+130    	; 0x34b0 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    342e:	ab e3       	ldi	r26, 0x3B	; 59
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	eb e3       	ldi	r30, 0x3B	; 59
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	80 81       	ld	r24, Z
    3438:	8f 70       	andi	r24, 0x0F	; 15
    343a:	8c 93       	st	X, r24
      PORTA_REG|= value;
    343c:	ab e3       	ldi	r26, 0x3B	; 59
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	eb e3       	ldi	r30, 0x3B	; 59
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	90 81       	ld	r25, Z
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	89 2b       	or	r24, r25
    344a:	8c 93       	st	X, r24
    344c:	31 c0       	rjmp	.+98     	; 0x34b0 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    344e:	a8 e3       	ldi	r26, 0x38	; 56
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	e8 e3       	ldi	r30, 0x38	; 56
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	80 81       	ld	r24, Z
    3458:	8f 70       	andi	r24, 0x0F	; 15
    345a:	8c 93       	st	X, r24
      PORTB_REG |= value;
    345c:	a8 e3       	ldi	r26, 0x38	; 56
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	e8 e3       	ldi	r30, 0x38	; 56
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	90 81       	ld	r25, Z
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	89 2b       	or	r24, r25
    346a:	8c 93       	st	X, r24
    346c:	21 c0       	rjmp	.+66     	; 0x34b0 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    346e:	a5 e3       	ldi	r26, 0x35	; 53
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	e5 e3       	ldi	r30, 0x35	; 53
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	80 81       	ld	r24, Z
    3478:	8f 70       	andi	r24, 0x0F	; 15
    347a:	8c 93       	st	X, r24
      PORTC_REG |= value;
    347c:	a5 e3       	ldi	r26, 0x35	; 53
    347e:	b0 e0       	ldi	r27, 0x00	; 0
    3480:	e5 e3       	ldi	r30, 0x35	; 53
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	90 81       	ld	r25, Z
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	89 2b       	or	r24, r25
    348a:	8c 93       	st	X, r24
    348c:	11 c0       	rjmp	.+34     	; 0x34b0 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    348e:	a2 e3       	ldi	r26, 0x32	; 50
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	e2 e3       	ldi	r30, 0x32	; 50
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	8f 70       	andi	r24, 0x0F	; 15
    349a:	8c 93       	st	X, r24
      PORTD_REG |= value;
    349c:	a2 e3       	ldi	r26, 0x32	; 50
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	e2 e3       	ldi	r30, 0x32	; 50
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	90 81       	ld	r25, Z
    34a6:	8b 81       	ldd	r24, Y+3	; 0x03
    34a8:	89 2b       	or	r24, r25
    34aa:	8c 93       	st	X, r24
    34ac:	01 c0       	rjmp	.+2      	; 0x34b0 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    34ae:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <DIO_vSetLowNibbleDir+0x6>
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <DIO_vSetLowNibbleDir+0x8>
    34ca:	0f 92       	push	r0
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	8a 83       	std	Y+2, r24	; 0x02
    34d2:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	84 30       	cpi	r24, 0x04	; 4
    34dc:	08 f0       	brcs	.+2      	; 0x34e0 <DIO_vSetLowNibbleDir+0x1e>
    34de:	62 c0       	rjmp	.+196    	; 0x35a4 <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    34e0:	8b 81       	ldd	r24, Y+3	; 0x03
    34e2:	8f 70       	andi	r24, 0x0F	; 15
    34e4:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    34e6:	8a 81       	ldd	r24, Y+2	; 0x02
    34e8:	28 2f       	mov	r18, r24
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	3d 83       	std	Y+5, r19	; 0x05
    34ee:	2c 83       	std	Y+4, r18	; 0x04
    34f0:	8c 81       	ldd	r24, Y+4	; 0x04
    34f2:	9d 81       	ldd	r25, Y+5	; 0x05
    34f4:	81 30       	cpi	r24, 0x01	; 1
    34f6:	91 05       	cpc	r25, r1
    34f8:	29 f1       	breq	.+74     	; 0x3544 <DIO_vSetLowNibbleDir+0x82>
    34fa:	2c 81       	ldd	r18, Y+4	; 0x04
    34fc:	3d 81       	ldd	r19, Y+5	; 0x05
    34fe:	22 30       	cpi	r18, 0x02	; 2
    3500:	31 05       	cpc	r19, r1
    3502:	2c f4       	brge	.+10     	; 0x350e <DIO_vSetLowNibbleDir+0x4c>
    3504:	8c 81       	ldd	r24, Y+4	; 0x04
    3506:	9d 81       	ldd	r25, Y+5	; 0x05
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	61 f0       	breq	.+24     	; 0x3524 <DIO_vSetLowNibbleDir+0x62>
    350c:	4c c0       	rjmp	.+152    	; 0x35a6 <DIO_vSetLowNibbleDir+0xe4>
    350e:	2c 81       	ldd	r18, Y+4	; 0x04
    3510:	3d 81       	ldd	r19, Y+5	; 0x05
    3512:	22 30       	cpi	r18, 0x02	; 2
    3514:	31 05       	cpc	r19, r1
    3516:	31 f1       	breq	.+76     	; 0x3564 <DIO_vSetLowNibbleDir+0xa2>
    3518:	8c 81       	ldd	r24, Y+4	; 0x04
    351a:	9d 81       	ldd	r25, Y+5	; 0x05
    351c:	83 30       	cpi	r24, 0x03	; 3
    351e:	91 05       	cpc	r25, r1
    3520:	89 f1       	breq	.+98     	; 0x3584 <DIO_vSetLowNibbleDir+0xc2>
    3522:	41 c0       	rjmp	.+130    	; 0x35a6 <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    3524:	aa e3       	ldi	r26, 0x3A	; 58
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	ea e3       	ldi	r30, 0x3A	; 58
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	80 7f       	andi	r24, 0xF0	; 240
    3530:	8c 93       	st	X, r24
      DDRA_REG |= value;
    3532:	aa e3       	ldi	r26, 0x3A	; 58
    3534:	b0 e0       	ldi	r27, 0x00	; 0
    3536:	ea e3       	ldi	r30, 0x3A	; 58
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	90 81       	ld	r25, Z
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	89 2b       	or	r24, r25
    3540:	8c 93       	st	X, r24
    3542:	31 c0       	rjmp	.+98     	; 0x35a6 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    3544:	a7 e3       	ldi	r26, 0x37	; 55
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	e7 e3       	ldi	r30, 0x37	; 55
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	80 81       	ld	r24, Z
    354e:	80 7f       	andi	r24, 0xF0	; 240
    3550:	8c 93       	st	X, r24
      DDRB_REG |= value;
    3552:	a7 e3       	ldi	r26, 0x37	; 55
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	e7 e3       	ldi	r30, 0x37	; 55
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	90 81       	ld	r25, Z
    355c:	8b 81       	ldd	r24, Y+3	; 0x03
    355e:	89 2b       	or	r24, r25
    3560:	8c 93       	st	X, r24
    3562:	21 c0       	rjmp	.+66     	; 0x35a6 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    3564:	a4 e3       	ldi	r26, 0x34	; 52
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	e4 e3       	ldi	r30, 0x34	; 52
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	80 7f       	andi	r24, 0xF0	; 240
    3570:	8c 93       	st	X, r24
      DDRC_REG |= value;
    3572:	a4 e3       	ldi	r26, 0x34	; 52
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	e4 e3       	ldi	r30, 0x34	; 52
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	90 81       	ld	r25, Z
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	89 2b       	or	r24, r25
    3580:	8c 93       	st	X, r24
    3582:	11 c0       	rjmp	.+34     	; 0x35a6 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    3584:	a1 e3       	ldi	r26, 0x31	; 49
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	e1 e3       	ldi	r30, 0x31	; 49
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	80 7f       	andi	r24, 0xF0	; 240
    3590:	8c 93       	st	X, r24
      DDRD_REG|= value;
    3592:	a1 e3       	ldi	r26, 0x31	; 49
    3594:	b0 e0       	ldi	r27, 0x00	; 0
    3596:	e1 e3       	ldi	r30, 0x31	; 49
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	90 81       	ld	r25, Z
    359c:	8b 81       	ldd	r24, Y+3	; 0x03
    359e:	89 2b       	or	r24, r25
    35a0:	8c 93       	st	X, r24
    35a2:	01 c0       	rjmp	.+2      	; 0x35a6 <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    35a4:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	0f 90       	pop	r0
    35b0:	0f 90       	pop	r0
    35b2:	cf 91       	pop	r28
    35b4:	df 91       	pop	r29
    35b6:	08 95       	ret

000035b8 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    35b8:	df 93       	push	r29
    35ba:	cf 93       	push	r28
    35bc:	00 d0       	rcall	.+0      	; 0x35be <DIO_vSetHighNibbleDir+0x6>
    35be:	00 d0       	rcall	.+0      	; 0x35c0 <DIO_vSetHighNibbleDir+0x8>
    35c0:	0f 92       	push	r0
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	8a 83       	std	Y+2, r24	; 0x02
    35c8:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	84 30       	cpi	r24, 0x04	; 4
    35d2:	08 f0       	brcs	.+2      	; 0x35d6 <DIO_vSetHighNibbleDir+0x1e>
    35d4:	63 c0       	rjmp	.+198    	; 0x369c <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	82 95       	swap	r24
    35da:	80 7f       	andi	r24, 0xF0	; 240
    35dc:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	3d 83       	std	Y+5, r19	; 0x05
    35e6:	2c 83       	std	Y+4, r18	; 0x04
    35e8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ea:	9d 81       	ldd	r25, Y+5	; 0x05
    35ec:	81 30       	cpi	r24, 0x01	; 1
    35ee:	91 05       	cpc	r25, r1
    35f0:	29 f1       	breq	.+74     	; 0x363c <DIO_vSetHighNibbleDir+0x84>
    35f2:	2c 81       	ldd	r18, Y+4	; 0x04
    35f4:	3d 81       	ldd	r19, Y+5	; 0x05
    35f6:	22 30       	cpi	r18, 0x02	; 2
    35f8:	31 05       	cpc	r19, r1
    35fa:	2c f4       	brge	.+10     	; 0x3606 <DIO_vSetHighNibbleDir+0x4e>
    35fc:	8c 81       	ldd	r24, Y+4	; 0x04
    35fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	61 f0       	breq	.+24     	; 0x361c <DIO_vSetHighNibbleDir+0x64>
    3604:	4c c0       	rjmp	.+152    	; 0x369e <DIO_vSetHighNibbleDir+0xe6>
    3606:	2c 81       	ldd	r18, Y+4	; 0x04
    3608:	3d 81       	ldd	r19, Y+5	; 0x05
    360a:	22 30       	cpi	r18, 0x02	; 2
    360c:	31 05       	cpc	r19, r1
    360e:	31 f1       	breq	.+76     	; 0x365c <DIO_vSetHighNibbleDir+0xa4>
    3610:	8c 81       	ldd	r24, Y+4	; 0x04
    3612:	9d 81       	ldd	r25, Y+5	; 0x05
    3614:	83 30       	cpi	r24, 0x03	; 3
    3616:	91 05       	cpc	r25, r1
    3618:	89 f1       	breq	.+98     	; 0x367c <DIO_vSetHighNibbleDir+0xc4>
    361a:	41 c0       	rjmp	.+130    	; 0x369e <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    361c:	aa e3       	ldi	r26, 0x3A	; 58
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	ea e3       	ldi	r30, 0x3A	; 58
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	80 81       	ld	r24, Z
    3626:	8f 70       	andi	r24, 0x0F	; 15
    3628:	8c 93       	st	X, r24
      DDRA_REG |= value;
    362a:	aa e3       	ldi	r26, 0x3A	; 58
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	ea e3       	ldi	r30, 0x3A	; 58
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	90 81       	ld	r25, Z
    3634:	8b 81       	ldd	r24, Y+3	; 0x03
    3636:	89 2b       	or	r24, r25
    3638:	8c 93       	st	X, r24
    363a:	31 c0       	rjmp	.+98     	; 0x369e <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    363c:	a7 e3       	ldi	r26, 0x37	; 55
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	e7 e3       	ldi	r30, 0x37	; 55
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	8f 70       	andi	r24, 0x0F	; 15
    3648:	8c 93       	st	X, r24
      DDRB_REG |= value;
    364a:	a7 e3       	ldi	r26, 0x37	; 55
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	e7 e3       	ldi	r30, 0x37	; 55
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	90 81       	ld	r25, Z
    3654:	8b 81       	ldd	r24, Y+3	; 0x03
    3656:	89 2b       	or	r24, r25
    3658:	8c 93       	st	X, r24
    365a:	21 c0       	rjmp	.+66     	; 0x369e <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    365c:	a4 e3       	ldi	r26, 0x34	; 52
    365e:	b0 e0       	ldi	r27, 0x00	; 0
    3660:	e4 e3       	ldi	r30, 0x34	; 52
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	80 81       	ld	r24, Z
    3666:	8f 70       	andi	r24, 0x0F	; 15
    3668:	8c 93       	st	X, r24
      DDRC_REG |= value;
    366a:	a4 e3       	ldi	r26, 0x34	; 52
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	e4 e3       	ldi	r30, 0x34	; 52
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	90 81       	ld	r25, Z
    3674:	8b 81       	ldd	r24, Y+3	; 0x03
    3676:	89 2b       	or	r24, r25
    3678:	8c 93       	st	X, r24
    367a:	11 c0       	rjmp	.+34     	; 0x369e <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    367c:	a1 e3       	ldi	r26, 0x31	; 49
    367e:	b0 e0       	ldi	r27, 0x00	; 0
    3680:	e1 e3       	ldi	r30, 0x31	; 49
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	8f 70       	andi	r24, 0x0F	; 15
    3688:	8c 93       	st	X, r24
      DDRD_REG |= value;
    368a:	a1 e3       	ldi	r26, 0x31	; 49
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	e1 e3       	ldi	r30, 0x31	; 49
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	90 81       	ld	r25, Z
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	89 2b       	or	r24, r25
    3698:	8c 93       	st	X, r24
    369a:	01 c0       	rjmp	.+2      	; 0x369e <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    369c:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    369e:	89 81       	ldd	r24, Y+1	; 0x01
}
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	08 95       	ret

000036b0 <LED_vInit>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vInit(LED_config LED_Configuration)
{
    36b0:	df 93       	push	r29
    36b2:	cf 93       	push	r28
    36b4:	00 d0       	rcall	.+0      	; 0x36b6 <LED_vInit+0x6>
    36b6:	0f 92       	push	r0
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	69 83       	std	Y+1, r22	; 0x01
    36be:	7a 83       	std	Y+2, r23	; 0x02
    36c0:	8b 83       	std	Y+3, r24	; 0x03
  DIO_enumSetPinDir(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_OUTPUT);
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	9a 81       	ldd	r25, Y+2	; 0x02
    36c6:	69 2f       	mov	r22, r25
    36c8:	41 e0       	ldi	r20, 0x01	; 1
    36ca:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_enumSetPinDir>
}
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <LED_vTurnOn>:
* Parameters :
            => struct has the led port , pin, status
* return : void
*/
void LED_vTurnOn(LED_config LED_Configuration)
{
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <LED_vTurnOn+0x6>
    36e0:	0f 92       	push	r0
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	69 83       	std	Y+1, r22	; 0x01
    36e8:	7a 83       	std	Y+2, r23	; 0x02
    36ea:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    36ec:	8b 81       	ldd	r24, Y+3	; 0x03
    36ee:	81 30       	cpi	r24, 0x01	; 1
    36f0:	39 f4       	brne	.+14     	; 0x3700 <LED_vTurnOn+0x26>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	9a 81       	ldd	r25, Y+2	; 0x02
    36f6:	69 2f       	mov	r22, r25
    36f8:	41 e0       	ldi	r20, 0x01	; 1
    36fa:	0e 94 63 14 	call	0x28c6	; 0x28c6 <DIO_enumWritePinVal>
    36fe:	09 c0       	rjmp	.+18     	; 0x3712 <LED_vTurnOn+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	88 23       	and	r24, r24
    3704:	31 f4       	brne	.+12     	; 0x3712 <LED_vTurnOn+0x38>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	9a 81       	ldd	r25, Y+2	; 0x02
    370a:	69 2f       	mov	r22, r25
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <DIO_enumWritePinVal>
  }
}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <LED_vTurnOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTurnOff(LED_config LED_Configuration)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	00 d0       	rcall	.+0      	; 0x3724 <LED_vTurnOff+0x6>
    3724:	0f 92       	push	r0
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	69 83       	std	Y+1, r22	; 0x01
    372c:	7a 83       	std	Y+2, r23	; 0x02
    372e:	8b 83       	std	Y+3, r24	; 0x03
  if (LED_Configuration.ActiveState == ACTIVE_HIGH)
    3730:	8b 81       	ldd	r24, Y+3	; 0x03
    3732:	81 30       	cpi	r24, 0x01	; 1
    3734:	39 f4       	brne	.+14     	; 0x3744 <LED_vTurnOff+0x26>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_LOW);
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	9a 81       	ldd	r25, Y+2	; 0x02
    373a:	69 2f       	mov	r22, r25
    373c:	40 e0       	ldi	r20, 0x00	; 0
    373e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <DIO_enumWritePinVal>
    3742:	09 c0       	rjmp	.+18     	; 0x3756 <LED_vTurnOff+0x38>
  }
  else if (LED_Configuration.ActiveState == ACTIVE_LOW)
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	88 23       	and	r24, r24
    3748:	31 f4       	brne	.+12     	; 0x3756 <LED_vTurnOff+0x38>
  {
    DIO_enumWritePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber, DIO_PIN_HIGH);
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	9a 81       	ldd	r25, Y+2	; 0x02
    374e:	69 2f       	mov	r22, r25
    3750:	41 e0       	ldi	r20, 0x01	; 1
    3752:	0e 94 63 14 	call	0x28c6	; 0x28c6 <DIO_enumWritePinVal>
  }
}
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <LED_vTog>:
* Parameters :
             => struct has the led port , pin , status
* return : void
*/
void LED_vTog(LED_config LED_Configuration)
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	00 d0       	rcall	.+0      	; 0x3768 <LED_vTog+0x6>
    3768:	0f 92       	push	r0
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	69 83       	std	Y+1, r22	; 0x01
    3770:	7a 83       	std	Y+2, r23	; 0x02
    3772:	8b 83       	std	Y+3, r24	; 0x03
  DIO_enumTogglePinVal(LED_Configuration.PortName, LED_Configuration.PinNumber);
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	9a 81       	ldd	r25, Y+2	; 0x02
    3778:	69 2f       	mov	r22, r25
    377a:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <DIO_enumTogglePinVal>
}
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <EEPROM_vInit>:
/* to get bottom from usart and error status */
volatile u8 KPD_Press, Error_State = 1                      ;
volatile u8 UserName[20];

void EEPROM_vInit(void)
{
    378a:	0f 93       	push	r16
    378c:	1f 93       	push	r17
    378e:	df 93       	push	r29
    3790:	cf 93       	push	r28
    3792:	0f 92       	push	r0
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
	/* To get Number of User Name and Password Length from EEPROM for second sign in */
	UserName_Length = EEPROM_vRead(EEPROM_USNL_Location);
    3798:	83 e1       	ldi	r24, 0x13	; 19
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	0e 94 33 13 	call	0x2666	; 0x2666 <EEPROM_vRead>
    37a0:	80 93 dc 05 	sts	0x05DC, r24
	PassWord_Length = EEPROM_vRead(EEPROM_PWL_Location);
    37a4:	84 e1       	ldi	r24, 0x14	; 20
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	0e 94 33 13 	call	0x2666	; 0x2666 <EEPROM_vRead>
    37ac:	80 93 dd 05 	sts	0x05DD, r24

	/* To get number of tries left from EEPROM if it lost one of it Maximum */
	if (EEPROM_vRead(EEPROM_NoTries_Location) != NOTPRESSED)
    37b0:	82 e1       	ldi	r24, 0x12	; 18
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	0e 94 33 13 	call	0x2666	; 0x2666 <EEPROM_vRead>
    37b8:	8f 3f       	cpi	r24, 0xFF	; 255
    37ba:	31 f0       	breq	.+12     	; 0x37c8 <EEPROM_vInit+0x3e>
	{
		Tries = EEPROM_vRead(EEPROM_NoTries_Location);
    37bc:	82 e1       	ldi	r24, 0x12	; 18
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	0e 94 33 13 	call	0x2666	; 0x2666 <EEPROM_vRead>
    37c4:	80 93 6f 05 	sts	0x056F, r24
	}
	else
	{
	}
	/* check if There is UserName or Not */
	if (EEPROM_vRead(EEPROM_UserNameStatus) == NOTPRESSED)
    37c8:	80 e1       	ldi	r24, 0x10	; 16
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	0e 94 33 13 	call	0x2666	; 0x2666 <EEPROM_vRead>
    37d0:	8f 3f       	cpi	r24, 0xFF	; 255
    37d2:	49 f4       	brne	.+18     	; 0x37e6 <EEPROM_vInit+0x5c>
	{
		//if No User Name --> Set New User Name
		USART_u8SendStringSynch("Please Sign Up");
    37d4:	80 e6       	ldi	r24, 0x60	; 96
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendData(0X0D);
    37dc:	8d e0       	ldi	r24, 0x0D	; 13
    37de:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
		// Go To function To Set User_Name
		UserName_Set();
    37e2:	0e 94 25 1c 	call	0x384a	; 0x384a <UserName_Set>
	}
	//And also for Password
	if (EEPROM_vRead(EEPROM_PassWordStatus) == NOTPRESSED)
    37e6:	81 e1       	ldi	r24, 0x11	; 17
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	0e 94 33 13 	call	0x2666	; 0x2666 <EEPROM_vRead>
    37ee:	8f 3f       	cpi	r24, 0xFF	; 255
    37f0:	49 f4       	brne	.+18     	; 0x3804 <EEPROM_vInit+0x7a>
	{
		// Go To function To Set User_Name
		PassWord_Set();
    37f2:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <PassWord_Set>
		USART_u8SendStringSynch("Saved Successfully");
    37f6:	8f e6       	ldi	r24, 0x6F	; 111
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendData(0X0D);
    37fe:	8d e0       	ldi	r24, 0x0D	; 13
    3800:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	}
	/*___________________________________________________________________________________________________________________*/

	//check if Tries is lost or not (when user close project and reopen it when he was in time out)
	if (Tries == 0)
    3804:	80 91 6f 05 	lds	r24, 0x056F
    3808:	88 23       	and	r24, r24
    380a:	11 f4       	brne	.+4      	; 0x3810 <EEPROM_vInit+0x86>
	{
		Error_TimeOut();
    380c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <Error_TimeOut>
	else
	{

	}
	u8 i ;
	for(i = 0; i < UserName_Length; i++)
    3810:	19 82       	std	Y+1, r1	; 0x01
    3812:	10 c0       	rjmp	.+32     	; 0x3834 <EEPROM_vInit+0xaa>
	{
		UserName[i] = EEPROM_vRead(EEPROM_UserNameStartLocation + i);
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	08 2f       	mov	r16, r24
    3818:	10 e0       	ldi	r17, 0x00	; 0
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	88 2f       	mov	r24, r24
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	81 96       	adiw	r24, 0x21	; 33
    3822:	0e 94 33 13 	call	0x2666	; 0x2666 <EEPROM_vRead>
    3826:	f8 01       	movw	r30, r16
    3828:	e9 50       	subi	r30, 0x09	; 9
    382a:	fa 4f       	sbci	r31, 0xFA	; 250
    382c:	80 83       	st	Z, r24
	else
	{

	}
	u8 i ;
	for(i = 0; i < UserName_Length; i++)
    382e:	89 81       	ldd	r24, Y+1	; 0x01
    3830:	8f 5f       	subi	r24, 0xFF	; 255
    3832:	89 83       	std	Y+1, r24	; 0x01
    3834:	90 91 dc 05 	lds	r25, 0x05DC
    3838:	89 81       	ldd	r24, Y+1	; 0x01
    383a:	89 17       	cp	r24, r25
    383c:	58 f3       	brcs	.-42     	; 0x3814 <EEPROM_vInit+0x8a>
	{
		UserName[i] = EEPROM_vRead(EEPROM_UserNameStartLocation + i);
	}
}
    383e:	0f 90       	pop	r0
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	08 95       	ret

0000384a <UserName_Set>:

//======================================================================================================================================//

void UserName_Set(void)
{
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Set UserName");
    3852:	82 e8       	ldi	r24, 0x82	; 130
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    385a:	8d e0       	ldi	r24, 0x0D	; 13
    385c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("Maximum char : 20");
    3860:	8f e8       	ldi	r24, 0x8F	; 143
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    3868:	8d e0       	ldi	r24, 0x0D	; 13
    386a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	UserName_Length = 0;
    386e:	10 92 dc 05 	sts	0x05DC, r1
	/*Get username from user*/
	//do while with check to make user enter user name length more than 5 char
	do
	{
		// if username is less than 5 char and User Write any thing
		if (UserName_Length != 0)
    3872:	80 91 dc 05 	lds	r24, 0x05DC
    3876:	88 23       	and	r24, r24
    3878:	81 f0       	breq	.+32     	; 0x389a <UserName_Set+0x50>
		{
			USART_u8SendStringSynch("UserName Must be More than 5 Char");
    387a:	81 ea       	ldi	r24, 0xA1	; 161
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
			USART_u8SendData(0X0D);
    3882:	8d e0       	ldi	r24, 0x0D	; 13
    3884:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
			USART_u8SendStringSynch("Re Enter UserName");
    3888:	83 ec       	ldi	r24, 0xC3	; 195
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
			USART_u8SendData(0X0D);
    3890:	8d e0       	ldi	r24, 0x0D	; 13
    3892:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
			UserName_Length = 0;
    3896:	10 92 dc 05 	sts	0x05DC, r1
		}
		// get user name from user by using Keypoard
		while (1)
		{
			// get input from Laptop
			Error_State = USART_u8ReceiveData(&KPD_Press);
    389a:	86 ef       	ldi	r24, 0xF6	; 246
    389c:	95 e0       	ldi	r25, 0x05	; 5
    389e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    38a2:	80 93 72 05 	sts	0x0572, r24
			// if user name length is valid
			// To prevent user from delete or make any thing else writing if username less is still zero and that mean user didnt write any thing
			if (Error_State == OK && UserName_Length == 0)
    38a6:	80 91 72 05 	lds	r24, 0x0572
    38aa:	88 23       	and	r24, r24
    38ac:	01 f5       	brne	.+64     	; 0x38ee <UserName_Set+0xa4>
    38ae:	80 91 dc 05 	lds	r24, 0x05DC
    38b2:	88 23       	and	r24, r24
    38b4:	e1 f4       	brne	.+56     	; 0x38ee <UserName_Set+0xa4>
			{
				//if user press enter
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    38b6:	80 91 f6 05 	lds	r24, 0x05F6
    38ba:	8d 30       	cpi	r24, 0x0D	; 13
    38bc:	71 f3       	breq	.-36     	; 0x389a <UserName_Set+0x50>
    38be:	80 91 f6 05 	lds	r24, 0x05F6
    38c2:	8f 30       	cpi	r24, 0x0F	; 15
    38c4:	51 f3       	breq	.-44     	; 0x389a <UserName_Set+0x50>
				{
				}
				//if user press back space
				else if (KPD_Press == 0x08)
    38c6:	80 91 f6 05 	lds	r24, 0x05F6
    38ca:	88 30       	cpi	r24, 0x08	; 8
    38cc:	31 f3       	breq	.-52     	; 0x389a <UserName_Set+0x50>
				{
				}
				else
				{
					EEPROM_vWrite(EEPROM_UserNameStartLocation + UserName_Length, KPD_Press);
    38ce:	80 91 dc 05 	lds	r24, 0x05DC
    38d2:	88 2f       	mov	r24, r24
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	81 96       	adiw	r24, 0x21	; 33
    38d8:	20 91 f6 05 	lds	r18, 0x05F6
    38dc:	62 2f       	mov	r22, r18
    38de:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
					UserName_Length++;
    38e2:	80 91 dc 05 	lds	r24, 0x05DC
    38e6:	8f 5f       	subi	r24, 0xFF	; 255
    38e8:	80 93 dc 05 	sts	0x05DC, r24
    38ec:	d6 cf       	rjmp	.-84     	; 0x389a <UserName_Set+0x50>
				}
			}
			//if UserName length is less than 20 user can write and enter and do any thing
			else if (Error_State == OK && UserName_Length < 20)
    38ee:	80 91 72 05 	lds	r24, 0x0572
    38f2:	88 23       	and	r24, r24
    38f4:	31 f5       	brne	.+76     	; 0x3942 <UserName_Set+0xf8>
    38f6:	80 91 dc 05 	lds	r24, 0x05DC
    38fa:	84 31       	cpi	r24, 0x14	; 20
    38fc:	10 f5       	brcc	.+68     	; 0x3942 <UserName_Set+0xf8>
			{
				//if user press enter
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    38fe:	80 91 f6 05 	lds	r24, 0x05F6
    3902:	8d 30       	cpi	r24, 0x0D	; 13
    3904:	d9 f1       	breq	.+118    	; 0x397c <UserName_Set+0x132>
    3906:	80 91 f6 05 	lds	r24, 0x05F6
    390a:	8f 30       	cpi	r24, 0x0F	; 15
    390c:	b9 f1       	breq	.+110    	; 0x397c <UserName_Set+0x132>
				{
					break;
				}
				//if user press back space
				else if (KPD_Press == 0x08)
    390e:	80 91 f6 05 	lds	r24, 0x05F6
    3912:	88 30       	cpi	r24, 0x08	; 8
    3914:	31 f4       	brne	.+12     	; 0x3922 <UserName_Set+0xd8>
				{

					UserName_Length--;
    3916:	80 91 dc 05 	lds	r24, 0x05DC
    391a:	81 50       	subi	r24, 0x01	; 1
    391c:	80 93 dc 05 	sts	0x05DC, r24
    3920:	bc cf       	rjmp	.-136    	; 0x389a <UserName_Set+0x50>
				}
				else
				{
					EEPROM_vWrite(EEPROM_UserNameStartLocation + UserName_Length, KPD_Press);
    3922:	80 91 dc 05 	lds	r24, 0x05DC
    3926:	88 2f       	mov	r24, r24
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	81 96       	adiw	r24, 0x21	; 33
    392c:	20 91 f6 05 	lds	r18, 0x05F6
    3930:	62 2f       	mov	r22, r18
    3932:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
					UserName_Length++;
    3936:	80 91 dc 05 	lds	r24, 0x05DC
    393a:	8f 5f       	subi	r24, 0xFF	; 255
    393c:	80 93 dc 05 	sts	0x05DC, r24
    3940:	ac cf       	rjmp	.-168    	; 0x389a <UserName_Set+0x50>
				}
			}
			// if user name length is more than 20 do no thing exept enter and delete
			else if (Error_State == OK && UserName_Length >= 20)
    3942:	80 91 72 05 	lds	r24, 0x0572
    3946:	88 23       	and	r24, r24
    3948:	09 f0       	breq	.+2      	; 0x394c <UserName_Set+0x102>
    394a:	a7 cf       	rjmp	.-178    	; 0x389a <UserName_Set+0x50>
    394c:	80 91 dc 05 	lds	r24, 0x05DC
    3950:	84 31       	cpi	r24, 0x14	; 20
    3952:	08 f4       	brcc	.+2      	; 0x3956 <UserName_Set+0x10c>
    3954:	a2 cf       	rjmp	.-188    	; 0x389a <UserName_Set+0x50>
			{
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3956:	80 91 f6 05 	lds	r24, 0x05F6
    395a:	8d 30       	cpi	r24, 0x0D	; 13
    395c:	79 f0       	breq	.+30     	; 0x397c <UserName_Set+0x132>
    395e:	80 91 f6 05 	lds	r24, 0x05F6
    3962:	8f 30       	cpi	r24, 0x0F	; 15
    3964:	59 f0       	breq	.+22     	; 0x397c <UserName_Set+0x132>
				{
					break;
				}
				else if (KPD_Press == 0x08)
    3966:	80 91 f6 05 	lds	r24, 0x05F6
    396a:	88 30       	cpi	r24, 0x08	; 8
    396c:	09 f0       	breq	.+2      	; 0x3970 <UserName_Set+0x126>
    396e:	95 cf       	rjmp	.-214    	; 0x389a <UserName_Set+0x50>
				{

					UserName_Length--;
    3970:	80 91 dc 05 	lds	r24, 0x05DC
    3974:	81 50       	subi	r24, 0x01	; 1
    3976:	80 93 dc 05 	sts	0x05DC, r24
    397a:	8f cf       	rjmp	.-226    	; 0x389a <UserName_Set+0x50>
			}
			else
			{
			}
		}
	} while (UserName_Length <= 5); //didn't went out untill user enter more than 5 char
    397c:	80 91 dc 05 	lds	r24, 0x05DC
    3980:	86 30       	cpi	r24, 0x06	; 6
    3982:	08 f4       	brcc	.+2      	; 0x3986 <UserName_Set+0x13c>
    3984:	76 cf       	rjmp	.-276    	; 0x3872 <UserName_Set+0x28>
	/*___________________________________________________________________________________________________________________*/

	//To write User Name length in EEPROM to dont lose it in the future and i want it in checking
	EEPROM_vWrite(EEPROM_UserNameStatus, 0x00);
    3986:	80 e1       	ldi	r24, 0x10	; 16
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
	EEPROM_vWrite(EEPROM_USNL_Location, UserName_Length);
    3990:	20 91 dc 05 	lds	r18, 0x05DC
    3994:	83 e1       	ldi	r24, 0x13	; 19
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	62 2f       	mov	r22, r18
    399a:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
}
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	08 95       	ret

000039a4 <PassWord_Set>:

//======================================================================================================================================//

void PassWord_Set(void)
{
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	cd b7       	in	r28, 0x3d	; 61
    39aa:	de b7       	in	r29, 0x3e	; 62
	//Function to get password from user like UserName Set Function
	USART_u8SendStringSynch("Set PassWord");
    39ac:	85 ed       	ldi	r24, 0xD5	; 213
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    39b4:	8d e0       	ldi	r24, 0x0D	; 13
    39b6:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("Maximum char : 20");
    39ba:	8f e8       	ldi	r24, 0x8F	; 143
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    39c2:	8d e0       	ldi	r24, 0x0D	; 13
    39c4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	PassWord_Length = 0;
    39c8:	10 92 dd 05 	sts	0x05DD, r1
	/*Get username from user*/
	do
	{
		// if username is less than 5 char
		if (PassWord_Length != 0)
    39cc:	80 91 dd 05 	lds	r24, 0x05DD
    39d0:	88 23       	and	r24, r24
    39d2:	b9 f0       	breq	.+46     	; 0x3a02 <PassWord_Set+0x5e>
		{
			USART_u8SendStringSynch("PassWord Must be More than 5 Char");
    39d4:	82 ee       	ldi	r24, 0xE2	; 226
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
			USART_u8SendData(0X0D);
    39dc:	8d e0       	ldi	r24, 0x0D	; 13
    39de:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

			USART_u8SendStringSynch("Re Set PassWord");
    39e2:	84 e0       	ldi	r24, 0x04	; 4
    39e4:	91 e0       	ldi	r25, 0x01	; 1
    39e6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
			USART_u8SendData(0X0D);
    39ea:	8d e0       	ldi	r24, 0x0D	; 13
    39ec:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
			USART_u8SendStringSynch("Maximum char : 20");
    39f0:	8f e8       	ldi	r24, 0x8F	; 143
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
			USART_u8SendData(0X0D);
    39f8:	8d e0       	ldi	r24, 0x0D	; 13
    39fa:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
			PassWord_Length = 0;
    39fe:	10 92 dd 05 	sts	0x05DD, r1
		}
		// get user name from user by using Keypoard
		while (1)
		{
			// get input from Laptop
			Error_State = USART_u8ReceiveData(&KPD_Press);
    3a02:	86 ef       	ldi	r24, 0xF6	; 246
    3a04:	95 e0       	ldi	r25, 0x05	; 5
    3a06:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    3a0a:	80 93 72 05 	sts	0x0572, r24
			// if user name length is valid
			// To prevent user from delete or make any thing else writing if username less is still zero and that mean user didnt write any thing
			if (Error_State == OK && PassWord_Length == 0)
    3a0e:	80 91 72 05 	lds	r24, 0x0572
    3a12:	88 23       	and	r24, r24
    3a14:	09 f5       	brne	.+66     	; 0x3a58 <PassWord_Set+0xb4>
    3a16:	80 91 dd 05 	lds	r24, 0x05DD
    3a1a:	88 23       	and	r24, r24
    3a1c:	e9 f4       	brne	.+58     	; 0x3a58 <PassWord_Set+0xb4>
			{
				//if user press enter
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3a1e:	80 91 f6 05 	lds	r24, 0x05F6
    3a22:	8d 30       	cpi	r24, 0x0D	; 13
    3a24:	71 f3       	breq	.-36     	; 0x3a02 <PassWord_Set+0x5e>
    3a26:	80 91 f6 05 	lds	r24, 0x05F6
    3a2a:	8f 30       	cpi	r24, 0x0F	; 15
    3a2c:	51 f3       	breq	.-44     	; 0x3a02 <PassWord_Set+0x5e>
				{
				}
				//if user press back space
				else if (KPD_Press == 0x08)
    3a2e:	80 91 f6 05 	lds	r24, 0x05F6
    3a32:	88 30       	cpi	r24, 0x08	; 8
    3a34:	31 f3       	breq	.-52     	; 0x3a02 <PassWord_Set+0x5e>
				{
				}
				else
				{
					EEPROM_vWrite(EEPROM_PassWordStartLocation + PassWord_Length, KPD_Press);
    3a36:	80 91 dd 05 	lds	r24, 0x05DD
    3a3a:	88 2f       	mov	r24, r24
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	8f 5b       	subi	r24, 0xBF	; 191
    3a40:	9f 4f       	sbci	r25, 0xFF	; 255
    3a42:	20 91 f6 05 	lds	r18, 0x05F6
    3a46:	62 2f       	mov	r22, r18
    3a48:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
					PassWord_Length++;
    3a4c:	80 91 dd 05 	lds	r24, 0x05DD
    3a50:	8f 5f       	subi	r24, 0xFF	; 255
    3a52:	80 93 dd 05 	sts	0x05DD, r24
    3a56:	d5 cf       	rjmp	.-86     	; 0x3a02 <PassWord_Set+0x5e>
				}
			}
			// if UserName length is less than 20 user can write and enter and do any thing
			else if (Error_State == OK && PassWord_Length < 20)
    3a58:	80 91 72 05 	lds	r24, 0x0572
    3a5c:	88 23       	and	r24, r24
    3a5e:	39 f5       	brne	.+78     	; 0x3aae <PassWord_Set+0x10a>
    3a60:	80 91 dd 05 	lds	r24, 0x05DD
    3a64:	84 31       	cpi	r24, 0x14	; 20
    3a66:	18 f5       	brcc	.+70     	; 0x3aae <PassWord_Set+0x10a>
			{
				//if user press enter
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3a68:	80 91 f6 05 	lds	r24, 0x05F6
    3a6c:	8d 30       	cpi	r24, 0x0D	; 13
    3a6e:	e1 f1       	breq	.+120    	; 0x3ae8 <PassWord_Set+0x144>
    3a70:	80 91 f6 05 	lds	r24, 0x05F6
    3a74:	8f 30       	cpi	r24, 0x0F	; 15
    3a76:	c1 f1       	breq	.+112    	; 0x3ae8 <PassWord_Set+0x144>
				{
					break;
				}
				//if user press back space
				else if (KPD_Press == 0x08)
    3a78:	80 91 f6 05 	lds	r24, 0x05F6
    3a7c:	88 30       	cpi	r24, 0x08	; 8
    3a7e:	31 f4       	brne	.+12     	; 0x3a8c <PassWord_Set+0xe8>
				{
					PassWord_Length--;
    3a80:	80 91 dd 05 	lds	r24, 0x05DD
    3a84:	81 50       	subi	r24, 0x01	; 1
    3a86:	80 93 dd 05 	sts	0x05DD, r24
    3a8a:	bb cf       	rjmp	.-138    	; 0x3a02 <PassWord_Set+0x5e>
				}
				//if user enter valid data
				else
				{
					EEPROM_vWrite(EEPROM_PassWordStartLocation + PassWord_Length, KPD_Press);
    3a8c:	80 91 dd 05 	lds	r24, 0x05DD
    3a90:	88 2f       	mov	r24, r24
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	8f 5b       	subi	r24, 0xBF	; 191
    3a96:	9f 4f       	sbci	r25, 0xFF	; 255
    3a98:	20 91 f6 05 	lds	r18, 0x05F6
    3a9c:	62 2f       	mov	r22, r18
    3a9e:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
					PassWord_Length++;
    3aa2:	80 91 dd 05 	lds	r24, 0x05DD
    3aa6:	8f 5f       	subi	r24, 0xFF	; 255
    3aa8:	80 93 dd 05 	sts	0x05DD, r24
    3aac:	aa cf       	rjmp	.-172    	; 0x3a02 <PassWord_Set+0x5e>
				}
			}
			// if user name length is more than 20 do no thing exept enter and delete
			else if (Error_State == OK && PassWord_Length >= 20)
    3aae:	80 91 72 05 	lds	r24, 0x0572
    3ab2:	88 23       	and	r24, r24
    3ab4:	09 f0       	breq	.+2      	; 0x3ab8 <PassWord_Set+0x114>
    3ab6:	a5 cf       	rjmp	.-182    	; 0x3a02 <PassWord_Set+0x5e>
    3ab8:	80 91 dd 05 	lds	r24, 0x05DD
    3abc:	84 31       	cpi	r24, 0x14	; 20
    3abe:	08 f4       	brcc	.+2      	; 0x3ac2 <PassWord_Set+0x11e>
    3ac0:	a0 cf       	rjmp	.-192    	; 0x3a02 <PassWord_Set+0x5e>
			{
				// if user press enter
				if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3ac2:	80 91 f6 05 	lds	r24, 0x05F6
    3ac6:	8d 30       	cpi	r24, 0x0D	; 13
    3ac8:	79 f0       	breq	.+30     	; 0x3ae8 <PassWord_Set+0x144>
    3aca:	80 91 f6 05 	lds	r24, 0x05F6
    3ace:	8f 30       	cpi	r24, 0x0F	; 15
    3ad0:	59 f0       	breq	.+22     	; 0x3ae8 <PassWord_Set+0x144>
				{
					break;
				}
				// if user press back space
				else if (KPD_Press == 0x08)
    3ad2:	80 91 f6 05 	lds	r24, 0x05F6
    3ad6:	88 30       	cpi	r24, 0x08	; 8
    3ad8:	09 f0       	breq	.+2      	; 0x3adc <PassWord_Set+0x138>
    3ada:	93 cf       	rjmp	.-218    	; 0x3a02 <PassWord_Set+0x5e>
				{
					PassWord_Length--;
    3adc:	80 91 dd 05 	lds	r24, 0x05DD
    3ae0:	81 50       	subi	r24, 0x01	; 1
    3ae2:	80 93 dd 05 	sts	0x05DD, r24
    3ae6:	8d cf       	rjmp	.-230    	; 0x3a02 <PassWord_Set+0x5e>
			}
			else
			{
			}
		}
	} while (PassWord_Length <= 5);
    3ae8:	80 91 dd 05 	lds	r24, 0x05DD
    3aec:	86 30       	cpi	r24, 0x06	; 6
    3aee:	08 f4       	brcc	.+2      	; 0x3af2 <PassWord_Set+0x14e>
    3af0:	6d cf       	rjmp	.-294    	; 0x39cc <PassWord_Set+0x28>
	/*___________________________________________________________________________________________________________________*/

	// To write passWord length in EEPROM to dont lose it in the future and i want it in checking
	EEPROM_vWrite(EEPROM_PassWordStatus, 0x00);
    3af2:	81 e1       	ldi	r24, 0x11	; 17
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	60 e0       	ldi	r22, 0x00	; 0
    3af8:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
	EEPROM_vWrite(EEPROM_PWL_Location, PassWord_Length);
    3afc:	20 91 dd 05 	lds	r18, 0x05DD
    3b00:	84 e1       	ldi	r24, 0x14	; 20
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	62 2f       	mov	r22, r18
    3b06:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
}
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <UserName_Check>:

//======================================================================================================================================//

//check if user name is true or not
void UserName_Check(void)
{
    3b10:	1f 93       	push	r17
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	00 d0       	rcall	.+0      	; 0x3b18 <UserName_Check+0x8>
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Check UserName");
    3b1c:	84 e1       	ldi	r24, 0x14	; 20
    3b1e:	91 e0       	ldi	r25, 0x01	; 1
    3b20:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    3b24:	8d e0       	ldi	r24, 0x0D	; 13
    3b26:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	u8 CheckLength = 0;
    3b2a:	1a 82       	std	Y+2, r1	; 0x02
	UserName_Check_Flag = 1;
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	80 93 70 05 	sts	0x0570, r24
	while (1)
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    3b32:	86 ef       	ldi	r24, 0xF6	; 246
    3b34:	95 e0       	ldi	r25, 0x05	; 5
    3b36:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    3b3a:	80 93 72 05 	sts	0x0572, r24
		// if user name length is valid
		if (Error_State == OK && CheckLength == 0)
    3b3e:	80 91 72 05 	lds	r24, 0x0572
    3b42:	88 23       	and	r24, r24
    3b44:	e1 f4       	brne	.+56     	; 0x3b7e <UserName_Check+0x6e>
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	88 23       	and	r24, r24
    3b4a:	c9 f4       	brne	.+50     	; 0x3b7e <UserName_Check+0x6e>
		{
			// if user press enter
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3b4c:	80 91 f6 05 	lds	r24, 0x05F6
    3b50:	8d 30       	cpi	r24, 0x0D	; 13
    3b52:	79 f3       	breq	.-34     	; 0x3b32 <UserName_Check+0x22>
    3b54:	80 91 f6 05 	lds	r24, 0x05F6
    3b58:	8f 30       	cpi	r24, 0x0F	; 15
    3b5a:	59 f3       	breq	.-42     	; 0x3b32 <UserName_Check+0x22>
			{
			}
			// if user press back space
			else if (KPD_Press == 0x08)
    3b5c:	80 91 f6 05 	lds	r24, 0x05F6
    3b60:	88 30       	cpi	r24, 0x08	; 8
    3b62:	39 f3       	breq	.-50     	; 0x3b32 <UserName_Check+0x22>
			{
			}
			// if user enter valid data
			else
			{
				Check[CheckLength] = KPD_Press;
    3b64:	8a 81       	ldd	r24, Y+2	; 0x02
    3b66:	88 2f       	mov	r24, r24
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	20 91 f6 05 	lds	r18, 0x05F6
    3b6e:	fc 01       	movw	r30, r24
    3b70:	ef 51       	subi	r30, 0x1F	; 31
    3b72:	fa 4f       	sbci	r31, 0xFA	; 250
    3b74:	20 83       	st	Z, r18
				CheckLength++;
    3b76:	8a 81       	ldd	r24, Y+2	; 0x02
    3b78:	8f 5f       	subi	r24, 0xFF	; 255
    3b7a:	8a 83       	std	Y+2, r24	; 0x02
    3b7c:	da cf       	rjmp	.-76     	; 0x3b32 <UserName_Check+0x22>
			}
		}
		else if (Error_State == OK && CheckLength < 20)
    3b7e:	80 91 72 05 	lds	r24, 0x0572
    3b82:	88 23       	and	r24, r24
    3b84:	01 f5       	brne	.+64     	; 0x3bc6 <UserName_Check+0xb6>
    3b86:	8a 81       	ldd	r24, Y+2	; 0x02
    3b88:	84 31       	cpi	r24, 0x14	; 20
    3b8a:	e8 f4       	brcc	.+58     	; 0x3bc6 <UserName_Check+0xb6>
		{
			// if user press enter
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3b8c:	80 91 f6 05 	lds	r24, 0x05F6
    3b90:	8d 30       	cpi	r24, 0x0D	; 13
    3b92:	99 f1       	breq	.+102    	; 0x3bfa <UserName_Check+0xea>
    3b94:	80 91 f6 05 	lds	r24, 0x05F6
    3b98:	8f 30       	cpi	r24, 0x0F	; 15
    3b9a:	79 f1       	breq	.+94     	; 0x3bfa <UserName_Check+0xea>
			{
				break;
			}
			// if user press back space
			else if (KPD_Press == 0x08)
    3b9c:	80 91 f6 05 	lds	r24, 0x05F6
    3ba0:	88 30       	cpi	r24, 0x08	; 8
    3ba2:	21 f4       	brne	.+8      	; 0x3bac <UserName_Check+0x9c>
			{

				CheckLength--;
    3ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba6:	81 50       	subi	r24, 0x01	; 1
    3ba8:	8a 83       	std	Y+2, r24	; 0x02
    3baa:	c3 cf       	rjmp	.-122    	; 0x3b32 <UserName_Check+0x22>
			}
			// if user enter valid data
			else
			{
				Check[CheckLength] = KPD_Press;
    3bac:	8a 81       	ldd	r24, Y+2	; 0x02
    3bae:	88 2f       	mov	r24, r24
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	20 91 f6 05 	lds	r18, 0x05F6
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	ef 51       	subi	r30, 0x1F	; 31
    3bba:	fa 4f       	sbci	r31, 0xFA	; 250
    3bbc:	20 83       	st	Z, r18
				CheckLength++;
    3bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc0:	8f 5f       	subi	r24, 0xFF	; 255
    3bc2:	8a 83       	std	Y+2, r24	; 0x02
    3bc4:	b6 cf       	rjmp	.-148    	; 0x3b32 <UserName_Check+0x22>
			}
		}
		// if user name length is more than 20 do no thing exept enter and delete
		else if (Error_State == OK && CheckLength >= 20)
    3bc6:	80 91 72 05 	lds	r24, 0x0572
    3bca:	88 23       	and	r24, r24
    3bcc:	09 f0       	breq	.+2      	; 0x3bd0 <UserName_Check+0xc0>
    3bce:	b1 cf       	rjmp	.-158    	; 0x3b32 <UserName_Check+0x22>
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	84 31       	cpi	r24, 0x14	; 20
    3bd4:	08 f4       	brcc	.+2      	; 0x3bd8 <UserName_Check+0xc8>
    3bd6:	ad cf       	rjmp	.-166    	; 0x3b32 <UserName_Check+0x22>
		{
			// if user press enter
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3bd8:	80 91 f6 05 	lds	r24, 0x05F6
    3bdc:	8d 30       	cpi	r24, 0x0D	; 13
    3bde:	69 f0       	breq	.+26     	; 0x3bfa <UserName_Check+0xea>
    3be0:	80 91 f6 05 	lds	r24, 0x05F6
    3be4:	8f 30       	cpi	r24, 0x0F	; 15
    3be6:	49 f0       	breq	.+18     	; 0x3bfa <UserName_Check+0xea>
			{
				break;
			}
			// if user press back space
			else if (KPD_Press == 0x08)
    3be8:	80 91 f6 05 	lds	r24, 0x05F6
    3bec:	88 30       	cpi	r24, 0x08	; 8
    3bee:	09 f0       	breq	.+2      	; 0x3bf2 <UserName_Check+0xe2>
    3bf0:	a0 cf       	rjmp	.-192    	; 0x3b32 <UserName_Check+0x22>
			{

				CheckLength--;
    3bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf4:	81 50       	subi	r24, 0x01	; 1
    3bf6:	8a 83       	std	Y+2, r24	; 0x02
    3bf8:	9c cf       	rjmp	.-200    	; 0x3b32 <UserName_Check+0x22>
	}

	/*___________________________________________________________________________________________________________________*/

	// Check if UserName is correct or not
	if (CheckLength == UserName_Length)
    3bfa:	90 91 dc 05 	lds	r25, 0x05DC
    3bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3c00:	89 17       	cp	r24, r25
    3c02:	29 f5       	brne	.+74     	; 0x3c4e <UserName_Check+0x13e>
	{
		for (u8 i = 0; i <= PassWord_Length; i++)
    3c04:	19 82       	std	Y+1, r1	; 0x01
    3c06:	1d c0       	rjmp	.+58     	; 0x3c42 <UserName_Check+0x132>
		{
			if (Check[i] == '\0')
    3c08:	89 81       	ldd	r24, Y+1	; 0x01
    3c0a:	88 2f       	mov	r24, r24
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	fc 01       	movw	r30, r24
    3c10:	ef 51       	subi	r30, 0x1F	; 31
    3c12:	fa 4f       	sbci	r31, 0xFA	; 250
    3c14:	80 81       	ld	r24, Z
    3c16:	88 23       	and	r24, r24
    3c18:	09 f1       	breq	.+66     	; 0x3c5c <UserName_Check+0x14c>
			{
				break;
			}
			else if (Check[i] != EEPROM_vRead(EEPROM_UserNameStartLocation + i))
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
    3c1c:	88 2f       	mov	r24, r24
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	fc 01       	movw	r30, r24
    3c22:	ef 51       	subi	r30, 0x1F	; 31
    3c24:	fa 4f       	sbci	r31, 0xFA	; 250
    3c26:	10 81       	ld	r17, Z
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	88 2f       	mov	r24, r24
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	81 96       	adiw	r24, 0x21	; 33
    3c30:	0e 94 33 13 	call	0x2666	; 0x2666 <EEPROM_vRead>
    3c34:	18 17       	cp	r17, r24
    3c36:	11 f0       	breq	.+4      	; 0x3c3c <UserName_Check+0x12c>
			{
				UserName_Check_Flag = 0; // if it false make this flag to zero
    3c38:	10 92 70 05 	sts	0x0570, r1
	/*___________________________________________________________________________________________________________________*/

	// Check if UserName is correct or not
	if (CheckLength == UserName_Length)
	{
		for (u8 i = 0; i <= PassWord_Length; i++)
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	8f 5f       	subi	r24, 0xFF	; 255
    3c40:	89 83       	std	Y+1, r24	; 0x01
    3c42:	90 91 dd 05 	lds	r25, 0x05DD
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	98 17       	cp	r25, r24
    3c4a:	f0 f6       	brcc	.-68     	; 0x3c08 <UserName_Check+0xf8>
    3c4c:	07 c0       	rjmp	.+14     	; 0x3c5c <UserName_Check+0x14c>
			else
			{
			}
		}
	}
	else if (CheckLength != UserName_Length)
    3c4e:	90 91 dc 05 	lds	r25, 0x05DC
    3c52:	8a 81       	ldd	r24, Y+2	; 0x02
    3c54:	89 17       	cp	r24, r25
    3c56:	11 f0       	breq	.+4      	; 0x3c5c <UserName_Check+0x14c>
	{
		UserName_Check_Flag = 0;//and if CheckLength is != username length make it false without checkin because it fale with out checking
    3c58:	10 92 70 05 	sts	0x0570, r1
	}
	else
	{
	}
}
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	1f 91       	pop	r17
    3c66:	08 95       	ret

00003c68 <PassWord_Check>:

//======================================================================================================================================//

void PassWord_Check(void)
{
    3c68:	1f 93       	push	r17
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	00 d0       	rcall	.+0      	; 0x3c70 <PassWord_Check+0x8>
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62

	USART_u8SendStringSynch("Check PassWord");
    3c74:	83 e2       	ldi	r24, 0x23	; 35
    3c76:	91 e0       	ldi	r25, 0x01	; 1
    3c78:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    3c7c:	8d e0       	ldi	r24, 0x0D	; 13
    3c7e:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	u8 CheckLength = 0;
    3c82:	1a 82       	std	Y+2, r1	; 0x02
	PassWord_Check_Flag = 1;
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	80 93 71 05 	sts	0x0571, r24

	while (1)
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    3c8a:	86 ef       	ldi	r24, 0xF6	; 246
    3c8c:	95 e0       	ldi	r25, 0x05	; 5
    3c8e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    3c92:	80 93 72 05 	sts	0x0572, r24
		// if user name length is valid
		if (Error_State == OK && CheckLength == 0)
    3c96:	80 91 72 05 	lds	r24, 0x0572
    3c9a:	88 23       	and	r24, r24
    3c9c:	e1 f4       	brne	.+56     	; 0x3cd6 <PassWord_Check+0x6e>
    3c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca0:	88 23       	and	r24, r24
    3ca2:	c9 f4       	brne	.+50     	; 0x3cd6 <PassWord_Check+0x6e>
		{
			// if user press enter
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3ca4:	80 91 f6 05 	lds	r24, 0x05F6
    3ca8:	8d 30       	cpi	r24, 0x0D	; 13
    3caa:	79 f3       	breq	.-34     	; 0x3c8a <PassWord_Check+0x22>
    3cac:	80 91 f6 05 	lds	r24, 0x05F6
    3cb0:	8f 30       	cpi	r24, 0x0F	; 15
    3cb2:	59 f3       	breq	.-42     	; 0x3c8a <PassWord_Check+0x22>
			{
			}
			// if user press back space
			else if (KPD_Press == 0x08)
    3cb4:	80 91 f6 05 	lds	r24, 0x05F6
    3cb8:	88 30       	cpi	r24, 0x08	; 8
    3cba:	39 f3       	breq	.-50     	; 0x3c8a <PassWord_Check+0x22>
			{
			}
			// if user enter valid data
			else
			{
				Check[CheckLength] = KPD_Press;
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbe:	88 2f       	mov	r24, r24
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	20 91 f6 05 	lds	r18, 0x05F6
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	ef 51       	subi	r30, 0x1F	; 31
    3cca:	fa 4f       	sbci	r31, 0xFA	; 250
    3ccc:	20 83       	st	Z, r18
				CheckLength++;
    3cce:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd0:	8f 5f       	subi	r24, 0xFF	; 255
    3cd2:	8a 83       	std	Y+2, r24	; 0x02
    3cd4:	da cf       	rjmp	.-76     	; 0x3c8a <PassWord_Check+0x22>
			}
		}
		else if (Error_State == OK && CheckLength < 20)
    3cd6:	80 91 72 05 	lds	r24, 0x0572
    3cda:	88 23       	and	r24, r24
    3cdc:	01 f5       	brne	.+64     	; 0x3d1e <PassWord_Check+0xb6>
    3cde:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce0:	84 31       	cpi	r24, 0x14	; 20
    3ce2:	e8 f4       	brcc	.+58     	; 0x3d1e <PassWord_Check+0xb6>
		{
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3ce4:	80 91 f6 05 	lds	r24, 0x05F6
    3ce8:	8d 30       	cpi	r24, 0x0D	; 13
    3cea:	99 f1       	breq	.+102    	; 0x3d52 <PassWord_Check+0xea>
    3cec:	80 91 f6 05 	lds	r24, 0x05F6
    3cf0:	8f 30       	cpi	r24, 0x0F	; 15
    3cf2:	79 f1       	breq	.+94     	; 0x3d52 <PassWord_Check+0xea>
			{
				break;
			}
			else if (KPD_Press == 0x08)
    3cf4:	80 91 f6 05 	lds	r24, 0x05F6
    3cf8:	88 30       	cpi	r24, 0x08	; 8
    3cfa:	21 f4       	brne	.+8      	; 0x3d04 <PassWord_Check+0x9c>
			{

				CheckLength--;
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	81 50       	subi	r24, 0x01	; 1
    3d00:	8a 83       	std	Y+2, r24	; 0x02
    3d02:	c3 cf       	rjmp	.-122    	; 0x3c8a <PassWord_Check+0x22>
			}
			else
			{
				Check[CheckLength] = KPD_Press;
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	88 2f       	mov	r24, r24
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	20 91 f6 05 	lds	r18, 0x05F6
    3d0e:	fc 01       	movw	r30, r24
    3d10:	ef 51       	subi	r30, 0x1F	; 31
    3d12:	fa 4f       	sbci	r31, 0xFA	; 250
    3d14:	20 83       	st	Z, r18
				CheckLength++;
    3d16:	8a 81       	ldd	r24, Y+2	; 0x02
    3d18:	8f 5f       	subi	r24, 0xFF	; 255
    3d1a:	8a 83       	std	Y+2, r24	; 0x02
    3d1c:	b6 cf       	rjmp	.-148    	; 0x3c8a <PassWord_Check+0x22>
			}
		}
		// if user name length is more than 20 do no thing exept enter and delete
		else if (Error_State == OK && CheckLength >= 20)
    3d1e:	80 91 72 05 	lds	r24, 0x0572
    3d22:	88 23       	and	r24, r24
    3d24:	09 f0       	breq	.+2      	; 0x3d28 <PassWord_Check+0xc0>
    3d26:	b1 cf       	rjmp	.-158    	; 0x3c8a <PassWord_Check+0x22>
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	84 31       	cpi	r24, 0x14	; 20
    3d2c:	08 f4       	brcc	.+2      	; 0x3d30 <PassWord_Check+0xc8>
    3d2e:	ad cf       	rjmp	.-166    	; 0x3c8a <PassWord_Check+0x22>
		{
			if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    3d30:	80 91 f6 05 	lds	r24, 0x05F6
    3d34:	8d 30       	cpi	r24, 0x0D	; 13
    3d36:	69 f0       	breq	.+26     	; 0x3d52 <PassWord_Check+0xea>
    3d38:	80 91 f6 05 	lds	r24, 0x05F6
    3d3c:	8f 30       	cpi	r24, 0x0F	; 15
    3d3e:	49 f0       	breq	.+18     	; 0x3d52 <PassWord_Check+0xea>
			{
				break;
			}
			else if (KPD_Press == 0x08)
    3d40:	80 91 f6 05 	lds	r24, 0x05F6
    3d44:	88 30       	cpi	r24, 0x08	; 8
    3d46:	09 f0       	breq	.+2      	; 0x3d4a <PassWord_Check+0xe2>
    3d48:	a0 cf       	rjmp	.-192    	; 0x3c8a <PassWord_Check+0x22>
			{

				CheckLength--;
    3d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4c:	81 50       	subi	r24, 0x01	; 1
    3d4e:	8a 83       	std	Y+2, r24	; 0x02
    3d50:	9c cf       	rjmp	.-200    	; 0x3c8a <PassWord_Check+0x22>
	}

	/*___________________________________________________________________________________________________________________*/

	// Check if password is correct or not
	if (CheckLength == PassWord_Length)
    3d52:	90 91 dd 05 	lds	r25, 0x05DD
    3d56:	8a 81       	ldd	r24, Y+2	; 0x02
    3d58:	89 17       	cp	r24, r25
    3d5a:	31 f5       	brne	.+76     	; 0x3da8 <PassWord_Check+0x140>
	{
		for (u8 i = 0; i < PassWord_Length; i++)
    3d5c:	19 82       	std	Y+1, r1	; 0x01
    3d5e:	1e c0       	rjmp	.+60     	; 0x3d9c <PassWord_Check+0x134>
		{
			if (Check[i] == '\0')
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	88 2f       	mov	r24, r24
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	fc 01       	movw	r30, r24
    3d68:	ef 51       	subi	r30, 0x1F	; 31
    3d6a:	fa 4f       	sbci	r31, 0xFA	; 250
    3d6c:	80 81       	ld	r24, Z
    3d6e:	88 23       	and	r24, r24
    3d70:	11 f1       	breq	.+68     	; 0x3db6 <PassWord_Check+0x14e>
			{
				break;
			}
			if (Check[i] != EEPROM_vRead(EEPROM_PassWordStartLocation + i))
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	88 2f       	mov	r24, r24
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	fc 01       	movw	r30, r24
    3d7a:	ef 51       	subi	r30, 0x1F	; 31
    3d7c:	fa 4f       	sbci	r31, 0xFA	; 250
    3d7e:	10 81       	ld	r17, Z
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	88 2f       	mov	r24, r24
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	8f 5b       	subi	r24, 0xBF	; 191
    3d88:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8a:	0e 94 33 13 	call	0x2666	; 0x2666 <EEPROM_vRead>
    3d8e:	18 17       	cp	r17, r24
    3d90:	11 f0       	breq	.+4      	; 0x3d96 <PassWord_Check+0x12e>
			{
				PassWord_Check_Flag = 0; //if the pasword is uncorrect make this flag to zero
    3d92:	10 92 71 05 	sts	0x0571, r1
	/*___________________________________________________________________________________________________________________*/

	// Check if password is correct or not
	if (CheckLength == PassWord_Length)
	{
		for (u8 i = 0; i < PassWord_Length; i++)
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	8f 5f       	subi	r24, 0xFF	; 255
    3d9a:	89 83       	std	Y+1, r24	; 0x01
    3d9c:	90 91 dd 05 	lds	r25, 0x05DD
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	89 17       	cp	r24, r25
    3da4:	e8 f2       	brcs	.-70     	; 0x3d60 <PassWord_Check+0xf8>
    3da6:	07 c0       	rjmp	.+14     	; 0x3db6 <PassWord_Check+0x14e>
			else
			{
			}
		}
	}
	else if (CheckLength != PassWord_Length)
    3da8:	90 91 dd 05 	lds	r25, 0x05DD
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	89 17       	cp	r24, r25
    3db0:	11 f0       	breq	.+4      	; 0x3db6 <PassWord_Check+0x14e>
	{
		PassWord_Check_Flag = 0; // if CheckLength != PassWord_Length make it false with out checking
    3db2:	10 92 71 05 	sts	0x0571, r1
	}
	else
	{
	}
}
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	cf 91       	pop	r28
    3dbc:	df 91       	pop	r29
    3dbe:	1f 91       	pop	r17
    3dc0:	08 95       	ret

00003dc2 <Sign_In>:

//======================================================================================================================================//

void Sign_In(void)
{
    3dc2:	df 93       	push	r29
    3dc4:	cf 93       	push	r28
    3dc6:	cd b7       	in	r28, 0x3d	; 61
    3dc8:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		/* get username and password from user */
		UserName_Check();
    3dca:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <UserName_Check>
		PassWord_Check();
    3dce:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <PassWord_Check>
		//if any flag of them is zero that mean there is one of them is zero
		if (UserName_Check_Flag == 0 || PassWord_Check_Flag == 0)
    3dd2:	80 91 70 05 	lds	r24, 0x0570
    3dd6:	88 23       	and	r24, r24
    3dd8:	21 f0       	breq	.+8      	; 0x3de2 <Sign_In+0x20>
    3dda:	80 91 71 05 	lds	r24, 0x0571
    3dde:	88 23       	and	r24, r24
    3de0:	b9 f5       	brne	.+110    	; 0x3e50 <Sign_In+0x8e>
		{
			//if it false make tries--
			USART_u8SendStringSynch("Invalid Username or Password");
    3de2:	82 e3       	ldi	r24, 0x32	; 50
    3de4:	91 e0       	ldi	r25, 0x01	; 1
    3de6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
			USART_u8SendData(0X0D);
    3dea:	8d e0       	ldi	r24, 0x0D	; 13
    3dec:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
			Tries--;
    3df0:	80 91 6f 05 	lds	r24, 0x056F
    3df4:	81 50       	subi	r24, 0x01	; 1
    3df6:	80 93 6f 05 	sts	0x056F, r24
			EEPROM_vWrite(EEPROM_NoTries_Location, Tries);
    3dfa:	20 91 6f 05 	lds	r18, 0x056F
    3dfe:	82 e1       	ldi	r24, 0x12	; 18
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	62 2f       	mov	r22, r18
    3e04:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>

			//if there tries i can use
			if (Tries > 0)
    3e08:	80 91 6f 05 	lds	r24, 0x056F
    3e0c:	88 23       	and	r24, r24
    3e0e:	69 f0       	breq	.+26     	; 0x3e2a <Sign_In+0x68>
			{
				USART_u8SendStringSynch("Tries Left : ");
    3e10:	8f e4       	ldi	r24, 0x4F	; 79
    3e12:	91 e0       	ldi	r25, 0x01	; 1
    3e14:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(Tries + 48);
    3e18:	80 91 6f 05 	lds	r24, 0x056F
    3e1c:	80 5d       	subi	r24, 0xD0	; 208
    3e1e:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendData(0X0D);
    3e22:	8d e0       	ldi	r24, 0x0D	; 13
    3e24:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
    3e28:	d0 cf       	rjmp	.-96     	; 0x3dca <Sign_In+0x8>
			}
			// if there is no tries any more go to function time out to count few of seconds
			else if (Tries == 0)
    3e2a:	80 91 6f 05 	lds	r24, 0x056F
    3e2e:	88 23       	and	r24, r24
    3e30:	61 f6       	brne	.-104    	; 0x3dca <Sign_In+0x8>
			{
				USART_u8SendStringSynch("Tries Left : ");
    3e32:	8f e4       	ldi	r24, 0x4F	; 79
    3e34:	91 e0       	ldi	r25, 0x01	; 1
    3e36:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(Tries + 48);
    3e3a:	80 91 6f 05 	lds	r24, 0x056F
    3e3e:	80 5d       	subi	r24, 0xD0	; 208
    3e40:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendData(0X0D);
    3e44:	8d e0       	ldi	r24, 0x0D	; 13
    3e46:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				Error_TimeOut();
    3e4a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <Error_TimeOut>
    3e4e:	bd cf       	rjmp	.-134    	; 0x3dca <Sign_In+0x8>
			}
		}
		//if username and password are correct
		else
		{
			USART_u8SendStringSynch("Successfully Sign in");
    3e50:	8d e5       	ldi	r24, 0x5D	; 93
    3e52:	91 e0       	ldi	r25, 0x01	; 1
    3e54:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
			EEPROM_vWrite(EEPROM_NoTries_Location, NOTPRESSED);
    3e58:	82 e1       	ldi	r24, 0x12	; 18
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	6f ef       	ldi	r22, 0xFF	; 255
    3e5e:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
			Tries = Tries_Max;
    3e62:	83 e0       	ldi	r24, 0x03	; 3
    3e64:	80 93 6f 05 	sts	0x056F, r24
			USART_u8SendData(0X0D);
    3e68:	8d e0       	ldi	r24, 0x0D	; 13
    3e6a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
			break;
		}
	}
}
    3e6e:	cf 91       	pop	r28
    3e70:	df 91       	pop	r29
    3e72:	08 95       	ret

00003e74 <Error_TimeOut>:

//======================================================================================================================================//

//to time out error
void Error_TimeOut(void)
{
    3e74:	df 93       	push	r29
    3e76:	cf 93       	push	r28
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    3e7c:	2f 97       	sbiw	r28, 0x0f	; 15
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
	USART_u8SendStringSynch("Time out :");
    3e88:	82 e7       	ldi	r24, 0x72	; 114
    3e8a:	91 e0       	ldi	r25, 0x01	; 1
    3e8c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>

	for (u8 i = 5; i > 0; i--)
    3e90:	85 e0       	ldi	r24, 0x05	; 5
    3e92:	8f 87       	std	Y+15, r24	; 0x0f
    3e94:	7c c0       	rjmp	.+248    	; 0x3f8e <Error_TimeOut+0x11a>
	{
		USART_u8SendData(' ');
    3e96:	80 e2       	ldi	r24, 0x20	; 32
    3e98:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
		//show second left on lcd
		USART_u8SendData(i + 48);
    3e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e9e:	80 5d       	subi	r24, 0xD0	; 208
    3ea0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	aa e7       	ldi	r26, 0x7A	; 122
    3eaa:	b4 e4       	ldi	r27, 0x44	; 68
    3eac:	8b 87       	std	Y+11, r24	; 0x0b
    3eae:	9c 87       	std	Y+12, r25	; 0x0c
    3eb0:	ad 87       	std	Y+13, r26	; 0x0d
    3eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	4a ef       	ldi	r20, 0xFA	; 250
    3ec2:	54 e4       	ldi	r21, 0x44	; 68
    3ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	8f 83       	std	Y+7, r24	; 0x07
    3ece:	98 87       	std	Y+8, r25	; 0x08
    3ed0:	a9 87       	std	Y+9, r26	; 0x09
    3ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed6:	78 85       	ldd	r23, Y+8	; 0x08
    3ed8:	89 85       	ldd	r24, Y+9	; 0x09
    3eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	40 e8       	ldi	r20, 0x80	; 128
    3ee2:	5f e3       	ldi	r21, 0x3F	; 63
    3ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ee8:	88 23       	and	r24, r24
    3eea:	2c f4       	brge	.+10     	; 0x3ef6 <Error_TimeOut+0x82>
		__ticks = 1;
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	9e 83       	std	Y+6, r25	; 0x06
    3ef2:	8d 83       	std	Y+5, r24	; 0x05
    3ef4:	3f c0       	rjmp	.+126    	; 0x3f74 <Error_TimeOut+0x100>
	else if (__tmp > 65535)
    3ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ef8:	78 85       	ldd	r23, Y+8	; 0x08
    3efa:	89 85       	ldd	r24, Y+9	; 0x09
    3efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	3f ef       	ldi	r19, 0xFF	; 255
    3f02:	4f e7       	ldi	r20, 0x7F	; 127
    3f04:	57 e4       	ldi	r21, 0x47	; 71
    3f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f0a:	18 16       	cp	r1, r24
    3f0c:	4c f5       	brge	.+82     	; 0x3f60 <Error_TimeOut+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e2       	ldi	r20, 0x20	; 32
    3f1c:	51 e4       	ldi	r21, 0x41	; 65
    3f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	bc 01       	movw	r22, r24
    3f28:	cd 01       	movw	r24, r26
    3f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	9e 83       	std	Y+6, r25	; 0x06
    3f34:	8d 83       	std	Y+5, r24	; 0x05
    3f36:	0f c0       	rjmp	.+30     	; 0x3f56 <Error_TimeOut+0xe2>
    3f38:	88 ec       	ldi	r24, 0xC8	; 200
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	9c 83       	std	Y+4, r25	; 0x04
    3f3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f40:	8b 81       	ldd	r24, Y+3	; 0x03
    3f42:	9c 81       	ldd	r25, Y+4	; 0x04
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	f1 f7       	brne	.-4      	; 0x3f44 <Error_TimeOut+0xd0>
    3f48:	9c 83       	std	Y+4, r25	; 0x04
    3f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	9e 83       	std	Y+6, r25	; 0x06
    3f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f56:	8d 81       	ldd	r24, Y+5	; 0x05
    3f58:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	69 f7       	brne	.-38     	; 0x3f38 <Error_TimeOut+0xc4>
    3f5e:	14 c0       	rjmp	.+40     	; 0x3f88 <Error_TimeOut+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f60:	6f 81       	ldd	r22, Y+7	; 0x07
    3f62:	78 85       	ldd	r23, Y+8	; 0x08
    3f64:	89 85       	ldd	r24, Y+9	; 0x09
    3f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	9e 83       	std	Y+6, r25	; 0x06
    3f72:	8d 83       	std	Y+5, r24	; 0x05
    3f74:	8d 81       	ldd	r24, Y+5	; 0x05
    3f76:	9e 81       	ldd	r25, Y+6	; 0x06
    3f78:	9a 83       	std	Y+2, r25	; 0x02
    3f7a:	89 83       	std	Y+1, r24	; 0x01
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	f1 f7       	brne	.-4      	; 0x3f80 <Error_TimeOut+0x10c>
    3f84:	9a 83       	std	Y+2, r25	; 0x02
    3f86:	89 83       	std	Y+1, r24	; 0x01
//to time out error
void Error_TimeOut(void)
{
	USART_u8SendStringSynch("Time out :");

	for (u8 i = 5; i > 0; i--)
    3f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f8a:	81 50       	subi	r24, 0x01	; 1
    3f8c:	8f 87       	std	Y+15, r24	; 0x0f
    3f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f90:	88 23       	and	r24, r24
    3f92:	09 f0       	breq	.+2      	; 0x3f96 <Error_TimeOut+0x122>
    3f94:	80 cf       	rjmp	.-256    	; 0x3e96 <Error_TimeOut+0x22>
		USART_u8SendData(' ');
		//show second left on lcd
		USART_u8SendData(i + 48);
		_delay_ms(1000);
	}
	USART_u8SendData(0X0D);
    3f96:	8d e0       	ldi	r24, 0x0D	; 13
    3f98:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	//to make tries address Not pressed that mean i dosent spend any tries and make tries == max tries again
	EEPROM_vWrite(EEPROM_NoTries_Location, NOTPRESSED);
    3f9c:	82 e1       	ldi	r24, 0x12	; 18
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	6f ef       	ldi	r22, 0xFF	; 255
    3fa2:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
	Tries = Tries_Max;
    3fa6:	83 e0       	ldi	r24, 0x03	; 3
    3fa8:	80 93 6f 05 	sts	0x056F, r24
}
    3fac:	2f 96       	adiw	r28, 0x0f	; 15
    3fae:	0f b6       	in	r0, 0x3f	; 63
    3fb0:	f8 94       	cli
    3fb2:	de bf       	out	0x3e, r29	; 62
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	cd bf       	out	0x3d, r28	; 61
    3fb8:	cf 91       	pop	r28
    3fba:	df 91       	pop	r29
    3fbc:	08 95       	ret

00003fbe <main>:
void Home_vSetting();
void ISR_EXTI_Interrupt(void);


void main()
{
    3fbe:	df 93       	push	r29
    3fc0:	cf 93       	push	r28
    3fc2:	00 d0       	rcall	.+0      	; 0x3fc4 <main+0x6>
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
	//Set Pin Direction
	DIO_enumSetPortDir(DIO_PORTA, DIO_PORT_OUTPUT);
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	6f ef       	ldi	r22, 0xFF	; 255
    3fcc:	0e 94 1c 18 	call	0x3038	; 0x3038 <DIO_enumSetPortDir>
	DIO_enumSetPortDir(DIO_PORTC, DIO_PORT_OUTPUT);
    3fd0:	82 e0       	ldi	r24, 0x02	; 2
    3fd2:	6f ef       	ldi	r22, 0xFF	; 255
    3fd4:	0e 94 1c 18 	call	0x3038	; 0x3038 <DIO_enumSetPortDir>
	DIO_enumSetPortDir(DIO_PORTD, 0xFE);
    3fd8:	83 e0       	ldi	r24, 0x03	; 3
    3fda:	6e ef       	ldi	r22, 0xFE	; 254
    3fdc:	0e 94 1c 18 	call	0x3038	; 0x3038 <DIO_enumSetPortDir>
	DIO_enumSetPinDir(DIO_PORTB, DIO_PIN0, DIO_PIN_OUTPUT);
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	60 e0       	ldi	r22, 0x00	; 0
    3fe4:	41 e0       	ldi	r20, 0x01	; 1
    3fe6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_enumSetPinDir>
	DIO_enumSetPinDir(DIO_PORTB, DIO_PIN1, DIO_PIN_OUTPUT);
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	61 e0       	ldi	r22, 0x01	; 1
    3fee:	41 e0       	ldi	r20, 0x01	; 1
    3ff0:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_enumSetPinDir>
	//initialize USART to communicate with laptop with Baud Rate 9600
	USART_vInit();
    3ff4:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_vInit>
	//initialize SPI to make 2 uC communicate with each other
	SPI_vInit();
    3ff8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <SPI_vInit>
	EEPROM_vInit();
    3ffc:	0e 94 c5 1b 	call	0x378a	; 0x378a <EEPROM_vInit>
	DIO_enumSetPinDir(DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT);
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	63 e0       	ldi	r22, 0x03	; 3
    4004:	41 e0       	ldi	r20, 0x01	; 1
    4006:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_enumSetPinDir>
	TIMER0_vInit();
    400a:	0e 94 b8 08 	call	0x1170	; 0x1170 <TIMER0_vInit>
	//	DIO_enumSetPinDir(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
	//	TIMER1_vInit();
	DIO_enumSetPinDir(DIO_PORTD, DIO_PIN7, DIO_PIN_OUTPUT);
    400e:	83 e0       	ldi	r24, 0x03	; 3
    4010:	67 e0       	ldi	r22, 0x07	; 7
    4012:	41 e0       	ldi	r20, 0x01	; 1
    4014:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_enumSetPinDir>
	TIMER2_vInit();
    4018:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <TIMER2_vInit>

	GIE_vEnable();
    401c:	0e 94 55 10 	call	0x20aa	; 0x20aa <GIE_vEnable>
	EXTI_vEnableInterrupt(EXTI_LINE2);
    4020:	85 e0       	ldi	r24, 0x05	; 5
    4022:	0e 94 b6 11 	call	0x236c	; 0x236c <EXTI_vEnableInterrupt>
	EXTI_vSetSignal(EXTI_ON_CHANGE, EXTI_LINE2);
    4026:	83 e0       	ldi	r24, 0x03	; 3
    4028:	65 e0       	ldi	r22, 0x05	; 5
    402a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <EXTI_vSetSignal>
	EXTI_vSetCallBack(ISR_EXTI_Interrupt, EXTI_LINE2);
    402e:	84 ea       	ldi	r24, 0xA4	; 164
    4030:	9b e2       	ldi	r25, 0x2B	; 43
    4032:	65 e0       	ldi	r22, 0x05	; 5
    4034:	0e 94 25 12 	call	0x244a	; 0x244a <EXTI_vSetCallBack>
	DIO_enumSetPinDir(DIO_PORTB, DIO_PIN2, DIO_PIN_INPUT);
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	62 e0       	ldi	r22, 0x02	; 2
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_enumSetPinDir>

	Sign_In();
    4042:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <Sign_In>
	USART_u8SendStringSynch("Welcome ");
    4046:	8d e7       	ldi	r24, 0x7D	; 125
    4048:	91 e0       	ldi	r25, 0x01	; 1
    404a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch(UserName);
    404e:	87 ef       	ldi	r24, 0xF7	; 247
    4050:	95 e0       	ldi	r25, 0x05	; 5
    4052:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4056:	8d e0       	ldi	r24, 0x0D	; 13
    4058:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	while (1)
	{
		//Display Home Screen
		USART_u8SendStringSynch("Select Room :");
    405c:	86 e8       	ldi	r24, 0x86	; 134
    405e:	91 e0       	ldi	r25, 0x01	; 1
    4060:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendData(0X0D);//new line 
    4064:	8d e0       	ldi	r24, 0x0D	; 13
    4066:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
		USART_u8SendStringSynch("1 - Stair            ");
    406a:	84 e9       	ldi	r24, 0x94	; 148
    406c:	91 e0       	ldi	r25, 0x01	; 1
    406e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendStringSynch("2 - Reception");
    4072:	8a ea       	ldi	r24, 0xAA	; 170
    4074:	91 e0       	ldi	r25, 0x01	; 1
    4076:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendData(0X0D);//new line
    407a:	8d e0       	ldi	r24, 0x0D	; 13
    407c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
		USART_u8SendStringSynch("3 - Salon            ");
    4080:	88 eb       	ldi	r24, 0xB8	; 184
    4082:	91 e0       	ldi	r25, 0x01	; 1
    4084:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendStringSynch("4 - Bed Room");
    4088:	8e ec       	ldi	r24, 0xCE	; 206
    408a:	91 e0       	ldi	r25, 0x01	; 1
    408c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendData(0X0D);//new line
    4090:	8d e0       	ldi	r24, 0x0D	; 13
    4092:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
		USART_u8SendStringSynch("5 - Children Room 1  ");  //21
    4096:	8b ed       	ldi	r24, 0xDB	; 219
    4098:	91 e0       	ldi	r25, 0x01	; 1
    409a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendStringSynch("6 - Children Room 2");
    409e:	81 ef       	ldi	r24, 0xF1	; 241
    40a0:	91 e0       	ldi	r25, 0x01	; 1
    40a2:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendData(0X0D);//new line
    40a6:	8d e0       	ldi	r24, 0x0D	; 13
    40a8:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
		USART_u8SendStringSynch("7 - Bath Room        ");
    40ac:	85 e0       	ldi	r24, 0x05	; 5
    40ae:	92 e0       	ldi	r25, 0x02	; 2
    40b0:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendStringSynch("8 - Kitchen");
    40b4:	8b e1       	ldi	r24, 0x1B	; 27
    40b6:	92 e0       	ldi	r25, 0x02	; 2
    40b8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendData(0X0D);//new line
    40bc:	8d e0       	ldi	r24, 0x0D	; 13
    40be:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
		USART_u8SendStringSynch("9 - Corridor         ");
    40c2:	87 e2       	ldi	r24, 0x27	; 39
    40c4:	92 e0       	ldi	r25, 0x02	; 2
    40c6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendStringSynch("10- Balacon");
    40ca:	8d e3       	ldi	r24, 0x3D	; 61
    40cc:	92 e0       	ldi	r25, 0x02	; 2
    40ce:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendData(0X0D);//new line 
    40d2:	8d e0       	ldi	r24, 0x0D	; 13
    40d4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
		USART_u8SendStringSynch("11- Auto Fan Control ");
    40d8:	89 e4       	ldi	r24, 0x49	; 73
    40da:	92 e0       	ldi	r25, 0x02	; 2
    40dc:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendStringSynch("12- Setting");
    40e0:	8f e5       	ldi	r24, 0x5F	; 95
    40e2:	92 e0       	ldi	r25, 0x02	; 2
    40e4:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
		USART_u8SendData(0x0D);//new line
    40e8:	8d e0       	ldi	r24, 0x0D	; 13
    40ea:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
		do
		{
			//choose number from available choise
			KPD_PressLength = 0, PressVal = 0;
    40ee:	10 92 de 05 	sts	0x05DE, r1
    40f2:	10 92 df 05 	sts	0x05DF, r1
			while (1)
			{
				// get input from Laptop
				Error_State = USART_u8ReceiveData(&KPD_Press);
    40f6:	86 ef       	ldi	r24, 0xF6	; 246
    40f8:	95 e0       	ldi	r25, 0x05	; 5
    40fa:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    40fe:	80 93 72 05 	sts	0x0572, r24
				//if user press on any button
				if (Error_State == OK && KPD_PressLength == 0)
    4102:	80 91 72 05 	lds	r24, 0x0572
    4106:	88 23       	and	r24, r24
    4108:	b9 f5       	brne	.+110    	; 0x4178 <main+0x1ba>
    410a:	80 91 de 05 	lds	r24, 0x05DE
    410e:	88 23       	and	r24, r24
    4110:	99 f5       	brne	.+102    	; 0x4178 <main+0x1ba>
				{
					//if user press enter
					if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    4112:	80 91 f6 05 	lds	r24, 0x05F6
    4116:	8d 30       	cpi	r24, 0x0D	; 13
    4118:	21 f0       	breq	.+8      	; 0x4122 <main+0x164>
    411a:	80 91 f6 05 	lds	r24, 0x05F6
    411e:	8f 30       	cpi	r24, 0x0F	; 15
    4120:	19 f4       	brne	.+6      	; 0x4128 <main+0x16a>
					{
						Error_Time_Out = 0;
    4122:	10 92 e0 05 	sts	0x05E0, r1
    4126:	e7 cf       	rjmp	.-50     	; 0x40f6 <main+0x138>
					}
					//if user press back space
					else if (KPD_Press == 0x08)
    4128:	80 91 f6 05 	lds	r24, 0x05F6
    412c:	88 30       	cpi	r24, 0x08	; 8
    412e:	19 f4       	brne	.+6      	; 0x4136 <main+0x178>
					{
						Error_Time_Out = 0;
    4130:	10 92 e0 05 	sts	0x05E0, r1
    4134:	e0 cf       	rjmp	.-64     	; 0x40f6 <main+0x138>
					}
					else
					{
						Error_Time_Out = 0;
    4136:	10 92 e0 05 	sts	0x05E0, r1
						KPD_Press -= 48;
    413a:	80 91 f6 05 	lds	r24, 0x05F6
    413e:	80 53       	subi	r24, 0x30	; 48
    4140:	80 93 f6 05 	sts	0x05F6, r24
						PressVal = PressVal * 10 + KPD_Press;
    4144:	80 91 df 05 	lds	r24, 0x05DF
    4148:	88 2f       	mov	r24, r24
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	9c 01       	movw	r18, r24
    414e:	22 0f       	add	r18, r18
    4150:	33 1f       	adc	r19, r19
    4152:	c9 01       	movw	r24, r18
    4154:	88 0f       	add	r24, r24
    4156:	99 1f       	adc	r25, r25
    4158:	88 0f       	add	r24, r24
    415a:	99 1f       	adc	r25, r25
    415c:	82 0f       	add	r24, r18
    415e:	93 1f       	adc	r25, r19
    4160:	98 2f       	mov	r25, r24
    4162:	80 91 f6 05 	lds	r24, 0x05F6
    4166:	89 0f       	add	r24, r25
    4168:	80 93 df 05 	sts	0x05DF, r24
						KPD_PressLength++;
    416c:	80 91 de 05 	lds	r24, 0x05DE
    4170:	8f 5f       	subi	r24, 0xFF	; 255
    4172:	80 93 de 05 	sts	0x05DE, r24
    4176:	bf cf       	rjmp	.-130    	; 0x40f6 <main+0x138>
					}
				}
				else if (Error_State == OK && KPD_PressLength <= 2)
    4178:	80 91 72 05 	lds	r24, 0x0572
    417c:	88 23       	and	r24, r24
    417e:	09 f0       	breq	.+2      	; 0x4182 <main+0x1c4>
    4180:	45 c0       	rjmp	.+138    	; 0x420c <main+0x24e>
    4182:	80 91 de 05 	lds	r24, 0x05DE
    4186:	83 30       	cpi	r24, 0x03	; 3
    4188:	08 f0       	brcs	.+2      	; 0x418c <main+0x1ce>
    418a:	40 c0       	rjmp	.+128    	; 0x420c <main+0x24e>
				{
					//if user press enter
					if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    418c:	80 91 f6 05 	lds	r24, 0x05F6
    4190:	8d 30       	cpi	r24, 0x0D	; 13
    4192:	21 f0       	breq	.+8      	; 0x419c <main+0x1de>
    4194:	80 91 f6 05 	lds	r24, 0x05F6
    4198:	8f 30       	cpi	r24, 0x0F	; 15
    419a:	19 f4       	brne	.+6      	; 0x41a2 <main+0x1e4>
					{
						Error_Time_Out = 0;
    419c:	10 92 e0 05 	sts	0x05E0, r1
    41a0:	5e c0       	rjmp	.+188    	; 0x425e <main+0x2a0>
						break;
					}
					//if user press back space
					else if (KPD_Press == 0x08)
    41a2:	80 91 f6 05 	lds	r24, 0x05F6
    41a6:	88 30       	cpi	r24, 0x08	; 8
    41a8:	81 f4       	brne	.+32     	; 0x41ca <main+0x20c>
					{
						Error_Time_Out = 0;
    41aa:	10 92 e0 05 	sts	0x05E0, r1
						PressVal = PressVal / 10;
    41ae:	80 91 df 05 	lds	r24, 0x05DF
    41b2:	9a e0       	ldi	r25, 0x0A	; 10
    41b4:	69 2f       	mov	r22, r25
    41b6:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__udivmodqi4>
    41ba:	80 93 df 05 	sts	0x05DF, r24
						KPD_PressLength--;
    41be:	80 91 de 05 	lds	r24, 0x05DE
    41c2:	81 50       	subi	r24, 0x01	; 1
    41c4:	80 93 de 05 	sts	0x05DE, r24
    41c8:	96 cf       	rjmp	.-212    	; 0x40f6 <main+0x138>
					}
					//if user enter valid data
					else
					{
						Error_Time_Out = 0;
    41ca:	10 92 e0 05 	sts	0x05E0, r1
						KPD_Press -= 48;
    41ce:	80 91 f6 05 	lds	r24, 0x05F6
    41d2:	80 53       	subi	r24, 0x30	; 48
    41d4:	80 93 f6 05 	sts	0x05F6, r24
						PressVal = PressVal * 10 + KPD_Press;
    41d8:	80 91 df 05 	lds	r24, 0x05DF
    41dc:	88 2f       	mov	r24, r24
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	9c 01       	movw	r18, r24
    41e2:	22 0f       	add	r18, r18
    41e4:	33 1f       	adc	r19, r19
    41e6:	c9 01       	movw	r24, r18
    41e8:	88 0f       	add	r24, r24
    41ea:	99 1f       	adc	r25, r25
    41ec:	88 0f       	add	r24, r24
    41ee:	99 1f       	adc	r25, r25
    41f0:	82 0f       	add	r24, r18
    41f2:	93 1f       	adc	r25, r19
    41f4:	98 2f       	mov	r25, r24
    41f6:	80 91 f6 05 	lds	r24, 0x05F6
    41fa:	89 0f       	add	r24, r25
    41fc:	80 93 df 05 	sts	0x05DF, r24
						KPD_PressLength++;
    4200:	80 91 de 05 	lds	r24, 0x05DE
    4204:	8f 5f       	subi	r24, 0xFF	; 255
    4206:	80 93 de 05 	sts	0x05DE, r24
    420a:	75 cf       	rjmp	.-278    	; 0x40f6 <main+0x138>
					}
				}
				else if (Error_State == OK && KPD_PressLength > 2)
    420c:	80 91 72 05 	lds	r24, 0x0572
    4210:	88 23       	and	r24, r24
    4212:	09 f0       	breq	.+2      	; 0x4216 <main+0x258>
    4214:	70 cf       	rjmp	.-288    	; 0x40f6 <main+0x138>
    4216:	80 91 de 05 	lds	r24, 0x05DE
    421a:	83 30       	cpi	r24, 0x03	; 3
    421c:	08 f4       	brcc	.+2      	; 0x4220 <main+0x262>
    421e:	6b cf       	rjmp	.-298    	; 0x40f6 <main+0x138>
				{
					//if user press enter
					if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    4220:	80 91 f6 05 	lds	r24, 0x05F6
    4224:	8d 30       	cpi	r24, 0x0D	; 13
    4226:	21 f0       	breq	.+8      	; 0x4230 <main+0x272>
    4228:	80 91 f6 05 	lds	r24, 0x05F6
    422c:	8f 30       	cpi	r24, 0x0F	; 15
    422e:	19 f4       	brne	.+6      	; 0x4236 <main+0x278>
					{
						Error_Time_Out = 0;
    4230:	10 92 e0 05 	sts	0x05E0, r1
    4234:	14 c0       	rjmp	.+40     	; 0x425e <main+0x2a0>
						break;
					}
					//if user press back space
					else if (KPD_Press == 0x08)
    4236:	80 91 f6 05 	lds	r24, 0x05F6
    423a:	88 30       	cpi	r24, 0x08	; 8
    423c:	41 f4       	brne	.+16     	; 0x424e <main+0x290>
					{
						Error_Time_Out = 0;
    423e:	10 92 e0 05 	sts	0x05E0, r1
						KPD_PressLength--;
    4242:	80 91 de 05 	lds	r24, 0x05DE
    4246:	81 50       	subi	r24, 0x01	; 1
    4248:	80 93 de 05 	sts	0x05DE, r24
    424c:	54 cf       	rjmp	.-344    	; 0x40f6 <main+0x138>
					}
					//if user enter valid data
					else
					{
						Error_Time_Out = 0;
    424e:	10 92 e0 05 	sts	0x05E0, r1
						KPD_PressLength++;
    4252:	80 91 de 05 	lds	r24, 0x05DE
    4256:	8f 5f       	subi	r24, 0xFF	; 255
    4258:	80 93 de 05 	sts	0x05DE, r24
    425c:	4c cf       	rjmp	.-360    	; 0x40f6 <main+0x138>
				else
				{

				}
			}
			if (PressVal > 12)
    425e:	80 91 df 05 	lds	r24, 0x05DF
    4262:	8d 30       	cpi	r24, 0x0D	; 13
    4264:	38 f0       	brcs	.+14     	; 0x4274 <main+0x2b6>
			{
				USART_u8SendStringSynch("Invalid Choise");
    4266:	8b e6       	ldi	r24, 0x6B	; 107
    4268:	92 e0       	ldi	r25, 0x02	; 2
    426a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    426e:	8d e0       	ldi	r24, 0x0D	; 13
    4270:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
			}
		} while (PressVal > 12);
    4274:	80 91 df 05 	lds	r24, 0x05DF
    4278:	8d 30       	cpi	r24, 0x0D	; 13
    427a:	08 f0       	brcs	.+2      	; 0x427e <main+0x2c0>
    427c:	38 cf       	rjmp	.-400    	; 0x40ee <main+0x130>

		switch (PressVal)
    427e:	80 91 df 05 	lds	r24, 0x05DF
    4282:	28 2f       	mov	r18, r24
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	3a 83       	std	Y+2, r19	; 0x02
    4288:	29 83       	std	Y+1, r18	; 0x01
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	9a 81       	ldd	r25, Y+2	; 0x02
    428e:	86 30       	cpi	r24, 0x06	; 6
    4290:	91 05       	cpc	r25, r1
    4292:	09 f4       	brne	.+2      	; 0x4296 <main+0x2d8>
    4294:	5a c0       	rjmp	.+180    	; 0x434a <main+0x38c>
    4296:	29 81       	ldd	r18, Y+1	; 0x01
    4298:	3a 81       	ldd	r19, Y+2	; 0x02
    429a:	27 30       	cpi	r18, 0x07	; 7
    429c:	31 05       	cpc	r19, r1
    429e:	0c f5       	brge	.+66     	; 0x42e2 <main+0x324>
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	9a 81       	ldd	r25, Y+2	; 0x02
    42a4:	83 30       	cpi	r24, 0x03	; 3
    42a6:	91 05       	cpc	r25, r1
    42a8:	09 f4       	brne	.+2      	; 0x42ac <main+0x2ee>
    42aa:	46 c0       	rjmp	.+140    	; 0x4338 <main+0x37a>
    42ac:	29 81       	ldd	r18, Y+1	; 0x01
    42ae:	3a 81       	ldd	r19, Y+2	; 0x02
    42b0:	24 30       	cpi	r18, 0x04	; 4
    42b2:	31 05       	cpc	r19, r1
    42b4:	5c f4       	brge	.+22     	; 0x42cc <main+0x30e>
    42b6:	89 81       	ldd	r24, Y+1	; 0x01
    42b8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ba:	81 30       	cpi	r24, 0x01	; 1
    42bc:	91 05       	cpc	r25, r1
    42be:	b1 f1       	breq	.+108    	; 0x432c <main+0x36e>
    42c0:	29 81       	ldd	r18, Y+1	; 0x01
    42c2:	3a 81       	ldd	r19, Y+2	; 0x02
    42c4:	22 30       	cpi	r18, 0x02	; 2
    42c6:	31 05       	cpc	r19, r1
    42c8:	a1 f1       	breq	.+104    	; 0x4332 <main+0x374>
    42ca:	c8 ce       	rjmp	.-624    	; 0x405c <main+0x9e>
    42cc:	89 81       	ldd	r24, Y+1	; 0x01
    42ce:	9a 81       	ldd	r25, Y+2	; 0x02
    42d0:	84 30       	cpi	r24, 0x04	; 4
    42d2:	91 05       	cpc	r25, r1
    42d4:	a1 f1       	breq	.+104    	; 0x433e <main+0x380>
    42d6:	29 81       	ldd	r18, Y+1	; 0x01
    42d8:	3a 81       	ldd	r19, Y+2	; 0x02
    42da:	25 30       	cpi	r18, 0x05	; 5
    42dc:	31 05       	cpc	r19, r1
    42de:	91 f1       	breq	.+100    	; 0x4344 <main+0x386>
    42e0:	bd ce       	rjmp	.-646    	; 0x405c <main+0x9e>
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	9a 81       	ldd	r25, Y+2	; 0x02
    42e6:	89 30       	cpi	r24, 0x09	; 9
    42e8:	91 05       	cpc	r25, r1
    42ea:	c1 f1       	breq	.+112    	; 0x435c <main+0x39e>
    42ec:	29 81       	ldd	r18, Y+1	; 0x01
    42ee:	3a 81       	ldd	r19, Y+2	; 0x02
    42f0:	2a 30       	cpi	r18, 0x0A	; 10
    42f2:	31 05       	cpc	r19, r1
    42f4:	5c f4       	brge	.+22     	; 0x430c <main+0x34e>
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	9a 81       	ldd	r25, Y+2	; 0x02
    42fa:	87 30       	cpi	r24, 0x07	; 7
    42fc:	91 05       	cpc	r25, r1
    42fe:	41 f1       	breq	.+80     	; 0x4350 <main+0x392>
    4300:	29 81       	ldd	r18, Y+1	; 0x01
    4302:	3a 81       	ldd	r19, Y+2	; 0x02
    4304:	28 30       	cpi	r18, 0x08	; 8
    4306:	31 05       	cpc	r19, r1
    4308:	31 f1       	breq	.+76     	; 0x4356 <main+0x398>
    430a:	a8 ce       	rjmp	.-688    	; 0x405c <main+0x9e>
    430c:	89 81       	ldd	r24, Y+1	; 0x01
    430e:	9a 81       	ldd	r25, Y+2	; 0x02
    4310:	8b 30       	cpi	r24, 0x0B	; 11
    4312:	91 05       	cpc	r25, r1
    4314:	49 f1       	breq	.+82     	; 0x4368 <main+0x3aa>
    4316:	29 81       	ldd	r18, Y+1	; 0x01
    4318:	3a 81       	ldd	r19, Y+2	; 0x02
    431a:	2b 30       	cpi	r18, 0x0B	; 11
    431c:	31 05       	cpc	r19, r1
    431e:	0c f1       	brlt	.+66     	; 0x4362 <main+0x3a4>
    4320:	89 81       	ldd	r24, Y+1	; 0x01
    4322:	9a 81       	ldd	r25, Y+2	; 0x02
    4324:	8c 30       	cpi	r24, 0x0C	; 12
    4326:	91 05       	cpc	r25, r1
    4328:	11 f1       	breq	.+68     	; 0x436e <main+0x3b0>
    432a:	98 ce       	rjmp	.-720    	; 0x405c <main+0x9e>
		{
		case 1 :
			Home_vStair();
    432c:	0e 94 ba 21 	call	0x4374	; 0x4374 <Home_vStair>
    4330:	95 ce       	rjmp	.-726    	; 0x405c <main+0x9e>
			break;
		case 2 :
			Home_vReception();
    4332:	0e 94 45 23 	call	0x468a	; 0x468a <Home_vReception>
    4336:	92 ce       	rjmp	.-732    	; 0x405c <main+0x9e>
			break;
		case 3 :
			Home_vSalon();
    4338:	0e 94 c6 23 	call	0x478c	; 0x478c <Home_vSalon>
    433c:	8f ce       	rjmp	.-738    	; 0x405c <main+0x9e>
			break;
		case 4 :
			Home_vBed_Room();
    433e:	0e 94 89 25 	call	0x4b12	; 0x4b12 <Home_vBed_Room>
    4342:	8c ce       	rjmp	.-744    	; 0x405c <main+0x9e>
			break;
		case 5 :
			Home_vChildren_Room_1();
    4344:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <Home_vChildren_Room_1>
    4348:	89 ce       	rjmp	.-750    	; 0x405c <main+0x9e>
			break;
		case 6 :
			Home_vChildren_Room_2();
    434a:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <Home_vChildren_Room_2>
    434e:	86 ce       	rjmp	.-756    	; 0x405c <main+0x9e>
			break;
		case 7 :
			Home_vBath_Room();
    4350:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <Home_vBath_Room>
    4354:	83 ce       	rjmp	.-762    	; 0x405c <main+0x9e>
			break;
		case 8 :
			Home_vKitchen();
    4356:	0e 94 3e 28 	call	0x507c	; 0x507c <Home_vKitchen>
    435a:	80 ce       	rjmp	.-768    	; 0x405c <main+0x9e>
			break;
		case 9 :
			Home_vCorridor();
    435c:	0e 94 b1 28 	call	0x5162	; 0x5162 <Home_vCorridor>
    4360:	7d ce       	rjmp	.-774    	; 0x405c <main+0x9e>
			break;
		case 10 :
			Home_vBalacon();
    4362:	0e 94 08 29 	call	0x5210	; 0x5210 <Home_vBalacon>
    4366:	7a ce       	rjmp	.-780    	; 0x405c <main+0x9e>
			break;
		case 11:
			Auto_Fan_Control();
    4368:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <Auto_Fan_Control>
    436c:	77 ce       	rjmp	.-786    	; 0x405c <main+0x9e>
			break;
		case 12:
			Home_vSetting();
    436e:	0e 94 cb 2a 	call	0x5596	; 0x5596 <Home_vSetting>
    4372:	74 ce       	rjmp	.-792    	; 0x405c <main+0x9e>

00004374 <Home_vStair>:
	}
}

//======================================================================================================================================//
void Home_vStair()
{
    4374:	df 93       	push	r29
    4376:	cf 93       	push	r28
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
    437c:	6e 97       	sbiw	r28, 0x1e	; 30
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
	//Show stair Choises
	USART_u8SendStringSynch("Stair Options : ");
    4388:	8a e7       	ldi	r24, 0x7A	; 122
    438a:	92 e0       	ldi	r25, 0x02	; 2
    438c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);//new line
    4390:	8d e0       	ldi	r24, 0x0D	; 13
    4392:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("1- Reception Door    ");
    4396:	8b e8       	ldi	r24, 0x8B	; 139
    4398:	92 e0       	ldi	r25, 0x02	; 2
    439a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Salon Door");
    439e:	81 ea       	ldi	r24, 0xA1	; 161
    43a0:	92 e0       	ldi	r25, 0x02	; 2
    43a2:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);//new line
    43a6:	8d e0       	ldi	r24, 0x0D	; 13
    43a8:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Open Doors        ");
    43ac:	8f ea       	ldi	r24, 0xAF	; 175
    43ae:	92 e0       	ldi	r25, 0x02	; 2
    43b0:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("4- Close Doors");
    43b4:	85 ec       	ldi	r24, 0xC5	; 197
    43b6:	92 e0       	ldi	r25, 0x02	; 2
    43b8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);//new line
    43bc:	8d e0       	ldi	r24, 0x0D	; 13
    43be:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("5- Led ON/OFF");
    43c2:	84 ed       	ldi	r24, 0xD4	; 212
    43c4:	92 e0       	ldi	r25, 0x02	; 2
    43c6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);//new line
    43ca:	8d e0       	ldi	r24, 0x0D	; 13
    43cc:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    43d0:	86 ef       	ldi	r24, 0xF6	; 246
    43d2:	95 e0       	ldi	r25, 0x05	; 5
    43d4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    43d8:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    43dc:	80 91 72 05 	lds	r24, 0x0572
    43e0:	88 23       	and	r24, r24
    43e2:	09 f0       	breq	.+2      	; 0x43e6 <Home_vStair+0x72>
    43e4:	44 c1       	rjmp	.+648    	; 0x466e <Home_vStair+0x2fa>
		{
			switch (KPD_Press)
    43e6:	80 91 f6 05 	lds	r24, 0x05F6
    43ea:	28 2f       	mov	r18, r24
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	3e 8f       	std	Y+30, r19	; 0x1e
    43f0:	2d 8f       	std	Y+29, r18	; 0x1d
    43f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43f6:	83 33       	cpi	r24, 0x33	; 51
    43f8:	91 05       	cpc	r25, r1
    43fa:	79 f1       	breq	.+94     	; 0x445a <Home_vStair+0xe6>
    43fc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    43fe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4400:	24 33       	cpi	r18, 0x34	; 52
    4402:	31 05       	cpc	r19, r1
    4404:	8c f4       	brge	.+34     	; 0x4428 <Home_vStair+0xb4>
    4406:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4408:	9e 8d       	ldd	r25, Y+30	; 0x1e
    440a:	81 33       	cpi	r24, 0x31	; 49
    440c:	91 05       	cpc	r25, r1
    440e:	c9 f0       	breq	.+50     	; 0x4442 <Home_vStair+0xce>
    4410:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4412:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4414:	22 33       	cpi	r18, 0x32	; 50
    4416:	31 05       	cpc	r19, r1
    4418:	d4 f4       	brge	.+52     	; 0x444e <Home_vStair+0xda>
    441a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    441c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    441e:	88 30       	cpi	r24, 0x08	; 8
    4420:	91 05       	cpc	r25, r1
    4422:	09 f4       	brne	.+2      	; 0x4426 <Home_vStair+0xb2>
    4424:	21 c1       	rjmp	.+578    	; 0x4668 <Home_vStair+0x2f4>
    4426:	23 c1       	rjmp	.+582    	; 0x466e <Home_vStair+0x2fa>
    4428:	2d 8d       	ldd	r18, Y+29	; 0x1d
    442a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    442c:	24 33       	cpi	r18, 0x34	; 52
    442e:	31 05       	cpc	r19, r1
    4430:	09 f4       	brne	.+2      	; 0x4434 <Home_vStair+0xc0>
    4432:	92 c0       	rjmp	.+292    	; 0x4558 <Home_vStair+0x1e4>
    4434:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4436:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4438:	85 33       	cpi	r24, 0x35	; 53
    443a:	91 05       	cpc	r25, r1
    443c:	09 f4       	brne	.+2      	; 0x4440 <Home_vStair+0xcc>
    443e:	0b c1       	rjmp	.+534    	; 0x4656 <Home_vStair+0x2e2>
    4440:	16 c1       	rjmp	.+556    	; 0x466e <Home_vStair+0x2fa>
			{
			case '1':
				USART_u8SendData(0X0D);
    4442:	8d e0       	ldi	r24, 0x0D	; 13
    4444:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				Reception_Door();
    4448:	0e 94 8c 29 	call	0x5318	; 0x5318 <Reception_Door>
    444c:	10 c1       	rjmp	.+544    	; 0x466e <Home_vStair+0x2fa>
				break;
			case '2':
				USART_u8SendData(0X0D);
    444e:	8d e0       	ldi	r24, 0x0D	; 13
    4450:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				Salon_Door();
    4454:	0e 94 03 2a 	call	0x5406	; 0x5406 <Salon_Door>
    4458:	0a c1       	rjmp	.+532    	; 0x466e <Home_vStair+0x2fa>
				break;
			case '3' :
				SPI_u8Tranceive(0x01, &SPI_Recieve);
    445a:	2b e0       	ldi	r18, 0x0B	; 11
    445c:	36 e0       	ldi	r19, 0x06	; 6
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	b9 01       	movw	r22, r18
    4462:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	a8 e4       	ldi	r26, 0x48	; 72
    446c:	b2 e4       	ldi	r27, 0x42	; 66
    446e:	89 8f       	std	Y+25, r24	; 0x19
    4470:	9a 8f       	std	Y+26, r25	; 0x1a
    4472:	ab 8f       	std	Y+27, r26	; 0x1b
    4474:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4476:	69 8d       	ldd	r22, Y+25	; 0x19
    4478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    447a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    447c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	4a ef       	ldi	r20, 0xFA	; 250
    4484:	54 e4       	ldi	r21, 0x44	; 68
    4486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	8d 8b       	std	Y+21, r24	; 0x15
    4490:	9e 8b       	std	Y+22, r25	; 0x16
    4492:	af 8b       	std	Y+23, r26	; 0x17
    4494:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4496:	6d 89       	ldd	r22, Y+21	; 0x15
    4498:	7e 89       	ldd	r23, Y+22	; 0x16
    449a:	8f 89       	ldd	r24, Y+23	; 0x17
    449c:	98 8d       	ldd	r25, Y+24	; 0x18
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	40 e8       	ldi	r20, 0x80	; 128
    44a4:	5f e3       	ldi	r21, 0x3F	; 63
    44a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44aa:	88 23       	and	r24, r24
    44ac:	2c f4       	brge	.+10     	; 0x44b8 <Home_vStair+0x144>
		__ticks = 1;
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	9c 8b       	std	Y+20, r25	; 0x14
    44b4:	8b 8b       	std	Y+19, r24	; 0x13
    44b6:	3f c0       	rjmp	.+126    	; 0x4536 <Home_vStair+0x1c2>
	else if (__tmp > 65535)
    44b8:	6d 89       	ldd	r22, Y+21	; 0x15
    44ba:	7e 89       	ldd	r23, Y+22	; 0x16
    44bc:	8f 89       	ldd	r24, Y+23	; 0x17
    44be:	98 8d       	ldd	r25, Y+24	; 0x18
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	3f ef       	ldi	r19, 0xFF	; 255
    44c4:	4f e7       	ldi	r20, 0x7F	; 127
    44c6:	57 e4       	ldi	r21, 0x47	; 71
    44c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44cc:	18 16       	cp	r1, r24
    44ce:	4c f5       	brge	.+82     	; 0x4522 <Home_vStair+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44d0:	69 8d       	ldd	r22, Y+25	; 0x19
    44d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	40 e2       	ldi	r20, 0x20	; 32
    44de:	51 e4       	ldi	r21, 0x41	; 65
    44e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44e4:	dc 01       	movw	r26, r24
    44e6:	cb 01       	movw	r24, r22
    44e8:	bc 01       	movw	r22, r24
    44ea:	cd 01       	movw	r24, r26
    44ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	9c 8b       	std	Y+20, r25	; 0x14
    44f6:	8b 8b       	std	Y+19, r24	; 0x13
    44f8:	0f c0       	rjmp	.+30     	; 0x4518 <Home_vStair+0x1a4>
    44fa:	88 ec       	ldi	r24, 0xC8	; 200
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	9a 8b       	std	Y+18, r25	; 0x12
    4500:	89 8b       	std	Y+17, r24	; 0x11
    4502:	89 89       	ldd	r24, Y+17	; 0x11
    4504:	9a 89       	ldd	r25, Y+18	; 0x12
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	f1 f7       	brne	.-4      	; 0x4506 <Home_vStair+0x192>
    450a:	9a 8b       	std	Y+18, r25	; 0x12
    450c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    450e:	8b 89       	ldd	r24, Y+19	; 0x13
    4510:	9c 89       	ldd	r25, Y+20	; 0x14
    4512:	01 97       	sbiw	r24, 0x01	; 1
    4514:	9c 8b       	std	Y+20, r25	; 0x14
    4516:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4518:	8b 89       	ldd	r24, Y+19	; 0x13
    451a:	9c 89       	ldd	r25, Y+20	; 0x14
    451c:	00 97       	sbiw	r24, 0x00	; 0
    451e:	69 f7       	brne	.-38     	; 0x44fa <Home_vStair+0x186>
    4520:	14 c0       	rjmp	.+40     	; 0x454a <Home_vStair+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4522:	6d 89       	ldd	r22, Y+21	; 0x15
    4524:	7e 89       	ldd	r23, Y+22	; 0x16
    4526:	8f 89       	ldd	r24, Y+23	; 0x17
    4528:	98 8d       	ldd	r25, Y+24	; 0x18
    452a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	9c 8b       	std	Y+20, r25	; 0x14
    4534:	8b 8b       	std	Y+19, r24	; 0x13
    4536:	8b 89       	ldd	r24, Y+19	; 0x13
    4538:	9c 89       	ldd	r25, Y+20	; 0x14
    453a:	98 8b       	std	Y+16, r25	; 0x10
    453c:	8f 87       	std	Y+15, r24	; 0x0f
    453e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4540:	98 89       	ldd	r25, Y+16	; 0x10
    4542:	01 97       	sbiw	r24, 0x01	; 1
    4544:	f1 f7       	brne	.-4      	; 0x4542 <Home_vStair+0x1ce>
    4546:	98 8b       	std	Y+16, r25	; 0x10
    4548:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				SPI_u8Tranceive(0x03, &SPI_Recieve);
    454a:	2b e0       	ldi	r18, 0x0B	; 11
    454c:	36 e0       	ldi	r19, 0x06	; 6
    454e:	83 e0       	ldi	r24, 0x03	; 3
    4550:	b9 01       	movw	r22, r18
    4552:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4556:	8b c0       	rjmp	.+278    	; 0x466e <Home_vStair+0x2fa>
				break;
			case '4' :
				SPI_u8Tranceive(0x02, &SPI_Recieve);
    4558:	2b e0       	ldi	r18, 0x0B	; 11
    455a:	36 e0       	ldi	r19, 0x06	; 6
    455c:	82 e0       	ldi	r24, 0x02	; 2
    455e:	b9 01       	movw	r22, r18
    4560:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4564:	80 e0       	ldi	r24, 0x00	; 0
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	a8 e4       	ldi	r26, 0x48	; 72
    456a:	b2 e4       	ldi	r27, 0x42	; 66
    456c:	8b 87       	std	Y+11, r24	; 0x0b
    456e:	9c 87       	std	Y+12, r25	; 0x0c
    4570:	ad 87       	std	Y+13, r26	; 0x0d
    4572:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4574:	6b 85       	ldd	r22, Y+11	; 0x0b
    4576:	7c 85       	ldd	r23, Y+12	; 0x0c
    4578:	8d 85       	ldd	r24, Y+13	; 0x0d
    457a:	9e 85       	ldd	r25, Y+14	; 0x0e
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	4a ef       	ldi	r20, 0xFA	; 250
    4582:	54 e4       	ldi	r21, 0x44	; 68
    4584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	8f 83       	std	Y+7, r24	; 0x07
    458e:	98 87       	std	Y+8, r25	; 0x08
    4590:	a9 87       	std	Y+9, r26	; 0x09
    4592:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4594:	6f 81       	ldd	r22, Y+7	; 0x07
    4596:	78 85       	ldd	r23, Y+8	; 0x08
    4598:	89 85       	ldd	r24, Y+9	; 0x09
    459a:	9a 85       	ldd	r25, Y+10	; 0x0a
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	40 e8       	ldi	r20, 0x80	; 128
    45a2:	5f e3       	ldi	r21, 0x3F	; 63
    45a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45a8:	88 23       	and	r24, r24
    45aa:	2c f4       	brge	.+10     	; 0x45b6 <Home_vStair+0x242>
		__ticks = 1;
    45ac:	81 e0       	ldi	r24, 0x01	; 1
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	9e 83       	std	Y+6, r25	; 0x06
    45b2:	8d 83       	std	Y+5, r24	; 0x05
    45b4:	3f c0       	rjmp	.+126    	; 0x4634 <Home_vStair+0x2c0>
	else if (__tmp > 65535)
    45b6:	6f 81       	ldd	r22, Y+7	; 0x07
    45b8:	78 85       	ldd	r23, Y+8	; 0x08
    45ba:	89 85       	ldd	r24, Y+9	; 0x09
    45bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	3f ef       	ldi	r19, 0xFF	; 255
    45c2:	4f e7       	ldi	r20, 0x7F	; 127
    45c4:	57 e4       	ldi	r21, 0x47	; 71
    45c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45ca:	18 16       	cp	r1, r24
    45cc:	4c f5       	brge	.+82     	; 0x4620 <Home_vStair+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    45d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    45d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    45d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d6:	20 e0       	ldi	r18, 0x00	; 0
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	40 e2       	ldi	r20, 0x20	; 32
    45dc:	51 e4       	ldi	r21, 0x41	; 65
    45de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e2:	dc 01       	movw	r26, r24
    45e4:	cb 01       	movw	r24, r22
    45e6:	bc 01       	movw	r22, r24
    45e8:	cd 01       	movw	r24, r26
    45ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	9e 83       	std	Y+6, r25	; 0x06
    45f4:	8d 83       	std	Y+5, r24	; 0x05
    45f6:	0f c0       	rjmp	.+30     	; 0x4616 <Home_vStair+0x2a2>
    45f8:	88 ec       	ldi	r24, 0xC8	; 200
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	9c 83       	std	Y+4, r25	; 0x04
    45fe:	8b 83       	std	Y+3, r24	; 0x03
    4600:	8b 81       	ldd	r24, Y+3	; 0x03
    4602:	9c 81       	ldd	r25, Y+4	; 0x04
    4604:	01 97       	sbiw	r24, 0x01	; 1
    4606:	f1 f7       	brne	.-4      	; 0x4604 <Home_vStair+0x290>
    4608:	9c 83       	std	Y+4, r25	; 0x04
    460a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    460c:	8d 81       	ldd	r24, Y+5	; 0x05
    460e:	9e 81       	ldd	r25, Y+6	; 0x06
    4610:	01 97       	sbiw	r24, 0x01	; 1
    4612:	9e 83       	std	Y+6, r25	; 0x06
    4614:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4616:	8d 81       	ldd	r24, Y+5	; 0x05
    4618:	9e 81       	ldd	r25, Y+6	; 0x06
    461a:	00 97       	sbiw	r24, 0x00	; 0
    461c:	69 f7       	brne	.-38     	; 0x45f8 <Home_vStair+0x284>
    461e:	14 c0       	rjmp	.+40     	; 0x4648 <Home_vStair+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4620:	6f 81       	ldd	r22, Y+7	; 0x07
    4622:	78 85       	ldd	r23, Y+8	; 0x08
    4624:	89 85       	ldd	r24, Y+9	; 0x09
    4626:	9a 85       	ldd	r25, Y+10	; 0x0a
    4628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	9e 83       	std	Y+6, r25	; 0x06
    4632:	8d 83       	std	Y+5, r24	; 0x05
    4634:	8d 81       	ldd	r24, Y+5	; 0x05
    4636:	9e 81       	ldd	r25, Y+6	; 0x06
    4638:	9a 83       	std	Y+2, r25	; 0x02
    463a:	89 83       	std	Y+1, r24	; 0x01
    463c:	89 81       	ldd	r24, Y+1	; 0x01
    463e:	9a 81       	ldd	r25, Y+2	; 0x02
    4640:	01 97       	sbiw	r24, 0x01	; 1
    4642:	f1 f7       	brne	.-4      	; 0x4640 <Home_vStair+0x2cc>
    4644:	9a 83       	std	Y+2, r25	; 0x02
    4646:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				SPI_u8Tranceive(0x04, &SPI_Recieve);
    4648:	2b e0       	ldi	r18, 0x0B	; 11
    464a:	36 e0       	ldi	r19, 0x06	; 6
    464c:	84 e0       	ldi	r24, 0x04	; 4
    464e:	b9 01       	movw	r22, r18
    4650:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4654:	0c c0       	rjmp	.+24     	; 0x466e <Home_vStair+0x2fa>
				break;
			case '5':
				LED_vTog(uCStairLed);
    4656:	60 91 8a 05 	lds	r22, 0x058A
    465a:	70 91 8b 05 	lds	r23, 0x058B
    465e:	80 91 8c 05 	lds	r24, 0x058C
    4662:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4666:	03 c0       	rjmp	.+6      	; 0x466e <Home_vStair+0x2fa>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4668:	8d e0       	ldi	r24, 0x0D	; 13
    466a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    466e:	80 91 f6 05 	lds	r24, 0x05F6
    4672:	8d 30       	cpi	r24, 0x0D	; 13
    4674:	09 f0       	breq	.+2      	; 0x4678 <Home_vStair+0x304>
    4676:	ac ce       	rjmp	.-680    	; 0x43d0 <Home_vStair+0x5c>
}
    4678:	6e 96       	adiw	r28, 0x1e	; 30
    467a:	0f b6       	in	r0, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	cf 91       	pop	r28
    4686:	df 91       	pop	r29
    4688:	08 95       	ret

0000468a <Home_vReception>:

//======================================================================================================================================//
void Home_vReception()
{
    468a:	df 93       	push	r29
    468c:	cf 93       	push	r28
    468e:	00 d0       	rcall	.+0      	; 0x4690 <Home_vReception+0x6>
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Reception Options : ");
    4694:	82 ee       	ldi	r24, 0xE2	; 226
    4696:	92 e0       	ldi	r25, 0x02	; 2
    4698:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    469c:	8d e0       	ldi	r24, 0x0D	; 13
    469e:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    46a2:	87 ef       	ldi	r24, 0xF7	; 247
    46a4:	92 e0       	ldi	r25, 0x02	; 2
    46a6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Led2 ON/OFF");
    46aa:	8d e0       	ldi	r24, 0x0D	; 13
    46ac:	93 e0       	ldi	r25, 0x03	; 3
    46ae:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    46b2:	8d e0       	ldi	r24, 0x0D	; 13
    46b4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Led3 ON/OFF       ");
    46b8:	8c e1       	ldi	r24, 0x1C	; 28
    46ba:	93 e0       	ldi	r25, 0x03	; 3
    46bc:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("4- Rec Fan");
    46c0:	82 e3       	ldi	r24, 0x32	; 50
    46c2:	93 e0       	ldi	r25, 0x03	; 3
    46c4:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    46c8:	8d e0       	ldi	r24, 0x0D	; 13
    46ca:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    46ce:	86 ef       	ldi	r24, 0xF6	; 246
    46d0:	95 e0       	ldi	r25, 0x05	; 5
    46d2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    46d6:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    46da:	80 91 72 05 	lds	r24, 0x0572
    46de:	88 23       	and	r24, r24
    46e0:	09 f0       	breq	.+2      	; 0x46e4 <Home_vReception+0x5a>
    46e2:	4a c0       	rjmp	.+148    	; 0x4778 <Home_vReception+0xee>
		{
			switch (KPD_Press)
    46e4:	80 91 f6 05 	lds	r24, 0x05F6
    46e8:	28 2f       	mov	r18, r24
    46ea:	30 e0       	ldi	r19, 0x00	; 0
    46ec:	3a 83       	std	Y+2, r19	; 0x02
    46ee:	29 83       	std	Y+1, r18	; 0x01
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
    46f2:	9a 81       	ldd	r25, Y+2	; 0x02
    46f4:	82 33       	cpi	r24, 0x32	; 50
    46f6:	91 05       	cpc	r25, r1
    46f8:	21 f1       	breq	.+72     	; 0x4742 <Home_vReception+0xb8>
    46fa:	29 81       	ldd	r18, Y+1	; 0x01
    46fc:	3a 81       	ldd	r19, Y+2	; 0x02
    46fe:	23 33       	cpi	r18, 0x33	; 51
    4700:	31 05       	cpc	r19, r1
    4702:	5c f4       	brge	.+22     	; 0x471a <Home_vReception+0x90>
    4704:	89 81       	ldd	r24, Y+1	; 0x01
    4706:	9a 81       	ldd	r25, Y+2	; 0x02
    4708:	88 30       	cpi	r24, 0x08	; 8
    470a:	91 05       	cpc	r25, r1
    470c:	91 f1       	breq	.+100    	; 0x4772 <Home_vReception+0xe8>
    470e:	29 81       	ldd	r18, Y+1	; 0x01
    4710:	3a 81       	ldd	r19, Y+2	; 0x02
    4712:	21 33       	cpi	r18, 0x31	; 49
    4714:	31 05       	cpc	r19, r1
    4716:	61 f0       	breq	.+24     	; 0x4730 <Home_vReception+0xa6>
    4718:	2f c0       	rjmp	.+94     	; 0x4778 <Home_vReception+0xee>
    471a:	89 81       	ldd	r24, Y+1	; 0x01
    471c:	9a 81       	ldd	r25, Y+2	; 0x02
    471e:	83 33       	cpi	r24, 0x33	; 51
    4720:	91 05       	cpc	r25, r1
    4722:	c1 f0       	breq	.+48     	; 0x4754 <Home_vReception+0xca>
    4724:	29 81       	ldd	r18, Y+1	; 0x01
    4726:	3a 81       	ldd	r19, Y+2	; 0x02
    4728:	24 33       	cpi	r18, 0x34	; 52
    472a:	31 05       	cpc	r19, r1
    472c:	e1 f0       	breq	.+56     	; 0x4766 <Home_vReception+0xdc>
    472e:	24 c0       	rjmp	.+72     	; 0x4778 <Home_vReception+0xee>
			{
			case '1':
				LED_vTog(uCRecLed_1);
    4730:	60 91 9f 05 	lds	r22, 0x059F
    4734:	70 91 a0 05 	lds	r23, 0x05A0
    4738:	80 91 a1 05 	lds	r24, 0x05A1
    473c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4740:	1b c0       	rjmp	.+54     	; 0x4778 <Home_vReception+0xee>
				break;
			case '2':
				LED_vTog(uCRecLed_2);
    4742:	60 91 a2 05 	lds	r22, 0x05A2
    4746:	70 91 a3 05 	lds	r23, 0x05A3
    474a:	80 91 a4 05 	lds	r24, 0x05A4
    474e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4752:	12 c0       	rjmp	.+36     	; 0x4778 <Home_vReception+0xee>
				break;
			case '3':
				LED_vTog(uCRecLed_3);
    4754:	60 91 a5 05 	lds	r22, 0x05A5
    4758:	70 91 a6 05 	lds	r23, 0x05A6
    475c:	80 91 a7 05 	lds	r24, 0x05A7
    4760:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4764:	09 c0       	rjmp	.+18     	; 0x4778 <Home_vReception+0xee>
				break;
			case '4':
				USART_u8SendData(0X0D);
    4766:	8d e0       	ldi	r24, 0x0D	; 13
    4768:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				Rec_vFan();
    476c:	0e 94 31 24 	call	0x4862	; 0x4862 <Rec_vFan>
    4770:	03 c0       	rjmp	.+6      	; 0x4778 <Home_vReception+0xee>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4772:	8d e0       	ldi	r24, 0x0D	; 13
    4774:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    4778:	80 91 f6 05 	lds	r24, 0x05F6
    477c:	8d 30       	cpi	r24, 0x0D	; 13
    477e:	09 f0       	breq	.+2      	; 0x4782 <Home_vReception+0xf8>
    4780:	a6 cf       	rjmp	.-180    	; 0x46ce <Home_vReception+0x44>
}
    4782:	0f 90       	pop	r0
    4784:	0f 90       	pop	r0
    4786:	cf 91       	pop	r28
    4788:	df 91       	pop	r29
    478a:	08 95       	ret

0000478c <Home_vSalon>:

//======================================================================================================================================//
void Home_vSalon()
{
    478c:	df 93       	push	r29
    478e:	cf 93       	push	r28
    4790:	00 d0       	rcall	.+0      	; 0x4792 <Home_vSalon+0x6>
    4792:	cd b7       	in	r28, 0x3d	; 61
    4794:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Salon Options : ");
    4796:	8d e3       	ldi	r24, 0x3D	; 61
    4798:	93 e0       	ldi	r25, 0x03	; 3
    479a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    479e:	8d e0       	ldi	r24, 0x0D	; 13
    47a0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    47a4:	87 ef       	ldi	r24, 0xF7	; 247
    47a6:	92 e0       	ldi	r25, 0x02	; 2
    47a8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Led2 ON/OFF");
    47ac:	8d e0       	ldi	r24, 0x0D	; 13
    47ae:	93 e0       	ldi	r25, 0x03	; 3
    47b0:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    47b4:	8d e0       	ldi	r24, 0x0D	; 13
    47b6:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Rec Fan");
    47ba:	8e e4       	ldi	r24, 0x4E	; 78
    47bc:	93 e0       	ldi	r25, 0x03	; 3
    47be:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    47c2:	8d e0       	ldi	r24, 0x0D	; 13
    47c4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    47c8:	86 ef       	ldi	r24, 0xF6	; 246
    47ca:	95 e0       	ldi	r25, 0x05	; 5
    47cc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    47d0:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    47d4:	80 91 72 05 	lds	r24, 0x0572
    47d8:	88 23       	and	r24, r24
    47da:	c9 f5       	brne	.+114    	; 0x484e <Home_vSalon+0xc2>
		{
			switch (KPD_Press)
    47dc:	80 91 f6 05 	lds	r24, 0x05F6
    47e0:	28 2f       	mov	r18, r24
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	3a 83       	std	Y+2, r19	; 0x02
    47e6:	29 83       	std	Y+1, r18	; 0x01
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
    47ec:	82 33       	cpi	r24, 0x32	; 50
    47ee:	91 05       	cpc	r25, r1
    47f0:	f9 f0       	breq	.+62     	; 0x4830 <Home_vSalon+0xa4>
    47f2:	29 81       	ldd	r18, Y+1	; 0x01
    47f4:	3a 81       	ldd	r19, Y+2	; 0x02
    47f6:	23 33       	cpi	r18, 0x33	; 51
    47f8:	31 05       	cpc	r19, r1
    47fa:	5c f4       	brge	.+22     	; 0x4812 <Home_vSalon+0x86>
    47fc:	89 81       	ldd	r24, Y+1	; 0x01
    47fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4800:	88 30       	cpi	r24, 0x08	; 8
    4802:	91 05       	cpc	r25, r1
    4804:	09 f1       	breq	.+66     	; 0x4848 <Home_vSalon+0xbc>
    4806:	29 81       	ldd	r18, Y+1	; 0x01
    4808:	3a 81       	ldd	r19, Y+2	; 0x02
    480a:	21 33       	cpi	r18, 0x31	; 49
    480c:	31 05       	cpc	r19, r1
    480e:	39 f0       	breq	.+14     	; 0x481e <Home_vSalon+0x92>
    4810:	1e c0       	rjmp	.+60     	; 0x484e <Home_vSalon+0xc2>
    4812:	89 81       	ldd	r24, Y+1	; 0x01
    4814:	9a 81       	ldd	r25, Y+2	; 0x02
    4816:	83 33       	cpi	r24, 0x33	; 51
    4818:	91 05       	cpc	r25, r1
    481a:	99 f0       	breq	.+38     	; 0x4842 <Home_vSalon+0xb6>
    481c:	18 c0       	rjmp	.+48     	; 0x484e <Home_vSalon+0xc2>
			{
			case '1':
				LED_vTog(uCSalLed_1);
    481e:	60 91 99 05 	lds	r22, 0x0599
    4822:	70 91 9a 05 	lds	r23, 0x059A
    4826:	80 91 9b 05 	lds	r24, 0x059B
    482a:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    482e:	0f c0       	rjmp	.+30     	; 0x484e <Home_vSalon+0xc2>
				break;
			case '2':
				LED_vTog(uCSalLed_2);
    4830:	60 91 9c 05 	lds	r22, 0x059C
    4834:	70 91 9d 05 	lds	r23, 0x059D
    4838:	80 91 9e 05 	lds	r24, 0x059E
    483c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4840:	06 c0       	rjmp	.+12     	; 0x484e <Home_vSalon+0xc2>
				break;
			case '3' :
				Sal_vFan();
    4842:	0e 94 dd 24 	call	0x49ba	; 0x49ba <Sal_vFan>
    4846:	03 c0       	rjmp	.+6      	; 0x484e <Home_vSalon+0xc2>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4848:	8d e0       	ldi	r24, 0x0D	; 13
    484a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    484e:	80 91 f6 05 	lds	r24, 0x05F6
    4852:	8d 30       	cpi	r24, 0x0D	; 13
    4854:	09 f0       	breq	.+2      	; 0x4858 <Home_vSalon+0xcc>
    4856:	b8 cf       	rjmp	.-144    	; 0x47c8 <Home_vSalon+0x3c>
}
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	cf 91       	pop	r28
    485e:	df 91       	pop	r29
    4860:	08 95       	ret

00004862 <Rec_vFan>:
//======================================================================================================================================//
void Rec_vFan()
{
    4862:	df 93       	push	r29
    4864:	cf 93       	push	r28
    4866:	00 d0       	rcall	.+0      	; 0x4868 <Rec_vFan+0x6>
    4868:	cd b7       	in	r28, 0x3d	; 61
    486a:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Fan Control : ");
    486c:	89 e5       	ldi	r24, 0x59	; 89
    486e:	93 e0       	ldi	r25, 0x03	; 3
    4870:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4874:	8d e0       	ldi	r24, 0x0D	; 13
    4876:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("1- Fan Off           ");
    487a:	88 e6       	ldi	r24, 0x68	; 104
    487c:	93 e0       	ldi	r25, 0x03	; 3
    487e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Speed 1");
    4882:	8e e7       	ldi	r24, 0x7E	; 126
    4884:	93 e0       	ldi	r25, 0x03	; 3
    4886:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    488a:	8d e0       	ldi	r24, 0x0D	; 13
    488c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Speed 2           ");
    4890:	89 e8       	ldi	r24, 0x89	; 137
    4892:	93 e0       	ldi	r25, 0x03	; 3
    4894:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("4- Speed 3");
    4898:	8f e9       	ldi	r24, 0x9F	; 159
    489a:	93 e0       	ldi	r25, 0x03	; 3
    489c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    48a0:	8d e0       	ldi	r24, 0x0D	; 13
    48a2:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("5- Speed 4");
    48a6:	8a ea       	ldi	r24, 0xAA	; 170
    48a8:	93 e0       	ldi	r25, 0x03	; 3
    48aa:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    48ae:	8d e0       	ldi	r24, 0x0D	; 13
    48b0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    48b4:	86 ef       	ldi	r24, 0xF6	; 246
    48b6:	95 e0       	ldi	r25, 0x05	; 5
    48b8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    48bc:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    48c0:	80 91 72 05 	lds	r24, 0x0572
    48c4:	88 23       	and	r24, r24
    48c6:	09 f0       	breq	.+2      	; 0x48ca <Rec_vFan+0x68>
    48c8:	6e c0       	rjmp	.+220    	; 0x49a6 <Rec_vFan+0x144>
		{
			switch (KPD_Press)
    48ca:	80 91 f6 05 	lds	r24, 0x05F6
    48ce:	28 2f       	mov	r18, r24
    48d0:	30 e0       	ldi	r19, 0x00	; 0
    48d2:	3a 83       	std	Y+2, r19	; 0x02
    48d4:	29 83       	std	Y+1, r18	; 0x01
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	9a 81       	ldd	r25, Y+2	; 0x02
    48da:	83 33       	cpi	r24, 0x33	; 51
    48dc:	91 05       	cpc	r25, r1
    48de:	71 f1       	breq	.+92     	; 0x493c <Rec_vFan+0xda>
    48e0:	29 81       	ldd	r18, Y+1	; 0x01
    48e2:	3a 81       	ldd	r19, Y+2	; 0x02
    48e4:	24 33       	cpi	r18, 0x34	; 52
    48e6:	31 05       	cpc	r19, r1
    48e8:	84 f4       	brge	.+32     	; 0x490a <Rec_vFan+0xa8>
    48ea:	89 81       	ldd	r24, Y+1	; 0x01
    48ec:	9a 81       	ldd	r25, Y+2	; 0x02
    48ee:	81 33       	cpi	r24, 0x31	; 49
    48f0:	91 05       	cpc	r25, r1
    48f2:	b1 f0       	breq	.+44     	; 0x4920 <Rec_vFan+0xbe>
    48f4:	29 81       	ldd	r18, Y+1	; 0x01
    48f6:	3a 81       	ldd	r19, Y+2	; 0x02
    48f8:	22 33       	cpi	r18, 0x32	; 50
    48fa:	31 05       	cpc	r19, r1
    48fc:	c4 f4       	brge	.+48     	; 0x492e <Rec_vFan+0xcc>
    48fe:	89 81       	ldd	r24, Y+1	; 0x01
    4900:	9a 81       	ldd	r25, Y+2	; 0x02
    4902:	88 30       	cpi	r24, 0x08	; 8
    4904:	91 05       	cpc	r25, r1
    4906:	79 f1       	breq	.+94     	; 0x4966 <Rec_vFan+0x104>
    4908:	4e c0       	rjmp	.+156    	; 0x49a6 <Rec_vFan+0x144>
    490a:	29 81       	ldd	r18, Y+1	; 0x01
    490c:	3a 81       	ldd	r19, Y+2	; 0x02
    490e:	24 33       	cpi	r18, 0x34	; 52
    4910:	31 05       	cpc	r19, r1
    4912:	d9 f0       	breq	.+54     	; 0x494a <Rec_vFan+0xe8>
    4914:	89 81       	ldd	r24, Y+1	; 0x01
    4916:	9a 81       	ldd	r25, Y+2	; 0x02
    4918:	85 33       	cpi	r24, 0x35	; 53
    491a:	91 05       	cpc	r25, r1
    491c:	e9 f0       	breq	.+58     	; 0x4958 <Rec_vFan+0xf6>
    491e:	43 c0       	rjmp	.+134    	; 0x49a6 <Rec_vFan+0x144>
			{
			case '1':
				SPI_u8Tranceive(0x05, &SPI_Recieve);
    4920:	2b e0       	ldi	r18, 0x0B	; 11
    4922:	36 e0       	ldi	r19, 0x06	; 6
    4924:	85 e0       	ldi	r24, 0x05	; 5
    4926:	b9 01       	movw	r22, r18
    4928:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    492c:	3c c0       	rjmp	.+120    	; 0x49a6 <Rec_vFan+0x144>
				break;
			case '2':
				SPI_u8Tranceive(0x06, &SPI_Recieve);
    492e:	2b e0       	ldi	r18, 0x0B	; 11
    4930:	36 e0       	ldi	r19, 0x06	; 6
    4932:	86 e0       	ldi	r24, 0x06	; 6
    4934:	b9 01       	movw	r22, r18
    4936:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    493a:	35 c0       	rjmp	.+106    	; 0x49a6 <Rec_vFan+0x144>
				break;
			case '3':
				SPI_u8Tranceive(0x07, &SPI_Recieve);
    493c:	2b e0       	ldi	r18, 0x0B	; 11
    493e:	36 e0       	ldi	r19, 0x06	; 6
    4940:	87 e0       	ldi	r24, 0x07	; 7
    4942:	b9 01       	movw	r22, r18
    4944:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4948:	2e c0       	rjmp	.+92     	; 0x49a6 <Rec_vFan+0x144>
				break;
			case '4':
				SPI_u8Tranceive(0x08, &SPI_Recieve);
    494a:	2b e0       	ldi	r18, 0x0B	; 11
    494c:	36 e0       	ldi	r19, 0x06	; 6
    494e:	88 e0       	ldi	r24, 0x08	; 8
    4950:	b9 01       	movw	r22, r18
    4952:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4956:	27 c0       	rjmp	.+78     	; 0x49a6 <Rec_vFan+0x144>
				break;
			case '5':
				SPI_u8Tranceive(0x09, &SPI_Recieve);
    4958:	2b e0       	ldi	r18, 0x0B	; 11
    495a:	36 e0       	ldi	r19, 0x06	; 6
    495c:	89 e0       	ldi	r24, 0x09	; 9
    495e:	b9 01       	movw	r22, r18
    4960:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4964:	20 c0       	rjmp	.+64     	; 0x49a6 <Rec_vFan+0x144>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4966:	8d e0       	ldi	r24, 0x0D	; 13
    4968:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("Reception Options : ");
    496c:	82 ee       	ldi	r24, 0xE2	; 226
    496e:	92 e0       	ldi	r25, 0x02	; 2
    4970:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4974:	8d e0       	ldi	r24, 0x0D	; 13
    4976:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

				USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    497a:	87 ef       	ldi	r24, 0xF7	; 247
    497c:	92 e0       	ldi	r25, 0x02	; 2
    497e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("2- Led2 ON/OFF");
    4982:	8d e0       	ldi	r24, 0x0D	; 13
    4984:	93 e0       	ldi	r25, 0x03	; 3
    4986:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    498a:	8d e0       	ldi	r24, 0x0D	; 13
    498c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("3- Led3 ON/OFF       ");
    4990:	8c e1       	ldi	r24, 0x1C	; 28
    4992:	93 e0       	ldi	r25, 0x03	; 3
    4994:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("4- Rec Fan");
    4998:	82 e3       	ldi	r24, 0x32	; 50
    499a:	93 e0       	ldi	r25, 0x03	; 3
    499c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    49a0:	8d e0       	ldi	r24, 0x0D	; 13
    49a2:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    49a6:	80 91 f6 05 	lds	r24, 0x05F6
    49aa:	8d 30       	cpi	r24, 0x0D	; 13
    49ac:	09 f0       	breq	.+2      	; 0x49b0 <Rec_vFan+0x14e>
    49ae:	82 cf       	rjmp	.-252    	; 0x48b4 <Rec_vFan+0x52>
}
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	cf 91       	pop	r28
    49b6:	df 91       	pop	r29
    49b8:	08 95       	ret

000049ba <Sal_vFan>:
//======================================================================================================================================//
void Sal_vFan()
{
    49ba:	df 93       	push	r29
    49bc:	cf 93       	push	r28
    49be:	00 d0       	rcall	.+0      	; 0x49c0 <Sal_vFan+0x6>
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Fan Control : ");
    49c4:	89 e5       	ldi	r24, 0x59	; 89
    49c6:	93 e0       	ldi	r25, 0x03	; 3
    49c8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    49cc:	8d e0       	ldi	r24, 0x0D	; 13
    49ce:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("1- Fan Off           ");
    49d2:	88 e6       	ldi	r24, 0x68	; 104
    49d4:	93 e0       	ldi	r25, 0x03	; 3
    49d6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Speed 1");
    49da:	8e e7       	ldi	r24, 0x7E	; 126
    49dc:	93 e0       	ldi	r25, 0x03	; 3
    49de:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    49e2:	8d e0       	ldi	r24, 0x0D	; 13
    49e4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Speed 2           ");
    49e8:	89 e8       	ldi	r24, 0x89	; 137
    49ea:	93 e0       	ldi	r25, 0x03	; 3
    49ec:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("4- Speed 3");
    49f0:	8f e9       	ldi	r24, 0x9F	; 159
    49f2:	93 e0       	ldi	r25, 0x03	; 3
    49f4:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    49f8:	8d e0       	ldi	r24, 0x0D	; 13
    49fa:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("5- Speed 4");
    49fe:	8a ea       	ldi	r24, 0xAA	; 170
    4a00:	93 e0       	ldi	r25, 0x03	; 3
    4a02:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4a06:	8d e0       	ldi	r24, 0x0D	; 13
    4a08:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    4a0c:	86 ef       	ldi	r24, 0xF6	; 246
    4a0e:	95 e0       	ldi	r25, 0x05	; 5
    4a10:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    4a14:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    4a18:	80 91 72 05 	lds	r24, 0x0572
    4a1c:	88 23       	and	r24, r24
    4a1e:	09 f0       	breq	.+2      	; 0x4a22 <Sal_vFan+0x68>
    4a20:	6e c0       	rjmp	.+220    	; 0x4afe <Sal_vFan+0x144>
		{
			switch (KPD_Press)
    4a22:	80 91 f6 05 	lds	r24, 0x05F6
    4a26:	28 2f       	mov	r18, r24
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	3a 83       	std	Y+2, r19	; 0x02
    4a2c:	29 83       	std	Y+1, r18	; 0x01
    4a2e:	89 81       	ldd	r24, Y+1	; 0x01
    4a30:	9a 81       	ldd	r25, Y+2	; 0x02
    4a32:	83 33       	cpi	r24, 0x33	; 51
    4a34:	91 05       	cpc	r25, r1
    4a36:	71 f1       	breq	.+92     	; 0x4a94 <Sal_vFan+0xda>
    4a38:	29 81       	ldd	r18, Y+1	; 0x01
    4a3a:	3a 81       	ldd	r19, Y+2	; 0x02
    4a3c:	24 33       	cpi	r18, 0x34	; 52
    4a3e:	31 05       	cpc	r19, r1
    4a40:	84 f4       	brge	.+32     	; 0x4a62 <Sal_vFan+0xa8>
    4a42:	89 81       	ldd	r24, Y+1	; 0x01
    4a44:	9a 81       	ldd	r25, Y+2	; 0x02
    4a46:	81 33       	cpi	r24, 0x31	; 49
    4a48:	91 05       	cpc	r25, r1
    4a4a:	b1 f0       	breq	.+44     	; 0x4a78 <Sal_vFan+0xbe>
    4a4c:	29 81       	ldd	r18, Y+1	; 0x01
    4a4e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a50:	22 33       	cpi	r18, 0x32	; 50
    4a52:	31 05       	cpc	r19, r1
    4a54:	c4 f4       	brge	.+48     	; 0x4a86 <Sal_vFan+0xcc>
    4a56:	89 81       	ldd	r24, Y+1	; 0x01
    4a58:	9a 81       	ldd	r25, Y+2	; 0x02
    4a5a:	88 30       	cpi	r24, 0x08	; 8
    4a5c:	91 05       	cpc	r25, r1
    4a5e:	79 f1       	breq	.+94     	; 0x4abe <Sal_vFan+0x104>
    4a60:	4e c0       	rjmp	.+156    	; 0x4afe <Sal_vFan+0x144>
    4a62:	29 81       	ldd	r18, Y+1	; 0x01
    4a64:	3a 81       	ldd	r19, Y+2	; 0x02
    4a66:	24 33       	cpi	r18, 0x34	; 52
    4a68:	31 05       	cpc	r19, r1
    4a6a:	d9 f0       	breq	.+54     	; 0x4aa2 <Sal_vFan+0xe8>
    4a6c:	89 81       	ldd	r24, Y+1	; 0x01
    4a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a70:	85 33       	cpi	r24, 0x35	; 53
    4a72:	91 05       	cpc	r25, r1
    4a74:	e9 f0       	breq	.+58     	; 0x4ab0 <Sal_vFan+0xf6>
    4a76:	43 c0       	rjmp	.+134    	; 0x4afe <Sal_vFan+0x144>
			{
			case '1':
				SPI_u8Tranceive(0x0A, &SPI_Recieve);
    4a78:	2b e0       	ldi	r18, 0x0B	; 11
    4a7a:	36 e0       	ldi	r19, 0x06	; 6
    4a7c:	8a e0       	ldi	r24, 0x0A	; 10
    4a7e:	b9 01       	movw	r22, r18
    4a80:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4a84:	3c c0       	rjmp	.+120    	; 0x4afe <Sal_vFan+0x144>
				break;
			case '2':
				SPI_u8Tranceive(0x0B, &SPI_Recieve);
    4a86:	2b e0       	ldi	r18, 0x0B	; 11
    4a88:	36 e0       	ldi	r19, 0x06	; 6
    4a8a:	8b e0       	ldi	r24, 0x0B	; 11
    4a8c:	b9 01       	movw	r22, r18
    4a8e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4a92:	35 c0       	rjmp	.+106    	; 0x4afe <Sal_vFan+0x144>
				break;
			case '3':
				SPI_u8Tranceive(0x0C, &SPI_Recieve);
    4a94:	2b e0       	ldi	r18, 0x0B	; 11
    4a96:	36 e0       	ldi	r19, 0x06	; 6
    4a98:	8c e0       	ldi	r24, 0x0C	; 12
    4a9a:	b9 01       	movw	r22, r18
    4a9c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4aa0:	2e c0       	rjmp	.+92     	; 0x4afe <Sal_vFan+0x144>
				break;
			case '4':
				SPI_u8Tranceive(0x0D, &SPI_Recieve);
    4aa2:	2b e0       	ldi	r18, 0x0B	; 11
    4aa4:	36 e0       	ldi	r19, 0x06	; 6
    4aa6:	8d e0       	ldi	r24, 0x0D	; 13
    4aa8:	b9 01       	movw	r22, r18
    4aaa:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4aae:	27 c0       	rjmp	.+78     	; 0x4afe <Sal_vFan+0x144>
				break;
			case '5':
				SPI_u8Tranceive(0x0E, &SPI_Recieve);
    4ab0:	2b e0       	ldi	r18, 0x0B	; 11
    4ab2:	36 e0       	ldi	r19, 0x06	; 6
    4ab4:	8e e0       	ldi	r24, 0x0E	; 14
    4ab6:	b9 01       	movw	r22, r18
    4ab8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    4abc:	20 c0       	rjmp	.+64     	; 0x4afe <Sal_vFan+0x144>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4abe:	8d e0       	ldi	r24, 0x0D	; 13
    4ac0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("Salon Options : ");
    4ac4:	8d e3       	ldi	r24, 0x3D	; 61
    4ac6:	93 e0       	ldi	r25, 0x03	; 3
    4ac8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4acc:	8d e0       	ldi	r24, 0x0D	; 13
    4ace:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

				USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    4ad2:	87 ef       	ldi	r24, 0xF7	; 247
    4ad4:	92 e0       	ldi	r25, 0x02	; 2
    4ad6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("2- Led2 ON/OFF");
    4ada:	8d e0       	ldi	r24, 0x0D	; 13
    4adc:	93 e0       	ldi	r25, 0x03	; 3
    4ade:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4ae2:	8d e0       	ldi	r24, 0x0D	; 13
    4ae4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("3- Led3 ON/OFF       ");
    4ae8:	8c e1       	ldi	r24, 0x1C	; 28
    4aea:	93 e0       	ldi	r25, 0x03	; 3
    4aec:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("4- Rec Fan");
    4af0:	82 e3       	ldi	r24, 0x32	; 50
    4af2:	93 e0       	ldi	r25, 0x03	; 3
    4af4:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4af8:	8d e0       	ldi	r24, 0x0D	; 13
    4afa:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    4afe:	80 91 f6 05 	lds	r24, 0x05F6
    4b02:	8d 30       	cpi	r24, 0x0D	; 13
    4b04:	09 f0       	breq	.+2      	; 0x4b08 <Sal_vFan+0x14e>
    4b06:	82 cf       	rjmp	.-252    	; 0x4a0c <Sal_vFan+0x52>
}
    4b08:	0f 90       	pop	r0
    4b0a:	0f 90       	pop	r0
    4b0c:	cf 91       	pop	r28
    4b0e:	df 91       	pop	r29
    4b10:	08 95       	ret

00004b12 <Home_vBed_Room>:

//======================================================================================================================================//
void Home_vBed_Room()
{
    4b12:	df 93       	push	r29
    4b14:	cf 93       	push	r28
    4b16:	00 d0       	rcall	.+0      	; 0x4b18 <Home_vBed_Room+0x6>
    4b18:	cd b7       	in	r28, 0x3d	; 61
    4b1a:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Bed Room Options : ");
    4b1c:	85 eb       	ldi	r24, 0xB5	; 181
    4b1e:	93 e0       	ldi	r25, 0x03	; 3
    4b20:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4b24:	8d e0       	ldi	r24, 0x0D	; 13
    4b26:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    4b2a:	87 ef       	ldi	r24, 0xF7	; 247
    4b2c:	92 e0       	ldi	r25, 0x02	; 2
    4b2e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Led2 ON/OFF");
    4b32:	8d e0       	ldi	r24, 0x0D	; 13
    4b34:	93 e0       	ldi	r25, 0x03	; 3
    4b36:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4b3a:	8d e0       	ldi	r24, 0x0D	; 13
    4b3c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Bed Fan");
    4b40:	89 ec       	ldi	r24, 0xC9	; 201
    4b42:	93 e0       	ldi	r25, 0x03	; 3
    4b44:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4b48:	8d e0       	ldi	r24, 0x0D	; 13
    4b4a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    4b4e:	86 ef       	ldi	r24, 0xF6	; 246
    4b50:	95 e0       	ldi	r25, 0x05	; 5
    4b52:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    4b56:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    4b5a:	80 91 72 05 	lds	r24, 0x0572
    4b5e:	88 23       	and	r24, r24
    4b60:	c9 f5       	brne	.+114    	; 0x4bd4 <Home_vBed_Room+0xc2>
		{
			switch (KPD_Press)
    4b62:	80 91 f6 05 	lds	r24, 0x05F6
    4b66:	28 2f       	mov	r18, r24
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	3a 83       	std	Y+2, r19	; 0x02
    4b6c:	29 83       	std	Y+1, r18	; 0x01
    4b6e:	89 81       	ldd	r24, Y+1	; 0x01
    4b70:	9a 81       	ldd	r25, Y+2	; 0x02
    4b72:	82 33       	cpi	r24, 0x32	; 50
    4b74:	91 05       	cpc	r25, r1
    4b76:	f9 f0       	breq	.+62     	; 0x4bb6 <Home_vBed_Room+0xa4>
    4b78:	29 81       	ldd	r18, Y+1	; 0x01
    4b7a:	3a 81       	ldd	r19, Y+2	; 0x02
    4b7c:	23 33       	cpi	r18, 0x33	; 51
    4b7e:	31 05       	cpc	r19, r1
    4b80:	5c f4       	brge	.+22     	; 0x4b98 <Home_vBed_Room+0x86>
    4b82:	89 81       	ldd	r24, Y+1	; 0x01
    4b84:	9a 81       	ldd	r25, Y+2	; 0x02
    4b86:	88 30       	cpi	r24, 0x08	; 8
    4b88:	91 05       	cpc	r25, r1
    4b8a:	09 f1       	breq	.+66     	; 0x4bce <Home_vBed_Room+0xbc>
    4b8c:	29 81       	ldd	r18, Y+1	; 0x01
    4b8e:	3a 81       	ldd	r19, Y+2	; 0x02
    4b90:	21 33       	cpi	r18, 0x31	; 49
    4b92:	31 05       	cpc	r19, r1
    4b94:	39 f0       	breq	.+14     	; 0x4ba4 <Home_vBed_Room+0x92>
    4b96:	1e c0       	rjmp	.+60     	; 0x4bd4 <Home_vBed_Room+0xc2>
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9c:	83 33       	cpi	r24, 0x33	; 51
    4b9e:	91 05       	cpc	r25, r1
    4ba0:	99 f0       	breq	.+38     	; 0x4bc8 <Home_vBed_Room+0xb6>
    4ba2:	18 c0       	rjmp	.+48     	; 0x4bd4 <Home_vBed_Room+0xc2>
			{
			case '1':
				LED_vTog(uCBedLed_1);
    4ba4:	60 91 7b 05 	lds	r22, 0x057B
    4ba8:	70 91 7c 05 	lds	r23, 0x057C
    4bac:	80 91 7d 05 	lds	r24, 0x057D
    4bb0:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4bb4:	0f c0       	rjmp	.+30     	; 0x4bd4 <Home_vBed_Room+0xc2>
				break;
			case '2':
				LED_vTog(uCBedLed_2);
    4bb6:	60 91 7e 05 	lds	r22, 0x057E
    4bba:	70 91 7f 05 	lds	r23, 0x057F
    4bbe:	80 91 80 05 	lds	r24, 0x0580
    4bc2:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4bc6:	06 c0       	rjmp	.+12     	; 0x4bd4 <Home_vBed_Room+0xc2>
				break;
			case '3':
				Bed_vFan();
    4bc8:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <Bed_vFan>
    4bcc:	03 c0       	rjmp	.+6      	; 0x4bd4 <Home_vBed_Room+0xc2>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4bce:	8d e0       	ldi	r24, 0x0D	; 13
    4bd0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    4bd4:	80 91 f6 05 	lds	r24, 0x05F6
    4bd8:	8d 30       	cpi	r24, 0x0D	; 13
    4bda:	09 f0       	breq	.+2      	; 0x4bde <Home_vBed_Room+0xcc>
    4bdc:	b8 cf       	rjmp	.-144    	; 0x4b4e <Home_vBed_Room+0x3c>
}
    4bde:	0f 90       	pop	r0
    4be0:	0f 90       	pop	r0
    4be2:	cf 91       	pop	r28
    4be4:	df 91       	pop	r29
    4be6:	08 95       	ret

00004be8 <Bed_vFan>:
//======================================================================================================================================//
void Bed_vFan()
{
    4be8:	df 93       	push	r29
    4bea:	cf 93       	push	r28
    4bec:	00 d0       	rcall	.+0      	; 0x4bee <Bed_vFan+0x6>
    4bee:	cd b7       	in	r28, 0x3d	; 61
    4bf0:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Fan Control : ");
    4bf2:	89 e5       	ldi	r24, 0x59	; 89
    4bf4:	93 e0       	ldi	r25, 0x03	; 3
    4bf6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4bfa:	8d e0       	ldi	r24, 0x0D	; 13
    4bfc:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("1- Fan Off           ");
    4c00:	88 e6       	ldi	r24, 0x68	; 104
    4c02:	93 e0       	ldi	r25, 0x03	; 3
    4c04:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Speed 1");
    4c08:	8e e7       	ldi	r24, 0x7E	; 126
    4c0a:	93 e0       	ldi	r25, 0x03	; 3
    4c0c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4c10:	8d e0       	ldi	r24, 0x0D	; 13
    4c12:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Speed 2           ");
    4c16:	89 e8       	ldi	r24, 0x89	; 137
    4c18:	93 e0       	ldi	r25, 0x03	; 3
    4c1a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("4- Speed 3");
    4c1e:	8f e9       	ldi	r24, 0x9F	; 159
    4c20:	93 e0       	ldi	r25, 0x03	; 3
    4c22:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4c26:	8d e0       	ldi	r24, 0x0D	; 13
    4c28:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("5- Speed 4");
    4c2c:	8a ea       	ldi	r24, 0xAA	; 170
    4c2e:	93 e0       	ldi	r25, 0x03	; 3
    4c30:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4c34:	8d e0       	ldi	r24, 0x0D	; 13
    4c36:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    4c3a:	86 ef       	ldi	r24, 0xF6	; 246
    4c3c:	95 e0       	ldi	r25, 0x05	; 5
    4c3e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    4c42:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    4c46:	80 91 72 05 	lds	r24, 0x0572
    4c4a:	88 23       	and	r24, r24
    4c4c:	09 f0       	breq	.+2      	; 0x4c50 <Bed_vFan+0x68>
    4c4e:	5b c0       	rjmp	.+182    	; 0x4d06 <Bed_vFan+0x11e>
		{
			switch (KPD_Press)
    4c50:	80 91 f6 05 	lds	r24, 0x05F6
    4c54:	28 2f       	mov	r18, r24
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	3a 83       	std	Y+2, r19	; 0x02
    4c5a:	29 83       	std	Y+1, r18	; 0x01
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c60:	83 33       	cpi	r24, 0x33	; 51
    4c62:	91 05       	cpc	r25, r1
    4c64:	41 f1       	breq	.+80     	; 0x4cb6 <Bed_vFan+0xce>
    4c66:	29 81       	ldd	r18, Y+1	; 0x01
    4c68:	3a 81       	ldd	r19, Y+2	; 0x02
    4c6a:	24 33       	cpi	r18, 0x34	; 52
    4c6c:	31 05       	cpc	r19, r1
    4c6e:	84 f4       	brge	.+32     	; 0x4c90 <Bed_vFan+0xa8>
    4c70:	89 81       	ldd	r24, Y+1	; 0x01
    4c72:	9a 81       	ldd	r25, Y+2	; 0x02
    4c74:	81 33       	cpi	r24, 0x31	; 49
    4c76:	91 05       	cpc	r25, r1
    4c78:	b1 f0       	breq	.+44     	; 0x4ca6 <Bed_vFan+0xbe>
    4c7a:	29 81       	ldd	r18, Y+1	; 0x01
    4c7c:	3a 81       	ldd	r19, Y+2	; 0x02
    4c7e:	22 33       	cpi	r18, 0x32	; 50
    4c80:	31 05       	cpc	r19, r1
    4c82:	ac f4       	brge	.+42     	; 0x4cae <Bed_vFan+0xc6>
    4c84:	89 81       	ldd	r24, Y+1	; 0x01
    4c86:	9a 81       	ldd	r25, Y+2	; 0x02
    4c88:	88 30       	cpi	r24, 0x08	; 8
    4c8a:	91 05       	cpc	r25, r1
    4c8c:	01 f1       	breq	.+64     	; 0x4cce <Bed_vFan+0xe6>
    4c8e:	3b c0       	rjmp	.+118    	; 0x4d06 <Bed_vFan+0x11e>
    4c90:	29 81       	ldd	r18, Y+1	; 0x01
    4c92:	3a 81       	ldd	r19, Y+2	; 0x02
    4c94:	24 33       	cpi	r18, 0x34	; 52
    4c96:	31 05       	cpc	r19, r1
    4c98:	91 f0       	breq	.+36     	; 0x4cbe <Bed_vFan+0xd6>
    4c9a:	89 81       	ldd	r24, Y+1	; 0x01
    4c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9e:	85 33       	cpi	r24, 0x35	; 53
    4ca0:	91 05       	cpc	r25, r1
    4ca2:	89 f0       	breq	.+34     	; 0x4cc6 <Bed_vFan+0xde>
    4ca4:	30 c0       	rjmp	.+96     	; 0x4d06 <Bed_vFan+0x11e>
			{
			case '1':
				TIMER0_vSetCTC(0);
    4ca6:	80 e0       	ldi	r24, 0x00	; 0
    4ca8:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIMER0_vSetCTC>
    4cac:	2c c0       	rjmp	.+88     	; 0x4d06 <Bed_vFan+0x11e>
				break;
			case '2':
				TIMER0_vSetCTC(63);
    4cae:	8f e3       	ldi	r24, 0x3F	; 63
    4cb0:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIMER0_vSetCTC>
    4cb4:	28 c0       	rjmp	.+80     	; 0x4d06 <Bed_vFan+0x11e>
				break;
			case '3':
				TIMER0_vSetCTC(126);
    4cb6:	8e e7       	ldi	r24, 0x7E	; 126
    4cb8:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIMER0_vSetCTC>
    4cbc:	24 c0       	rjmp	.+72     	; 0x4d06 <Bed_vFan+0x11e>
				break;
			case '4':
				TIMER0_vSetCTC(189);
    4cbe:	8d eb       	ldi	r24, 0xBD	; 189
    4cc0:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIMER0_vSetCTC>
    4cc4:	20 c0       	rjmp	.+64     	; 0x4d06 <Bed_vFan+0x11e>
				break;
			case '5':
				TIMER0_vSetCTC(255);
    4cc6:	8f ef       	ldi	r24, 0xFF	; 255
    4cc8:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIMER0_vSetCTC>
    4ccc:	1c c0       	rjmp	.+56     	; 0x4d06 <Bed_vFan+0x11e>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4cce:	8d e0       	ldi	r24, 0x0D	; 13
    4cd0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("Bed Room Options : ");
    4cd4:	85 eb       	ldi	r24, 0xB5	; 181
    4cd6:	93 e0       	ldi	r25, 0x03	; 3
    4cd8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4cdc:	8d e0       	ldi	r24, 0x0D	; 13
    4cde:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

				USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    4ce2:	87 ef       	ldi	r24, 0xF7	; 247
    4ce4:	92 e0       	ldi	r25, 0x02	; 2
    4ce6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("2- Led2 ON/OFF");
    4cea:	8d e0       	ldi	r24, 0x0D	; 13
    4cec:	93 e0       	ldi	r25, 0x03	; 3
    4cee:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4cf2:	8d e0       	ldi	r24, 0x0D	; 13
    4cf4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("3- Bed Fan");
    4cf8:	89 ec       	ldi	r24, 0xC9	; 201
    4cfa:	93 e0       	ldi	r25, 0x03	; 3
    4cfc:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4d00:	8d e0       	ldi	r24, 0x0D	; 13
    4d02:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    4d06:	80 91 f6 05 	lds	r24, 0x05F6
    4d0a:	8d 30       	cpi	r24, 0x0D	; 13
    4d0c:	09 f0       	breq	.+2      	; 0x4d10 <Bed_vFan+0x128>
    4d0e:	95 cf       	rjmp	.-214    	; 0x4c3a <Bed_vFan+0x52>
}
    4d10:	0f 90       	pop	r0
    4d12:	0f 90       	pop	r0
    4d14:	cf 91       	pop	r28
    4d16:	df 91       	pop	r29
    4d18:	08 95       	ret

00004d1a <Home_vChildren_Room_1>:
//======================================================================================================================================//
void Home_vChildren_Room_1()
{
    4d1a:	df 93       	push	r29
    4d1c:	cf 93       	push	r28
    4d1e:	00 d0       	rcall	.+0      	; 0x4d20 <Home_vChildren_Room_1+0x6>
    4d20:	cd b7       	in	r28, 0x3d	; 61
    4d22:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Children Room 1 Options : ");
    4d24:	84 ed       	ldi	r24, 0xD4	; 212
    4d26:	93 e0       	ldi	r25, 0x03	; 3
    4d28:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4d2c:	8d e0       	ldi	r24, 0x0D	; 13
    4d2e:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    4d32:	87 ef       	ldi	r24, 0xF7	; 247
    4d34:	92 e0       	ldi	r25, 0x02	; 2
    4d36:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Led2 ON/OFF");
    4d3a:	8d e0       	ldi	r24, 0x0D	; 13
    4d3c:	93 e0       	ldi	r25, 0x03	; 3
    4d3e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4d42:	8d e0       	ldi	r24, 0x0D	; 13
    4d44:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Child Fan");
    4d48:	8f ee       	ldi	r24, 0xEF	; 239
    4d4a:	93 e0       	ldi	r25, 0x03	; 3
    4d4c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4d50:	8d e0       	ldi	r24, 0x0D	; 13
    4d52:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    4d56:	86 ef       	ldi	r24, 0xF6	; 246
    4d58:	95 e0       	ldi	r25, 0x05	; 5
    4d5a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    4d5e:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    4d62:	80 91 72 05 	lds	r24, 0x0572
    4d66:	88 23       	and	r24, r24
    4d68:	c9 f5       	brne	.+114    	; 0x4ddc <Home_vChildren_Room_1+0xc2>
		{
			switch (KPD_Press)
    4d6a:	80 91 f6 05 	lds	r24, 0x05F6
    4d6e:	28 2f       	mov	r18, r24
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	3a 83       	std	Y+2, r19	; 0x02
    4d74:	29 83       	std	Y+1, r18	; 0x01
    4d76:	89 81       	ldd	r24, Y+1	; 0x01
    4d78:	9a 81       	ldd	r25, Y+2	; 0x02
    4d7a:	82 33       	cpi	r24, 0x32	; 50
    4d7c:	91 05       	cpc	r25, r1
    4d7e:	f9 f0       	breq	.+62     	; 0x4dbe <Home_vChildren_Room_1+0xa4>
    4d80:	29 81       	ldd	r18, Y+1	; 0x01
    4d82:	3a 81       	ldd	r19, Y+2	; 0x02
    4d84:	23 33       	cpi	r18, 0x33	; 51
    4d86:	31 05       	cpc	r19, r1
    4d88:	5c f4       	brge	.+22     	; 0x4da0 <Home_vChildren_Room_1+0x86>
    4d8a:	89 81       	ldd	r24, Y+1	; 0x01
    4d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d8e:	88 30       	cpi	r24, 0x08	; 8
    4d90:	91 05       	cpc	r25, r1
    4d92:	09 f1       	breq	.+66     	; 0x4dd6 <Home_vChildren_Room_1+0xbc>
    4d94:	29 81       	ldd	r18, Y+1	; 0x01
    4d96:	3a 81       	ldd	r19, Y+2	; 0x02
    4d98:	21 33       	cpi	r18, 0x31	; 49
    4d9a:	31 05       	cpc	r19, r1
    4d9c:	39 f0       	breq	.+14     	; 0x4dac <Home_vChildren_Room_1+0x92>
    4d9e:	1e c0       	rjmp	.+60     	; 0x4ddc <Home_vChildren_Room_1+0xc2>
    4da0:	89 81       	ldd	r24, Y+1	; 0x01
    4da2:	9a 81       	ldd	r25, Y+2	; 0x02
    4da4:	83 33       	cpi	r24, 0x33	; 51
    4da6:	91 05       	cpc	r25, r1
    4da8:	99 f0       	breq	.+38     	; 0x4dd0 <Home_vChildren_Room_1+0xb6>
    4daa:	18 c0       	rjmp	.+48     	; 0x4ddc <Home_vChildren_Room_1+0xc2>
			{
			case '1':
				LED_vTog(uCCh_1_Led_1);
    4dac:	60 91 a8 05 	lds	r22, 0x05A8
    4db0:	70 91 a9 05 	lds	r23, 0x05A9
    4db4:	80 91 aa 05 	lds	r24, 0x05AA
    4db8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4dbc:	0f c0       	rjmp	.+30     	; 0x4ddc <Home_vChildren_Room_1+0xc2>
				break;
			case '2':
				LED_vTog(uCCh_1_Led_2);
    4dbe:	60 91 ab 05 	lds	r22, 0x05AB
    4dc2:	70 91 ac 05 	lds	r23, 0x05AC
    4dc6:	80 91 ad 05 	lds	r24, 0x05AD
    4dca:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4dce:	06 c0       	rjmp	.+12     	; 0x4ddc <Home_vChildren_Room_1+0xc2>
				break;
			case '3' :
				Child_vFan();
    4dd0:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <Child_vFan>
    4dd4:	03 c0       	rjmp	.+6      	; 0x4ddc <Home_vChildren_Room_1+0xc2>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4dd6:	8d e0       	ldi	r24, 0x0D	; 13
    4dd8:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    4ddc:	80 91 f6 05 	lds	r24, 0x05F6
    4de0:	8d 30       	cpi	r24, 0x0D	; 13
    4de2:	09 f0       	breq	.+2      	; 0x4de6 <Home_vChildren_Room_1+0xcc>
    4de4:	b8 cf       	rjmp	.-144    	; 0x4d56 <Home_vChildren_Room_1+0x3c>
}
    4de6:	0f 90       	pop	r0
    4de8:	0f 90       	pop	r0
    4dea:	cf 91       	pop	r28
    4dec:	df 91       	pop	r29
    4dee:	08 95       	ret

00004df0 <Home_vChildren_Room_2>:
//======================================================================================================================================//
void Home_vChildren_Room_2()
{
    4df0:	df 93       	push	r29
    4df2:	cf 93       	push	r28
    4df4:	00 d0       	rcall	.+0      	; 0x4df6 <Home_vChildren_Room_2+0x6>
    4df6:	cd b7       	in	r28, 0x3d	; 61
    4df8:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Children Room 2 Options : ");
    4dfa:	8c ef       	ldi	r24, 0xFC	; 252
    4dfc:	93 e0       	ldi	r25, 0x03	; 3
    4dfe:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4e02:	8d e0       	ldi	r24, 0x0D	; 13
    4e04:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    4e08:	87 ef       	ldi	r24, 0xF7	; 247
    4e0a:	92 e0       	ldi	r25, 0x02	; 2
    4e0c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Led2 ON/OFF");
    4e10:	8d e0       	ldi	r24, 0x0D	; 13
    4e12:	93 e0       	ldi	r25, 0x03	; 3
    4e14:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4e18:	8d e0       	ldi	r24, 0x0D	; 13
    4e1a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Child Fan");
    4e1e:	8f ee       	ldi	r24, 0xEF	; 239
    4e20:	93 e0       	ldi	r25, 0x03	; 3
    4e22:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4e26:	8d e0       	ldi	r24, 0x0D	; 13
    4e28:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    4e2c:	86 ef       	ldi	r24, 0xF6	; 246
    4e2e:	95 e0       	ldi	r25, 0x05	; 5
    4e30:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    4e34:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    4e38:	80 91 72 05 	lds	r24, 0x0572
    4e3c:	88 23       	and	r24, r24
    4e3e:	c9 f5       	brne	.+114    	; 0x4eb2 <Home_vChildren_Room_2+0xc2>
		{
			switch (KPD_Press)
    4e40:	80 91 f6 05 	lds	r24, 0x05F6
    4e44:	28 2f       	mov	r18, r24
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	3a 83       	std	Y+2, r19	; 0x02
    4e4a:	29 83       	std	Y+1, r18	; 0x01
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e50:	82 33       	cpi	r24, 0x32	; 50
    4e52:	91 05       	cpc	r25, r1
    4e54:	f9 f0       	breq	.+62     	; 0x4e94 <Home_vChildren_Room_2+0xa4>
    4e56:	29 81       	ldd	r18, Y+1	; 0x01
    4e58:	3a 81       	ldd	r19, Y+2	; 0x02
    4e5a:	23 33       	cpi	r18, 0x33	; 51
    4e5c:	31 05       	cpc	r19, r1
    4e5e:	5c f4       	brge	.+22     	; 0x4e76 <Home_vChildren_Room_2+0x86>
    4e60:	89 81       	ldd	r24, Y+1	; 0x01
    4e62:	9a 81       	ldd	r25, Y+2	; 0x02
    4e64:	88 30       	cpi	r24, 0x08	; 8
    4e66:	91 05       	cpc	r25, r1
    4e68:	09 f1       	breq	.+66     	; 0x4eac <Home_vChildren_Room_2+0xbc>
    4e6a:	29 81       	ldd	r18, Y+1	; 0x01
    4e6c:	3a 81       	ldd	r19, Y+2	; 0x02
    4e6e:	21 33       	cpi	r18, 0x31	; 49
    4e70:	31 05       	cpc	r19, r1
    4e72:	39 f0       	breq	.+14     	; 0x4e82 <Home_vChildren_Room_2+0x92>
    4e74:	1e c0       	rjmp	.+60     	; 0x4eb2 <Home_vChildren_Room_2+0xc2>
    4e76:	89 81       	ldd	r24, Y+1	; 0x01
    4e78:	9a 81       	ldd	r25, Y+2	; 0x02
    4e7a:	83 33       	cpi	r24, 0x33	; 51
    4e7c:	91 05       	cpc	r25, r1
    4e7e:	99 f0       	breq	.+38     	; 0x4ea6 <Home_vChildren_Room_2+0xb6>
    4e80:	18 c0       	rjmp	.+48     	; 0x4eb2 <Home_vChildren_Room_2+0xc2>
			{
			case '1':
				LED_vTog(uCCh_2_Led_1);
    4e82:	60 91 ae 05 	lds	r22, 0x05AE
    4e86:	70 91 af 05 	lds	r23, 0x05AF
    4e8a:	80 91 b0 05 	lds	r24, 0x05B0
    4e8e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4e92:	0f c0       	rjmp	.+30     	; 0x4eb2 <Home_vChildren_Room_2+0xc2>
				break;
			case '2':
				LED_vTog(uCCh_2_Led_2);
    4e94:	60 91 b1 05 	lds	r22, 0x05B1
    4e98:	70 91 b2 05 	lds	r23, 0x05B2
    4e9c:	80 91 b3 05 	lds	r24, 0x05B3
    4ea0:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    4ea4:	06 c0       	rjmp	.+12     	; 0x4eb2 <Home_vChildren_Room_2+0xc2>
				break;
			case '3' :
				Child_vFan();
    4ea6:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <Child_vFan>
    4eaa:	03 c0       	rjmp	.+6      	; 0x4eb2 <Home_vChildren_Room_2+0xc2>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4eac:	8d e0       	ldi	r24, 0x0D	; 13
    4eae:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    4eb2:	80 91 f6 05 	lds	r24, 0x05F6
    4eb6:	8d 30       	cpi	r24, 0x0D	; 13
    4eb8:	09 f0       	breq	.+2      	; 0x4ebc <Home_vChildren_Room_2+0xcc>
    4eba:	b8 cf       	rjmp	.-144    	; 0x4e2c <Home_vChildren_Room_2+0x3c>
}
    4ebc:	0f 90       	pop	r0
    4ebe:	0f 90       	pop	r0
    4ec0:	cf 91       	pop	r28
    4ec2:	df 91       	pop	r29
    4ec4:	08 95       	ret

00004ec6 <Child_vFan>:
//======================================================================================================================================//
void Child_vFan()
{
    4ec6:	df 93       	push	r29
    4ec8:	cf 93       	push	r28
    4eca:	00 d0       	rcall	.+0      	; 0x4ecc <Child_vFan+0x6>
    4ecc:	cd b7       	in	r28, 0x3d	; 61
    4ece:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Fan Control : ");
    4ed0:	89 e5       	ldi	r24, 0x59	; 89
    4ed2:	93 e0       	ldi	r25, 0x03	; 3
    4ed4:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4ed8:	8d e0       	ldi	r24, 0x0D	; 13
    4eda:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("1- Fan Off           ");
    4ede:	88 e6       	ldi	r24, 0x68	; 104
    4ee0:	93 e0       	ldi	r25, 0x03	; 3
    4ee2:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Speed 1");
    4ee6:	8e e7       	ldi	r24, 0x7E	; 126
    4ee8:	93 e0       	ldi	r25, 0x03	; 3
    4eea:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4eee:	8d e0       	ldi	r24, 0x0D	; 13
    4ef0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Speed 2           ");
    4ef4:	89 e8       	ldi	r24, 0x89	; 137
    4ef6:	93 e0       	ldi	r25, 0x03	; 3
    4ef8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("4- Speed 3");
    4efc:	8f e9       	ldi	r24, 0x9F	; 159
    4efe:	93 e0       	ldi	r25, 0x03	; 3
    4f00:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4f04:	8d e0       	ldi	r24, 0x0D	; 13
    4f06:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("5- Speed 4");
    4f0a:	8a ea       	ldi	r24, 0xAA	; 170
    4f0c:	93 e0       	ldi	r25, 0x03	; 3
    4f0e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    4f12:	8d e0       	ldi	r24, 0x0D	; 13
    4f14:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    4f18:	86 ef       	ldi	r24, 0xF6	; 246
    4f1a:	95 e0       	ldi	r25, 0x05	; 5
    4f1c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    4f20:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    4f24:	80 91 72 05 	lds	r24, 0x0572
    4f28:	88 23       	and	r24, r24
    4f2a:	09 f0       	breq	.+2      	; 0x4f2e <Child_vFan+0x68>
    4f2c:	5b c0       	rjmp	.+182    	; 0x4fe4 <Child_vFan+0x11e>
		{
			switch (KPD_Press)
    4f2e:	80 91 f6 05 	lds	r24, 0x05F6
    4f32:	28 2f       	mov	r18, r24
    4f34:	30 e0       	ldi	r19, 0x00	; 0
    4f36:	3a 83       	std	Y+2, r19	; 0x02
    4f38:	29 83       	std	Y+1, r18	; 0x01
    4f3a:	89 81       	ldd	r24, Y+1	; 0x01
    4f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f3e:	83 33       	cpi	r24, 0x33	; 51
    4f40:	91 05       	cpc	r25, r1
    4f42:	41 f1       	breq	.+80     	; 0x4f94 <Child_vFan+0xce>
    4f44:	29 81       	ldd	r18, Y+1	; 0x01
    4f46:	3a 81       	ldd	r19, Y+2	; 0x02
    4f48:	24 33       	cpi	r18, 0x34	; 52
    4f4a:	31 05       	cpc	r19, r1
    4f4c:	84 f4       	brge	.+32     	; 0x4f6e <Child_vFan+0xa8>
    4f4e:	89 81       	ldd	r24, Y+1	; 0x01
    4f50:	9a 81       	ldd	r25, Y+2	; 0x02
    4f52:	81 33       	cpi	r24, 0x31	; 49
    4f54:	91 05       	cpc	r25, r1
    4f56:	b1 f0       	breq	.+44     	; 0x4f84 <Child_vFan+0xbe>
    4f58:	29 81       	ldd	r18, Y+1	; 0x01
    4f5a:	3a 81       	ldd	r19, Y+2	; 0x02
    4f5c:	22 33       	cpi	r18, 0x32	; 50
    4f5e:	31 05       	cpc	r19, r1
    4f60:	ac f4       	brge	.+42     	; 0x4f8c <Child_vFan+0xc6>
    4f62:	89 81       	ldd	r24, Y+1	; 0x01
    4f64:	9a 81       	ldd	r25, Y+2	; 0x02
    4f66:	88 30       	cpi	r24, 0x08	; 8
    4f68:	91 05       	cpc	r25, r1
    4f6a:	01 f1       	breq	.+64     	; 0x4fac <Child_vFan+0xe6>
    4f6c:	3b c0       	rjmp	.+118    	; 0x4fe4 <Child_vFan+0x11e>
    4f6e:	29 81       	ldd	r18, Y+1	; 0x01
    4f70:	3a 81       	ldd	r19, Y+2	; 0x02
    4f72:	24 33       	cpi	r18, 0x34	; 52
    4f74:	31 05       	cpc	r19, r1
    4f76:	91 f0       	breq	.+36     	; 0x4f9c <Child_vFan+0xd6>
    4f78:	89 81       	ldd	r24, Y+1	; 0x01
    4f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f7c:	85 33       	cpi	r24, 0x35	; 53
    4f7e:	91 05       	cpc	r25, r1
    4f80:	89 f0       	breq	.+34     	; 0x4fa4 <Child_vFan+0xde>
    4f82:	30 c0       	rjmp	.+96     	; 0x4fe4 <Child_vFan+0x11e>
			{
			case '1':
				TIMER2_vSetCTC(0);
    4f84:	80 e0       	ldi	r24, 0x00	; 0
    4f86:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TIMER2_vSetCTC>
    4f8a:	2c c0       	rjmp	.+88     	; 0x4fe4 <Child_vFan+0x11e>
				break;
			case '2':
				TIMER2_vSetCTC(63);
    4f8c:	8f e3       	ldi	r24, 0x3F	; 63
    4f8e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TIMER2_vSetCTC>
    4f92:	28 c0       	rjmp	.+80     	; 0x4fe4 <Child_vFan+0x11e>
				break;
			case '3':
				TIMER2_vSetCTC(126);
    4f94:	8e e7       	ldi	r24, 0x7E	; 126
    4f96:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TIMER2_vSetCTC>
    4f9a:	24 c0       	rjmp	.+72     	; 0x4fe4 <Child_vFan+0x11e>
				break;
			case '4':
				TIMER2_vSetCTC(189);
    4f9c:	8d eb       	ldi	r24, 0xBD	; 189
    4f9e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TIMER2_vSetCTC>
    4fa2:	20 c0       	rjmp	.+64     	; 0x4fe4 <Child_vFan+0x11e>
				break;
			case '5':
				TIMER2_vSetCTC(255);
    4fa4:	8f ef       	ldi	r24, 0xFF	; 255
    4fa6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TIMER2_vSetCTC>
    4faa:	1c c0       	rjmp	.+56     	; 0x4fe4 <Child_vFan+0x11e>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    4fac:	8d e0       	ldi	r24, 0x0D	; 13
    4fae:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("Children Room Options : ");
    4fb2:	87 e1       	ldi	r24, 0x17	; 23
    4fb4:	94 e0       	ldi	r25, 0x04	; 4
    4fb6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4fba:	8d e0       	ldi	r24, 0x0D	; 13
    4fbc:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    4fc0:	87 ef       	ldi	r24, 0xF7	; 247
    4fc2:	92 e0       	ldi	r25, 0x02	; 2
    4fc4:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("2- Led2 ON/OFF");
    4fc8:	8d e0       	ldi	r24, 0x0D	; 13
    4fca:	93 e0       	ldi	r25, 0x03	; 3
    4fcc:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4fd0:	8d e0       	ldi	r24, 0x0D	; 13
    4fd2:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("3- Child Fan");
    4fd6:	8f ee       	ldi	r24, 0xEF	; 239
    4fd8:	93 e0       	ldi	r25, 0x03	; 3
    4fda:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    4fde:	8d e0       	ldi	r24, 0x0D	; 13
    4fe0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    4fe4:	80 91 f6 05 	lds	r24, 0x05F6
    4fe8:	8d 30       	cpi	r24, 0x0D	; 13
    4fea:	09 f0       	breq	.+2      	; 0x4fee <Child_vFan+0x128>
    4fec:	95 cf       	rjmp	.-214    	; 0x4f18 <Child_vFan+0x52>
}
    4fee:	0f 90       	pop	r0
    4ff0:	0f 90       	pop	r0
    4ff2:	cf 91       	pop	r28
    4ff4:	df 91       	pop	r29
    4ff6:	08 95       	ret

00004ff8 <Home_vBath_Room>:
//======================================================================================================================================//
void Home_vBath_Room()
{
    4ff8:	df 93       	push	r29
    4ffa:	cf 93       	push	r28
    4ffc:	00 d0       	rcall	.+0      	; 0x4ffe <Home_vBath_Room+0x6>
    4ffe:	cd b7       	in	r28, 0x3d	; 61
    5000:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Bath Room Options : ");
    5002:	80 e3       	ldi	r24, 0x30	; 48
    5004:	94 e0       	ldi	r25, 0x04	; 4
    5006:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    500a:	8d e0       	ldi	r24, 0x0D	; 13
    500c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	USART_u8SendStringSynch("1- Led1 ON/OFF");
    5010:	85 e4       	ldi	r24, 0x45	; 69
    5012:	94 e0       	ldi	r25, 0x04	; 4
    5014:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    5018:	8d e0       	ldi	r24, 0x0D	; 13
    501a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    501e:	86 ef       	ldi	r24, 0xF6	; 246
    5020:	95 e0       	ldi	r25, 0x05	; 5
    5022:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    5026:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    502a:	80 91 72 05 	lds	r24, 0x0572
    502e:	88 23       	and	r24, r24
    5030:	e1 f4       	brne	.+56     	; 0x506a <Home_vBath_Room+0x72>
		{
			switch (KPD_Press)
    5032:	80 91 f6 05 	lds	r24, 0x05F6
    5036:	28 2f       	mov	r18, r24
    5038:	30 e0       	ldi	r19, 0x00	; 0
    503a:	3a 83       	std	Y+2, r19	; 0x02
    503c:	29 83       	std	Y+1, r18	; 0x01
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	9a 81       	ldd	r25, Y+2	; 0x02
    5042:	88 30       	cpi	r24, 0x08	; 8
    5044:	91 05       	cpc	r25, r1
    5046:	71 f0       	breq	.+28     	; 0x5064 <Home_vBath_Room+0x6c>
    5048:	29 81       	ldd	r18, Y+1	; 0x01
    504a:	3a 81       	ldd	r19, Y+2	; 0x02
    504c:	21 33       	cpi	r18, 0x31	; 49
    504e:	31 05       	cpc	r19, r1
    5050:	61 f4       	brne	.+24     	; 0x506a <Home_vBath_Room+0x72>
			{
			case '1':
				LED_vTog(uCBthLed);
    5052:	60 91 81 05 	lds	r22, 0x0581
    5056:	70 91 82 05 	lds	r23, 0x0582
    505a:	80 91 83 05 	lds	r24, 0x0583
    505e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    5062:	03 c0       	rjmp	.+6      	; 0x506a <Home_vBath_Room+0x72>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    5064:	8d e0       	ldi	r24, 0x0D	; 13
    5066:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    506a:	80 91 f6 05 	lds	r24, 0x05F6
    506e:	8d 30       	cpi	r24, 0x0D	; 13
    5070:	b1 f6       	brne	.-84     	; 0x501e <Home_vBath_Room+0x26>
}
    5072:	0f 90       	pop	r0
    5074:	0f 90       	pop	r0
    5076:	cf 91       	pop	r28
    5078:	df 91       	pop	r29
    507a:	08 95       	ret

0000507c <Home_vKitchen>:
//======================================================================================================================================//
void Home_vKitchen()
{
    507c:	df 93       	push	r29
    507e:	cf 93       	push	r28
    5080:	00 d0       	rcall	.+0      	; 0x5082 <Home_vKitchen+0x6>
    5082:	cd b7       	in	r28, 0x3d	; 61
    5084:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Kitchen Options : ");
    5086:	84 e5       	ldi	r24, 0x54	; 84
    5088:	94 e0       	ldi	r25, 0x04	; 4
    508a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    508e:	8d e0       	ldi	r24, 0x0D	; 13
    5090:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    5094:	87 ef       	ldi	r24, 0xF7	; 247
    5096:	92 e0       	ldi	r25, 0x02	; 2
    5098:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Led2 ON/OFF");
    509c:	8d e0       	ldi	r24, 0x0D	; 13
    509e:	93 e0       	ldi	r25, 0x03	; 3
    50a0:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    50a4:	8d e0       	ldi	r24, 0x0D	; 13
    50a6:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Kitchen Fan");
    50aa:	87 e6       	ldi	r24, 0x67	; 103
    50ac:	94 e0       	ldi	r25, 0x04	; 4
    50ae:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    50b2:	8d e0       	ldi	r24, 0x0D	; 13
    50b4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    50b8:	86 ef       	ldi	r24, 0xF6	; 246
    50ba:	95 e0       	ldi	r25, 0x05	; 5
    50bc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    50c0:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    50c4:	80 91 72 05 	lds	r24, 0x0572
    50c8:	88 23       	and	r24, r24
    50ca:	09 f0       	breq	.+2      	; 0x50ce <Home_vKitchen+0x52>
    50cc:	40 c0       	rjmp	.+128    	; 0x514e <Home_vKitchen+0xd2>
		{
			switch (KPD_Press)
    50ce:	80 91 f6 05 	lds	r24, 0x05F6
    50d2:	28 2f       	mov	r18, r24
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	3a 83       	std	Y+2, r19	; 0x02
    50d8:	29 83       	std	Y+1, r18	; 0x01
    50da:	89 81       	ldd	r24, Y+1	; 0x01
    50dc:	9a 81       	ldd	r25, Y+2	; 0x02
    50de:	82 33       	cpi	r24, 0x32	; 50
    50e0:	91 05       	cpc	r25, r1
    50e2:	f9 f0       	breq	.+62     	; 0x5122 <Home_vKitchen+0xa6>
    50e4:	29 81       	ldd	r18, Y+1	; 0x01
    50e6:	3a 81       	ldd	r19, Y+2	; 0x02
    50e8:	23 33       	cpi	r18, 0x33	; 51
    50ea:	31 05       	cpc	r19, r1
    50ec:	5c f4       	brge	.+22     	; 0x5104 <Home_vKitchen+0x88>
    50ee:	89 81       	ldd	r24, Y+1	; 0x01
    50f0:	9a 81       	ldd	r25, Y+2	; 0x02
    50f2:	88 30       	cpi	r24, 0x08	; 8
    50f4:	91 05       	cpc	r25, r1
    50f6:	41 f1       	breq	.+80     	; 0x5148 <Home_vKitchen+0xcc>
    50f8:	29 81       	ldd	r18, Y+1	; 0x01
    50fa:	3a 81       	ldd	r19, Y+2	; 0x02
    50fc:	21 33       	cpi	r18, 0x31	; 49
    50fe:	31 05       	cpc	r19, r1
    5100:	39 f0       	breq	.+14     	; 0x5110 <Home_vKitchen+0x94>
    5102:	25 c0       	rjmp	.+74     	; 0x514e <Home_vKitchen+0xd2>
    5104:	89 81       	ldd	r24, Y+1	; 0x01
    5106:	9a 81       	ldd	r25, Y+2	; 0x02
    5108:	83 33       	cpi	r24, 0x33	; 51
    510a:	91 05       	cpc	r25, r1
    510c:	99 f0       	breq	.+38     	; 0x5134 <Home_vKitchen+0xb8>
    510e:	1f c0       	rjmp	.+62     	; 0x514e <Home_vKitchen+0xd2>
			{
			case '1':
				LED_vTog(uCKitLed_1);
    5110:	60 91 75 05 	lds	r22, 0x0575
    5114:	70 91 76 05 	lds	r23, 0x0576
    5118:	80 91 77 05 	lds	r24, 0x0577
    511c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    5120:	16 c0       	rjmp	.+44     	; 0x514e <Home_vKitchen+0xd2>
				break;
			case '2':
				LED_vTog(uCKitLed_2);
    5122:	60 91 78 05 	lds	r22, 0x0578
    5126:	70 91 79 05 	lds	r23, 0x0579
    512a:	80 91 7a 05 	lds	r24, 0x057A
    512e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    5132:	0d c0       	rjmp	.+26     	; 0x514e <Home_vKitchen+0xd2>
				break;
			case '3' :
				SPI_u8Tranceive(0x0F, SPI_Recieve);
    5134:	80 91 0b 06 	lds	r24, 0x060B
    5138:	88 2f       	mov	r24, r24
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	9c 01       	movw	r18, r24
    513e:	8f e0       	ldi	r24, 0x0F	; 15
    5140:	b9 01       	movw	r22, r18
    5142:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    5146:	03 c0       	rjmp	.+6      	; 0x514e <Home_vKitchen+0xd2>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    5148:	8d e0       	ldi	r24, 0x0D	; 13
    514a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    514e:	80 91 f6 05 	lds	r24, 0x05F6
    5152:	8d 30       	cpi	r24, 0x0D	; 13
    5154:	09 f0       	breq	.+2      	; 0x5158 <Home_vKitchen+0xdc>
    5156:	b0 cf       	rjmp	.-160    	; 0x50b8 <Home_vKitchen+0x3c>
}
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	cf 91       	pop	r28
    515e:	df 91       	pop	r29
    5160:	08 95       	ret

00005162 <Home_vCorridor>:
//======================================================================================================================================//
void Home_vCorridor()
{
    5162:	df 93       	push	r29
    5164:	cf 93       	push	r28
    5166:	00 d0       	rcall	.+0      	; 0x5168 <Home_vCorridor+0x6>
    5168:	cd b7       	in	r28, 0x3d	; 61
    516a:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Corridor Options : ");
    516c:	86 e7       	ldi	r24, 0x76	; 118
    516e:	94 e0       	ldi	r25, 0x04	; 4
    5170:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    5174:	8d e0       	ldi	r24, 0x0D	; 13
    5176:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    517a:	87 ef       	ldi	r24, 0xF7	; 247
    517c:	92 e0       	ldi	r25, 0x02	; 2
    517e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Led2 ON/OFF");
    5182:	8d e0       	ldi	r24, 0x0D	; 13
    5184:	93 e0       	ldi	r25, 0x03	; 3
    5186:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    518a:	8d e0       	ldi	r24, 0x0D	; 13
    518c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    5190:	86 ef       	ldi	r24, 0xF6	; 246
    5192:	95 e0       	ldi	r25, 0x05	; 5
    5194:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    5198:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    519c:	80 91 72 05 	lds	r24, 0x0572
    51a0:	88 23       	and	r24, r24
    51a2:	69 f5       	brne	.+90     	; 0x51fe <Home_vCorridor+0x9c>
		{
			switch (KPD_Press)
    51a4:	80 91 f6 05 	lds	r24, 0x05F6
    51a8:	28 2f       	mov	r18, r24
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	3a 83       	std	Y+2, r19	; 0x02
    51ae:	29 83       	std	Y+1, r18	; 0x01
    51b0:	89 81       	ldd	r24, Y+1	; 0x01
    51b2:	9a 81       	ldd	r25, Y+2	; 0x02
    51b4:	81 33       	cpi	r24, 0x31	; 49
    51b6:	91 05       	cpc	r25, r1
    51b8:	59 f0       	breq	.+22     	; 0x51d0 <Home_vCorridor+0x6e>
    51ba:	29 81       	ldd	r18, Y+1	; 0x01
    51bc:	3a 81       	ldd	r19, Y+2	; 0x02
    51be:	22 33       	cpi	r18, 0x32	; 50
    51c0:	31 05       	cpc	r19, r1
    51c2:	79 f0       	breq	.+30     	; 0x51e2 <Home_vCorridor+0x80>
    51c4:	89 81       	ldd	r24, Y+1	; 0x01
    51c6:	9a 81       	ldd	r25, Y+2	; 0x02
    51c8:	88 30       	cpi	r24, 0x08	; 8
    51ca:	91 05       	cpc	r25, r1
    51cc:	99 f0       	breq	.+38     	; 0x51f4 <Home_vCorridor+0x92>
    51ce:	17 c0       	rjmp	.+46     	; 0x51fe <Home_vCorridor+0x9c>
			{
			case '1':
				LED_vTog(uCCorLed_1);
    51d0:	60 91 84 05 	lds	r22, 0x0584
    51d4:	70 91 85 05 	lds	r23, 0x0585
    51d8:	80 91 86 05 	lds	r24, 0x0586
    51dc:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    51e0:	0e c0       	rjmp	.+28     	; 0x51fe <Home_vCorridor+0x9c>
				break;
			case '2':
				LED_vTog(uCCorLed_2);
    51e2:	60 91 87 05 	lds	r22, 0x0587
    51e6:	70 91 88 05 	lds	r23, 0x0588
    51ea:	80 91 89 05 	lds	r24, 0x0589
    51ee:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    51f2:	05 c0       	rjmp	.+10     	; 0x51fe <Home_vCorridor+0x9c>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    51f4:	8d e0       	ldi	r24, 0x0D	; 13
    51f6:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				While_Status1 = While_Break;
    51fa:	10 92 73 05 	sts	0x0573, r1
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    51fe:	80 91 f6 05 	lds	r24, 0x05F6
    5202:	8d 30       	cpi	r24, 0x0D	; 13
    5204:	29 f6       	brne	.-118    	; 0x5190 <Home_vCorridor+0x2e>
}
    5206:	0f 90       	pop	r0
    5208:	0f 90       	pop	r0
    520a:	cf 91       	pop	r28
    520c:	df 91       	pop	r29
    520e:	08 95       	ret

00005210 <Home_vBalacon>:
//======================================================================================================================================//
void Home_vBalacon()
{
    5210:	df 93       	push	r29
    5212:	cf 93       	push	r28
    5214:	00 d0       	rcall	.+0      	; 0x5216 <Home_vBalacon+0x6>
    5216:	cd b7       	in	r28, 0x3d	; 61
    5218:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Balacon Options : ");
    521a:	8a e8       	ldi	r24, 0x8A	; 138
    521c:	94 e0       	ldi	r25, 0x04	; 4
    521e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    5222:	8d e0       	ldi	r24, 0x0D	; 13
    5224:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	USART_u8SendStringSynch("1- Led1 ON/OFF       ");
    5228:	87 ef       	ldi	r24, 0xF7	; 247
    522a:	92 e0       	ldi	r25, 0x02	; 2
    522c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Led2 ON/OFF");
    5230:	8d e0       	ldi	r24, 0x0D	; 13
    5232:	93 e0       	ldi	r25, 0x03	; 3
    5234:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    5238:	8d e0       	ldi	r24, 0x0D	; 13
    523a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("3- Led1 ON/OFF       ");
    523e:	8d e9       	ldi	r24, 0x9D	; 157
    5240:	94 e0       	ldi	r25, 0x04	; 4
    5242:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("4- Led2 ON/OFF");
    5246:	83 eb       	ldi	r24, 0xB3	; 179
    5248:	94 e0       	ldi	r25, 0x04	; 4
    524a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    524e:	8d e0       	ldi	r24, 0x0D	; 13
    5250:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>

	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    5254:	86 ef       	ldi	r24, 0xF6	; 246
    5256:	95 e0       	ldi	r25, 0x05	; 5
    5258:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    525c:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    5260:	80 91 72 05 	lds	r24, 0x0572
    5264:	88 23       	and	r24, r24
    5266:	09 f0       	breq	.+2      	; 0x526a <Home_vBalacon+0x5a>
    5268:	4d c0       	rjmp	.+154    	; 0x5304 <Home_vBalacon+0xf4>
		{
			switch (KPD_Press)
    526a:	80 91 f6 05 	lds	r24, 0x05F6
    526e:	28 2f       	mov	r18, r24
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	3a 83       	std	Y+2, r19	; 0x02
    5274:	29 83       	std	Y+1, r18	; 0x01
    5276:	89 81       	ldd	r24, Y+1	; 0x01
    5278:	9a 81       	ldd	r25, Y+2	; 0x02
    527a:	82 33       	cpi	r24, 0x32	; 50
    527c:	91 05       	cpc	r25, r1
    527e:	21 f1       	breq	.+72     	; 0x52c8 <Home_vBalacon+0xb8>
    5280:	29 81       	ldd	r18, Y+1	; 0x01
    5282:	3a 81       	ldd	r19, Y+2	; 0x02
    5284:	23 33       	cpi	r18, 0x33	; 51
    5286:	31 05       	cpc	r19, r1
    5288:	5c f4       	brge	.+22     	; 0x52a0 <Home_vBalacon+0x90>
    528a:	89 81       	ldd	r24, Y+1	; 0x01
    528c:	9a 81       	ldd	r25, Y+2	; 0x02
    528e:	88 30       	cpi	r24, 0x08	; 8
    5290:	91 05       	cpc	r25, r1
    5292:	a9 f1       	breq	.+106    	; 0x52fe <Home_vBalacon+0xee>
    5294:	29 81       	ldd	r18, Y+1	; 0x01
    5296:	3a 81       	ldd	r19, Y+2	; 0x02
    5298:	21 33       	cpi	r18, 0x31	; 49
    529a:	31 05       	cpc	r19, r1
    529c:	61 f0       	breq	.+24     	; 0x52b6 <Home_vBalacon+0xa6>
    529e:	32 c0       	rjmp	.+100    	; 0x5304 <Home_vBalacon+0xf4>
    52a0:	89 81       	ldd	r24, Y+1	; 0x01
    52a2:	9a 81       	ldd	r25, Y+2	; 0x02
    52a4:	83 33       	cpi	r24, 0x33	; 51
    52a6:	91 05       	cpc	r25, r1
    52a8:	c1 f0       	breq	.+48     	; 0x52da <Home_vBalacon+0xca>
    52aa:	29 81       	ldd	r18, Y+1	; 0x01
    52ac:	3a 81       	ldd	r19, Y+2	; 0x02
    52ae:	24 33       	cpi	r18, 0x34	; 52
    52b0:	31 05       	cpc	r19, r1
    52b2:	e1 f0       	breq	.+56     	; 0x52ec <Home_vBalacon+0xdc>
    52b4:	27 c0       	rjmp	.+78     	; 0x5304 <Home_vBalacon+0xf4>
			{
			case '1':
				LED_vTog(uCBalLed_1);
    52b6:	60 91 8d 05 	lds	r22, 0x058D
    52ba:	70 91 8e 05 	lds	r23, 0x058E
    52be:	80 91 8f 05 	lds	r24, 0x058F
    52c2:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    52c6:	1e c0       	rjmp	.+60     	; 0x5304 <Home_vBalacon+0xf4>
				break;
			case '2':
				LED_vTog(uCBalLed_2);
    52c8:	60 91 90 05 	lds	r22, 0x0590
    52cc:	70 91 91 05 	lds	r23, 0x0591
    52d0:	80 91 92 05 	lds	r24, 0x0592
    52d4:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    52d8:	15 c0       	rjmp	.+42     	; 0x5304 <Home_vBalacon+0xf4>
				break;
			case '3':
				LED_vTog(uCBalLed_3);
    52da:	60 91 93 05 	lds	r22, 0x0593
    52de:	70 91 94 05 	lds	r23, 0x0594
    52e2:	80 91 95 05 	lds	r24, 0x0595
    52e6:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    52ea:	0c c0       	rjmp	.+24     	; 0x5304 <Home_vBalacon+0xf4>
				break;
			case '4':
				LED_vTog(uCBalLed_4);
    52ec:	60 91 96 05 	lds	r22, 0x0596
    52f0:	70 91 97 05 	lds	r23, 0x0597
    52f4:	80 91 98 05 	lds	r24, 0x0598
    52f8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    52fc:	03 c0       	rjmp	.+6      	; 0x5304 <Home_vBalacon+0xf4>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    52fe:	8d e0       	ldi	r24, 0x0D	; 13
    5300:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0X0D);
    5304:	80 91 f6 05 	lds	r24, 0x05F6
    5308:	8d 30       	cpi	r24, 0x0D	; 13
    530a:	09 f0       	breq	.+2      	; 0x530e <Home_vBalacon+0xfe>
    530c:	a3 cf       	rjmp	.-186    	; 0x5254 <Home_vBalacon+0x44>
}
    530e:	0f 90       	pop	r0
    5310:	0f 90       	pop	r0
    5312:	cf 91       	pop	r28
    5314:	df 91       	pop	r29
    5316:	08 95       	ret

00005318 <Reception_Door>:
//======================================================================================================================================//
void Reception_Door(void)
{
    5318:	df 93       	push	r29
    531a:	cf 93       	push	r28
    531c:	00 d0       	rcall	.+0      	; 0x531e <Reception_Door+0x6>
    531e:	cd b7       	in	r28, 0x3d	; 61
    5320:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Reception Door : ");
    5322:	82 ec       	ldi	r24, 0xC2	; 194
    5324:	94 e0       	ldi	r25, 0x04	; 4
    5326:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    532a:	8d e0       	ldi	r24, 0x0D	; 13
    532c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("1- Open              ");
    5330:	84 ed       	ldi	r24, 0xD4	; 212
    5332:	94 e0       	ldi	r25, 0x04	; 4
    5334:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Lock");
    5338:	8a ee       	ldi	r24, 0xEA	; 234
    533a:	94 e0       	ldi	r25, 0x04	; 4
    533c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    5340:	8d e0       	ldi	r24, 0x0D	; 13
    5342:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    5346:	86 ef       	ldi	r24, 0xF6	; 246
    5348:	95 e0       	ldi	r25, 0x05	; 5
    534a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    534e:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    5352:	80 91 72 05 	lds	r24, 0x0572
    5356:	88 23       	and	r24, r24
    5358:	09 f0       	breq	.+2      	; 0x535c <Reception_Door+0x44>
    535a:	4b c0       	rjmp	.+150    	; 0x53f2 <Reception_Door+0xda>
		{
			switch (KPD_Press)
    535c:	80 91 f6 05 	lds	r24, 0x05F6
    5360:	28 2f       	mov	r18, r24
    5362:	30 e0       	ldi	r19, 0x00	; 0
    5364:	3a 83       	std	Y+2, r19	; 0x02
    5366:	29 83       	std	Y+1, r18	; 0x01
    5368:	89 81       	ldd	r24, Y+1	; 0x01
    536a:	9a 81       	ldd	r25, Y+2	; 0x02
    536c:	81 33       	cpi	r24, 0x31	; 49
    536e:	91 05       	cpc	r25, r1
    5370:	59 f0       	breq	.+22     	; 0x5388 <Reception_Door+0x70>
    5372:	29 81       	ldd	r18, Y+1	; 0x01
    5374:	3a 81       	ldd	r19, Y+2	; 0x02
    5376:	22 33       	cpi	r18, 0x32	; 50
    5378:	31 05       	cpc	r19, r1
    537a:	69 f0       	breq	.+26     	; 0x5396 <Reception_Door+0x7e>
    537c:	89 81       	ldd	r24, Y+1	; 0x01
    537e:	9a 81       	ldd	r25, Y+2	; 0x02
    5380:	88 30       	cpi	r24, 0x08	; 8
    5382:	91 05       	cpc	r25, r1
    5384:	79 f0       	breq	.+30     	; 0x53a4 <Reception_Door+0x8c>
    5386:	35 c0       	rjmp	.+106    	; 0x53f2 <Reception_Door+0xda>
			{
			case '1':
				SPI_u8Tranceive(0x01, &SPI_Recieve);
    5388:	2b e0       	ldi	r18, 0x0B	; 11
    538a:	36 e0       	ldi	r19, 0x06	; 6
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	b9 01       	movw	r22, r18
    5390:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    5394:	2e c0       	rjmp	.+92     	; 0x53f2 <Reception_Door+0xda>
				break;
			case '2':
				SPI_u8Tranceive(0x02, &SPI_Recieve);
    5396:	2b e0       	ldi	r18, 0x0B	; 11
    5398:	36 e0       	ldi	r19, 0x06	; 6
    539a:	82 e0       	ldi	r24, 0x02	; 2
    539c:	b9 01       	movw	r22, r18
    539e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    53a2:	27 c0       	rjmp	.+78     	; 0x53f2 <Reception_Door+0xda>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    53a4:	8d e0       	ldi	r24, 0x0D	; 13
    53a6:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("Stair Options : ");
    53aa:	8a e7       	ldi	r24, 0x7A	; 122
    53ac:	92 e0       	ldi	r25, 0x02	; 2
    53ae:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    53b2:	8d e0       	ldi	r24, 0x0D	; 13
    53b4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("1- Reception Door    ");
    53b8:	8b e8       	ldi	r24, 0x8B	; 139
    53ba:	92 e0       	ldi	r25, 0x02	; 2
    53bc:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("2- Salon Door");
    53c0:	81 ea       	ldi	r24, 0xA1	; 161
    53c2:	92 e0       	ldi	r25, 0x02	; 2
    53c4:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    53c8:	8d e0       	ldi	r24, 0x0D	; 13
    53ca:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("3- Open Doors        ");
    53ce:	8f ea       	ldi	r24, 0xAF	; 175
    53d0:	92 e0       	ldi	r25, 0x02	; 2
    53d2:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("4- Close Doors");
    53d6:	85 ec       	ldi	r24, 0xC5	; 197
    53d8:	92 e0       	ldi	r25, 0x02	; 2
    53da:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    53de:	8d e0       	ldi	r24, 0x0D	; 13
    53e0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("5- Led ON/OFF");
    53e4:	84 ed       	ldi	r24, 0xD4	; 212
    53e6:	92 e0       	ldi	r25, 0x02	; 2
    53e8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    53ec:	8d e0       	ldi	r24, 0x0D	; 13
    53ee:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0x08);
    53f2:	80 91 f6 05 	lds	r24, 0x05F6
    53f6:	88 30       	cpi	r24, 0x08	; 8
    53f8:	09 f0       	breq	.+2      	; 0x53fc <Reception_Door+0xe4>
    53fa:	a5 cf       	rjmp	.-182    	; 0x5346 <Reception_Door+0x2e>
}
    53fc:	0f 90       	pop	r0
    53fe:	0f 90       	pop	r0
    5400:	cf 91       	pop	r28
    5402:	df 91       	pop	r29
    5404:	08 95       	ret

00005406 <Salon_Door>:
//======================================================================================================================================//
void Salon_Door()
{
    5406:	df 93       	push	r29
    5408:	cf 93       	push	r28
    540a:	00 d0       	rcall	.+0      	; 0x540c <Salon_Door+0x6>
    540c:	cd b7       	in	r28, 0x3d	; 61
    540e:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Salon Door : ");
    5410:	82 ef       	ldi	r24, 0xF2	; 242
    5412:	94 e0       	ldi	r25, 0x04	; 4
    5414:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    5418:	8d e0       	ldi	r24, 0x0D	; 13
    541a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("1- Open              ");
    541e:	84 ed       	ldi	r24, 0xD4	; 212
    5420:	94 e0       	ldi	r25, 0x04	; 4
    5422:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Lock");
    5426:	8a ee       	ldi	r24, 0xEA	; 234
    5428:	94 e0       	ldi	r25, 0x04	; 4
    542a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    542e:	8d e0       	ldi	r24, 0x0D	; 13
    5430:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    5434:	86 ef       	ldi	r24, 0xF6	; 246
    5436:	95 e0       	ldi	r25, 0x05	; 5
    5438:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    543c:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    5440:	80 91 72 05 	lds	r24, 0x0572
    5444:	88 23       	and	r24, r24
    5446:	09 f0       	breq	.+2      	; 0x544a <Salon_Door+0x44>
    5448:	4b c0       	rjmp	.+150    	; 0x54e0 <Salon_Door+0xda>
		{
			switch (KPD_Press)
    544a:	80 91 f6 05 	lds	r24, 0x05F6
    544e:	28 2f       	mov	r18, r24
    5450:	30 e0       	ldi	r19, 0x00	; 0
    5452:	3a 83       	std	Y+2, r19	; 0x02
    5454:	29 83       	std	Y+1, r18	; 0x01
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	9a 81       	ldd	r25, Y+2	; 0x02
    545a:	81 33       	cpi	r24, 0x31	; 49
    545c:	91 05       	cpc	r25, r1
    545e:	59 f0       	breq	.+22     	; 0x5476 <Salon_Door+0x70>
    5460:	29 81       	ldd	r18, Y+1	; 0x01
    5462:	3a 81       	ldd	r19, Y+2	; 0x02
    5464:	22 33       	cpi	r18, 0x32	; 50
    5466:	31 05       	cpc	r19, r1
    5468:	69 f0       	breq	.+26     	; 0x5484 <Salon_Door+0x7e>
    546a:	89 81       	ldd	r24, Y+1	; 0x01
    546c:	9a 81       	ldd	r25, Y+2	; 0x02
    546e:	88 30       	cpi	r24, 0x08	; 8
    5470:	91 05       	cpc	r25, r1
    5472:	79 f0       	breq	.+30     	; 0x5492 <Salon_Door+0x8c>
    5474:	35 c0       	rjmp	.+106    	; 0x54e0 <Salon_Door+0xda>
			{
			case '1':
				SPI_u8Tranceive(0x03, &SPI_Recieve);
    5476:	2b e0       	ldi	r18, 0x0B	; 11
    5478:	36 e0       	ldi	r19, 0x06	; 6
    547a:	83 e0       	ldi	r24, 0x03	; 3
    547c:	b9 01       	movw	r22, r18
    547e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    5482:	2e c0       	rjmp	.+92     	; 0x54e0 <Salon_Door+0xda>
				break;
			case '2':
				SPI_u8Tranceive(0x04, &SPI_Recieve);
    5484:	2b e0       	ldi	r18, 0x0B	; 11
    5486:	36 e0       	ldi	r19, 0x06	; 6
    5488:	84 e0       	ldi	r24, 0x04	; 4
    548a:	b9 01       	movw	r22, r18
    548c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    5490:	27 c0       	rjmp	.+78     	; 0x54e0 <Salon_Door+0xda>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    5492:	8d e0       	ldi	r24, 0x0D	; 13
    5494:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("Stair Options : ");
    5498:	8a e7       	ldi	r24, 0x7A	; 122
    549a:	92 e0       	ldi	r25, 0x02	; 2
    549c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    54a0:	8d e0       	ldi	r24, 0x0D	; 13
    54a2:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("1- Reception Door    ");
    54a6:	8b e8       	ldi	r24, 0x8B	; 139
    54a8:	92 e0       	ldi	r25, 0x02	; 2
    54aa:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("2- Salon Door");
    54ae:	81 ea       	ldi	r24, 0xA1	; 161
    54b0:	92 e0       	ldi	r25, 0x02	; 2
    54b2:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    54b6:	8d e0       	ldi	r24, 0x0D	; 13
    54b8:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("3- Open Doors        ");
    54bc:	8f ea       	ldi	r24, 0xAF	; 175
    54be:	92 e0       	ldi	r25, 0x02	; 2
    54c0:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendStringSynch("4- Close Doors");
    54c4:	85 ec       	ldi	r24, 0xC5	; 197
    54c6:	92 e0       	ldi	r25, 0x02	; 2
    54c8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    54cc:	8d e0       	ldi	r24, 0x0D	; 13
    54ce:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("5- Led ON/OFF");
    54d2:	84 ed       	ldi	r24, 0xD4	; 212
    54d4:	92 e0       	ldi	r25, 0x02	; 2
    54d6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    54da:	8d e0       	ldi	r24, 0x0D	; 13
    54dc:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0x08);
    54e0:	80 91 f6 05 	lds	r24, 0x05F6
    54e4:	88 30       	cpi	r24, 0x08	; 8
    54e6:	09 f0       	breq	.+2      	; 0x54ea <Salon_Door+0xe4>
    54e8:	a5 cf       	rjmp	.-182    	; 0x5434 <Salon_Door+0x2e>
}
    54ea:	0f 90       	pop	r0
    54ec:	0f 90       	pop	r0
    54ee:	cf 91       	pop	r28
    54f0:	df 91       	pop	r29
    54f2:	08 95       	ret

000054f4 <Auto_Fan_Control>:
//======================================================================================================================================//
void Auto_Fan_Control()
{
    54f4:	df 93       	push	r29
    54f6:	cf 93       	push	r28
    54f8:	00 d0       	rcall	.+0      	; 0x54fa <Auto_Fan_Control+0x6>
    54fa:	cd b7       	in	r28, 0x3d	; 61
    54fc:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Auto Fan Control");
    54fe:	80 e0       	ldi	r24, 0x00	; 0
    5500:	95 e0       	ldi	r25, 0x05	; 5
    5502:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    5506:	8d e0       	ldi	r24, 0x0D	; 13
    5508:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("1- Open              ");
    550c:	84 ed       	ldi	r24, 0xD4	; 212
    550e:	94 e0       	ldi	r25, 0x04	; 4
    5510:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendStringSynch("2- Close");
    5514:	81 e1       	ldi	r24, 0x11	; 17
    5516:	95 e0       	ldi	r25, 0x05	; 5
    5518:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    551c:	8d e0       	ldi	r24, 0x0D	; 13
    551e:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    5522:	86 ef       	ldi	r24, 0xF6	; 246
    5524:	95 e0       	ldi	r25, 0x05	; 5
    5526:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    552a:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    552e:	80 91 72 05 	lds	r24, 0x0572
    5532:	88 23       	and	r24, r24
    5534:	39 f5       	brne	.+78     	; 0x5584 <Auto_Fan_Control+0x90>
		{
			switch (KPD_Press)
    5536:	80 91 f6 05 	lds	r24, 0x05F6
    553a:	28 2f       	mov	r18, r24
    553c:	30 e0       	ldi	r19, 0x00	; 0
    553e:	3a 83       	std	Y+2, r19	; 0x02
    5540:	29 83       	std	Y+1, r18	; 0x01
    5542:	89 81       	ldd	r24, Y+1	; 0x01
    5544:	9a 81       	ldd	r25, Y+2	; 0x02
    5546:	81 33       	cpi	r24, 0x31	; 49
    5548:	91 05       	cpc	r25, r1
    554a:	59 f0       	breq	.+22     	; 0x5562 <Auto_Fan_Control+0x6e>
    554c:	29 81       	ldd	r18, Y+1	; 0x01
    554e:	3a 81       	ldd	r19, Y+2	; 0x02
    5550:	22 33       	cpi	r18, 0x32	; 50
    5552:	31 05       	cpc	r19, r1
    5554:	69 f0       	breq	.+26     	; 0x5570 <Auto_Fan_Control+0x7c>
    5556:	89 81       	ldd	r24, Y+1	; 0x01
    5558:	9a 81       	ldd	r25, Y+2	; 0x02
    555a:	88 30       	cpi	r24, 0x08	; 8
    555c:	91 05       	cpc	r25, r1
    555e:	79 f0       	breq	.+30     	; 0x557e <Auto_Fan_Control+0x8a>
    5560:	11 c0       	rjmp	.+34     	; 0x5584 <Auto_Fan_Control+0x90>
			{
			case '1':
				SPI_u8Tranceive(0x10, &SPI_Recieve);
    5562:	2b e0       	ldi	r18, 0x0B	; 11
    5564:	36 e0       	ldi	r19, 0x06	; 6
    5566:	80 e1       	ldi	r24, 0x10	; 16
    5568:	b9 01       	movw	r22, r18
    556a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    556e:	0a c0       	rjmp	.+20     	; 0x5584 <Auto_Fan_Control+0x90>
				break;
			case '2':
				SPI_u8Tranceive(0x11, &SPI_Recieve);
    5570:	2b e0       	ldi	r18, 0x0B	; 11
    5572:	36 e0       	ldi	r19, 0x06	; 6
    5574:	81 e1       	ldi	r24, 0x11	; 17
    5576:	b9 01       	movw	r22, r18
    5578:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_u8Tranceive>
    557c:	03 c0       	rjmp	.+6      	; 0x5584 <Auto_Fan_Control+0x90>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    557e:	8d e0       	ldi	r24, 0x0D	; 13
    5580:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0x08);
    5584:	80 91 f6 05 	lds	r24, 0x05F6
    5588:	88 30       	cpi	r24, 0x08	; 8
    558a:	59 f6       	brne	.-106    	; 0x5522 <Auto_Fan_Control+0x2e>

}
    558c:	0f 90       	pop	r0
    558e:	0f 90       	pop	r0
    5590:	cf 91       	pop	r28
    5592:	df 91       	pop	r29
    5594:	08 95       	ret

00005596 <Home_vSetting>:
//======================================================================================================================================//
void Home_vSetting()
{
    5596:	df 93       	push	r29
    5598:	cf 93       	push	r28
    559a:	00 d0       	rcall	.+0      	; 0x559c <Home_vSetting+0x6>
    559c:	cd b7       	in	r28, 0x3d	; 61
    559e:	de b7       	in	r29, 0x3e	; 62
	USART_u8SendStringSynch("Setting:");
    55a0:	8a e1       	ldi	r24, 0x1A	; 26
    55a2:	95 e0       	ldi	r25, 0x05	; 5
    55a4:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    55a8:	8d e0       	ldi	r24, 0x0D	; 13
    55aa:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("1- Change UserName");
    55ae:	83 e2       	ldi	r24, 0x23	; 35
    55b0:	95 e0       	ldi	r25, 0x05	; 5
    55b2:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    55b6:	8d e0       	ldi	r24, 0x0D	; 13
    55b8:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("2- Change PassWord");
    55bc:	86 e3       	ldi	r24, 0x36	; 54
    55be:	95 e0       	ldi	r25, 0x05	; 5
    55c0:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    55c4:	8d e0       	ldi	r24, 0x0D	; 13
    55c6:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	USART_u8SendStringSynch("2- Change UserName & PassWord");
    55ca:	89 e4       	ldi	r24, 0x49	; 73
    55cc:	95 e0       	ldi	r25, 0x05	; 5
    55ce:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
	USART_u8SendData(0X0D);
    55d2:	8d e0       	ldi	r24, 0x0D	; 13
    55d4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
	do
	{
		Error_State = USART_u8ReceiveData(&KPD_Press);
    55d8:	86 ef       	ldi	r24, 0xF6	; 246
    55da:	95 e0       	ldi	r25, 0x05	; 5
    55dc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <USART_u8ReceiveData>
    55e0:	80 93 72 05 	sts	0x0572, r24
		if (Error_State == OK)
    55e4:	80 91 72 05 	lds	r24, 0x0572
    55e8:	88 23       	and	r24, r24
    55ea:	09 f0       	breq	.+2      	; 0x55ee <Home_vSetting+0x58>
    55ec:	a3 c0       	rjmp	.+326    	; 0x5734 <Home_vSetting+0x19e>
		{
			switch (KPD_Press)
    55ee:	80 91 f6 05 	lds	r24, 0x05F6
    55f2:	28 2f       	mov	r18, r24
    55f4:	30 e0       	ldi	r19, 0x00	; 0
    55f6:	3a 83       	std	Y+2, r19	; 0x02
    55f8:	29 83       	std	Y+1, r18	; 0x01
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	9a 81       	ldd	r25, Y+2	; 0x02
    55fe:	82 33       	cpi	r24, 0x32	; 50
    5600:	91 05       	cpc	r25, r1
    5602:	09 f4       	brne	.+2      	; 0x5606 <Home_vSetting+0x70>
    5604:	3f c0       	rjmp	.+126    	; 0x5684 <Home_vSetting+0xee>
    5606:	29 81       	ldd	r18, Y+1	; 0x01
    5608:	3a 81       	ldd	r19, Y+2	; 0x02
    560a:	23 33       	cpi	r18, 0x33	; 51
    560c:	31 05       	cpc	r19, r1
    560e:	64 f4       	brge	.+24     	; 0x5628 <Home_vSetting+0x92>
    5610:	89 81       	ldd	r24, Y+1	; 0x01
    5612:	9a 81       	ldd	r25, Y+2	; 0x02
    5614:	88 30       	cpi	r24, 0x08	; 8
    5616:	91 05       	cpc	r25, r1
    5618:	09 f4       	brne	.+2      	; 0x561c <Home_vSetting+0x86>
    561a:	89 c0       	rjmp	.+274    	; 0x572e <Home_vSetting+0x198>
    561c:	29 81       	ldd	r18, Y+1	; 0x01
    561e:	3a 81       	ldd	r19, Y+2	; 0x02
    5620:	21 33       	cpi	r18, 0x31	; 49
    5622:	31 05       	cpc	r19, r1
    5624:	41 f0       	breq	.+16     	; 0x5636 <Home_vSetting+0xa0>
    5626:	86 c0       	rjmp	.+268    	; 0x5734 <Home_vSetting+0x19e>
    5628:	89 81       	ldd	r24, Y+1	; 0x01
    562a:	9a 81       	ldd	r25, Y+2	; 0x02
    562c:	83 33       	cpi	r24, 0x33	; 51
    562e:	91 05       	cpc	r25, r1
    5630:	09 f4       	brne	.+2      	; 0x5634 <Home_vSetting+0x9e>
    5632:	4f c0       	rjmp	.+158    	; 0x56d2 <Home_vSetting+0x13c>
    5634:	7f c0       	rjmp	.+254    	; 0x5734 <Home_vSetting+0x19e>
			{
			case '1':
				USART_u8SendData(0X0D);
    5636:	8d e0       	ldi	r24, 0x0D	; 13
    5638:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				EEPROM_vWrite(EEPROM_UserNameStatus, 0XFF);
    563c:	80 e1       	ldi	r24, 0x10	; 16
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	6f ef       	ldi	r22, 0xFF	; 255
    5642:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
				UserName_Set();
    5646:	0e 94 25 1c 	call	0x384a	; 0x384a <UserName_Set>
				USART_u8SendStringSynch("Setting:");
    564a:	8a e1       	ldi	r24, 0x1A	; 26
    564c:	95 e0       	ldi	r25, 0x05	; 5
    564e:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    5652:	8d e0       	ldi	r24, 0x0D	; 13
    5654:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("1- Change UserName");
    5658:	83 e2       	ldi	r24, 0x23	; 35
    565a:	95 e0       	ldi	r25, 0x05	; 5
    565c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    5660:	8d e0       	ldi	r24, 0x0D	; 13
    5662:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("2- Change PassWord");
    5666:	86 e3       	ldi	r24, 0x36	; 54
    5668:	95 e0       	ldi	r25, 0x05	; 5
    566a:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    566e:	8d e0       	ldi	r24, 0x0D	; 13
    5670:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("2- Change UserName & PassWord");
    5674:	89 e4       	ldi	r24, 0x49	; 73
    5676:	95 e0       	ldi	r25, 0x05	; 5
    5678:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    567c:	8d e0       	ldi	r24, 0x0D	; 13
    567e:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
    5682:	58 c0       	rjmp	.+176    	; 0x5734 <Home_vSetting+0x19e>
				break;
			case '2':
				USART_u8SendData(0X0D);
    5684:	8d e0       	ldi	r24, 0x0D	; 13
    5686:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				EEPROM_vWrite(EEPROM_PassWordStatus, 0XFF);
    568a:	81 e1       	ldi	r24, 0x11	; 17
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	6f ef       	ldi	r22, 0xFF	; 255
    5690:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
				PassWord_Set();
    5694:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <PassWord_Set>
				USART_u8SendStringSynch("Setting:");
    5698:	8a e1       	ldi	r24, 0x1A	; 26
    569a:	95 e0       	ldi	r25, 0x05	; 5
    569c:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    56a0:	8d e0       	ldi	r24, 0x0D	; 13
    56a2:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("1- Change UserName");
    56a6:	83 e2       	ldi	r24, 0x23	; 35
    56a8:	95 e0       	ldi	r25, 0x05	; 5
    56aa:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    56ae:	8d e0       	ldi	r24, 0x0D	; 13
    56b0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("2- Change PassWord");
    56b4:	86 e3       	ldi	r24, 0x36	; 54
    56b6:	95 e0       	ldi	r25, 0x05	; 5
    56b8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    56bc:	8d e0       	ldi	r24, 0x0D	; 13
    56be:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("2- Change UserName & PassWord");
    56c2:	89 e4       	ldi	r24, 0x49	; 73
    56c4:	95 e0       	ldi	r25, 0x05	; 5
    56c6:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    56ca:	8d e0       	ldi	r24, 0x0D	; 13
    56cc:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
    56d0:	31 c0       	rjmp	.+98     	; 0x5734 <Home_vSetting+0x19e>
				break;
			case '3':
				USART_u8SendData(0X0D);
    56d2:	8d e0       	ldi	r24, 0x0D	; 13
    56d4:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				EEPROM_vWrite(EEPROM_UserNameStatus, 0XFF);
    56d8:	80 e1       	ldi	r24, 0x10	; 16
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	6f ef       	ldi	r22, 0xFF	; 255
    56de:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
				EEPROM_vWrite(EEPROM_PassWordStatus, 0XFF);
    56e2:	81 e1       	ldi	r24, 0x11	; 17
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	6f ef       	ldi	r22, 0xFF	; 255
    56e8:	0e 94 00 13 	call	0x2600	; 0x2600 <EEPROM_vWrite>
				UserName_Set();
    56ec:	0e 94 25 1c 	call	0x384a	; 0x384a <UserName_Set>
				PassWord_Set();
    56f0:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <PassWord_Set>
				USART_u8SendStringSynch("Setting:");
    56f4:	8a e1       	ldi	r24, 0x1A	; 26
    56f6:	95 e0       	ldi	r25, 0x05	; 5
    56f8:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    56fc:	8d e0       	ldi	r24, 0x0D	; 13
    56fe:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("1- Change UserName");
    5702:	83 e2       	ldi	r24, 0x23	; 35
    5704:	95 e0       	ldi	r25, 0x05	; 5
    5706:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    570a:	8d e0       	ldi	r24, 0x0D	; 13
    570c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("2- Change PassWord");
    5710:	86 e3       	ldi	r24, 0x36	; 54
    5712:	95 e0       	ldi	r25, 0x05	; 5
    5714:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    5718:	8d e0       	ldi	r24, 0x0D	; 13
    571a:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				USART_u8SendStringSynch("2- Change UserName & PassWord");
    571e:	89 e4       	ldi	r24, 0x49	; 73
    5720:	95 e0       	ldi	r25, 0x05	; 5
    5722:	0e 94 d6 06 	call	0xdac	; 0xdac <USART_u8SendStringSynch>
				USART_u8SendData(0X0D);
    5726:	8d e0       	ldi	r24, 0x0D	; 13
    5728:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
    572c:	03 c0       	rjmp	.+6      	; 0x5734 <Home_vSetting+0x19e>
				break;
			case 0x08 :
				USART_u8SendData(0X0D);
    572e:	8d e0       	ldi	r24, 0x0D	; 13
    5730:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_u8SendData>
				break;
			default :
				break;
			}
		}
	}while (KPD_Press != 0x08);
    5734:	80 91 f6 05 	lds	r24, 0x05F6
    5738:	88 30       	cpi	r24, 0x08	; 8
    573a:	09 f0       	breq	.+2      	; 0x573e <Home_vSetting+0x1a8>
    573c:	4d cf       	rjmp	.-358    	; 0x55d8 <Home_vSetting+0x42>
}
    573e:	0f 90       	pop	r0
    5740:	0f 90       	pop	r0
    5742:	cf 91       	pop	r28
    5744:	df 91       	pop	r29
    5746:	08 95       	ret

00005748 <ISR_EXTI_Interrupt>:

//======================================================================================================================================//

void ISR_EXTI_Interrupt(void)
{
    5748:	df 93       	push	r29
    574a:	cf 93       	push	r28
    574c:	cd b7       	in	r28, 0x3d	; 61
    574e:	de b7       	in	r29, 0x3e	; 62
    5750:	2e 97       	sbiw	r28, 0x0e	; 14
    5752:	0f b6       	in	r0, 0x3f	; 63
    5754:	f8 94       	cli
    5756:	de bf       	out	0x3e, r29	; 62
    5758:	0f be       	out	0x3f, r0	; 63
    575a:	cd bf       	out	0x3d, r28	; 61
	LED_vTog(uCKitLed_1);
    575c:	60 91 75 05 	lds	r22, 0x0575
    5760:	70 91 76 05 	lds	r23, 0x0576
    5764:	80 91 77 05 	lds	r24, 0x0577
    5768:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCKitLed_2);
    576c:	60 91 78 05 	lds	r22, 0x0578
    5770:	70 91 79 05 	lds	r23, 0x0579
    5774:	80 91 7a 05 	lds	r24, 0x057A
    5778:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCBedLed_1);
    577c:	60 91 7b 05 	lds	r22, 0x057B
    5780:	70 91 7c 05 	lds	r23, 0x057C
    5784:	80 91 7d 05 	lds	r24, 0x057D
    5788:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCBedLed_2);
    578c:	60 91 7e 05 	lds	r22, 0x057E
    5790:	70 91 7f 05 	lds	r23, 0x057F
    5794:	80 91 80 05 	lds	r24, 0x0580
    5798:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCBthLed);
    579c:	60 91 81 05 	lds	r22, 0x0581
    57a0:	70 91 82 05 	lds	r23, 0x0582
    57a4:	80 91 83 05 	lds	r24, 0x0583
    57a8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCCorLed_1);
    57ac:	60 91 84 05 	lds	r22, 0x0584
    57b0:	70 91 85 05 	lds	r23, 0x0585
    57b4:	80 91 86 05 	lds	r24, 0x0586
    57b8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCCorLed_2);
    57bc:	60 91 87 05 	lds	r22, 0x0587
    57c0:	70 91 88 05 	lds	r23, 0x0588
    57c4:	80 91 89 05 	lds	r24, 0x0589
    57c8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCStairLed);
    57cc:	60 91 8a 05 	lds	r22, 0x058A
    57d0:	70 91 8b 05 	lds	r23, 0x058B
    57d4:	80 91 8c 05 	lds	r24, 0x058C
    57d8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCBalLed_1);
    57dc:	60 91 8d 05 	lds	r22, 0x058D
    57e0:	70 91 8e 05 	lds	r23, 0x058E
    57e4:	80 91 8f 05 	lds	r24, 0x058F
    57e8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCBalLed_2);
    57ec:	60 91 90 05 	lds	r22, 0x0590
    57f0:	70 91 91 05 	lds	r23, 0x0591
    57f4:	80 91 92 05 	lds	r24, 0x0592
    57f8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCBalLed_3);
    57fc:	60 91 93 05 	lds	r22, 0x0593
    5800:	70 91 94 05 	lds	r23, 0x0594
    5804:	80 91 95 05 	lds	r24, 0x0595
    5808:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCBalLed_4);
    580c:	60 91 96 05 	lds	r22, 0x0596
    5810:	70 91 97 05 	lds	r23, 0x0597
    5814:	80 91 98 05 	lds	r24, 0x0598
    5818:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCSalLed_1);
    581c:	60 91 99 05 	lds	r22, 0x0599
    5820:	70 91 9a 05 	lds	r23, 0x059A
    5824:	80 91 9b 05 	lds	r24, 0x059B
    5828:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCSalLed_2);
    582c:	60 91 9c 05 	lds	r22, 0x059C
    5830:	70 91 9d 05 	lds	r23, 0x059D
    5834:	80 91 9e 05 	lds	r24, 0x059E
    5838:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCRecLed_1);
    583c:	60 91 9f 05 	lds	r22, 0x059F
    5840:	70 91 a0 05 	lds	r23, 0x05A0
    5844:	80 91 a1 05 	lds	r24, 0x05A1
    5848:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCRecLed_2);
    584c:	60 91 a2 05 	lds	r22, 0x05A2
    5850:	70 91 a3 05 	lds	r23, 0x05A3
    5854:	80 91 a4 05 	lds	r24, 0x05A4
    5858:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCRecLed_3);
    585c:	60 91 a5 05 	lds	r22, 0x05A5
    5860:	70 91 a6 05 	lds	r23, 0x05A6
    5864:	80 91 a7 05 	lds	r24, 0x05A7
    5868:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCCh_1_Led_1);
    586c:	60 91 a8 05 	lds	r22, 0x05A8
    5870:	70 91 a9 05 	lds	r23, 0x05A9
    5874:	80 91 aa 05 	lds	r24, 0x05AA
    5878:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCCh_1_Led_2);
    587c:	60 91 ab 05 	lds	r22, 0x05AB
    5880:	70 91 ac 05 	lds	r23, 0x05AC
    5884:	80 91 ad 05 	lds	r24, 0x05AD
    5888:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCCh_2_Led_1);
    588c:	60 91 ae 05 	lds	r22, 0x05AE
    5890:	70 91 af 05 	lds	r23, 0x05AF
    5894:	80 91 b0 05 	lds	r24, 0x05B0
    5898:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
	LED_vTog(uCCh_2_Led_2);
    589c:	60 91 b1 05 	lds	r22, 0x05B1
    58a0:	70 91 b2 05 	lds	r23, 0x05B2
    58a4:	80 91 b3 05 	lds	r24, 0x05B3
    58a8:	0e 94 b1 1b 	call	0x3762	; 0x3762 <LED_vTog>
    58ac:	80 e0       	ldi	r24, 0x00	; 0
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	a8 ec       	ldi	r26, 0xC8	; 200
    58b2:	b2 e4       	ldi	r27, 0x42	; 66
    58b4:	8b 87       	std	Y+11, r24	; 0x0b
    58b6:	9c 87       	std	Y+12, r25	; 0x0c
    58b8:	ad 87       	std	Y+13, r26	; 0x0d
    58ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    58be:	7c 85       	ldd	r23, Y+12	; 0x0c
    58c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    58c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    58c4:	20 e0       	ldi	r18, 0x00	; 0
    58c6:	30 e0       	ldi	r19, 0x00	; 0
    58c8:	4a ef       	ldi	r20, 0xFA	; 250
    58ca:	54 e4       	ldi	r21, 0x44	; 68
    58cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d0:	dc 01       	movw	r26, r24
    58d2:	cb 01       	movw	r24, r22
    58d4:	8f 83       	std	Y+7, r24	; 0x07
    58d6:	98 87       	std	Y+8, r25	; 0x08
    58d8:	a9 87       	std	Y+9, r26	; 0x09
    58da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58dc:	6f 81       	ldd	r22, Y+7	; 0x07
    58de:	78 85       	ldd	r23, Y+8	; 0x08
    58e0:	89 85       	ldd	r24, Y+9	; 0x09
    58e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58e4:	20 e0       	ldi	r18, 0x00	; 0
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	40 e8       	ldi	r20, 0x80	; 128
    58ea:	5f e3       	ldi	r21, 0x3F	; 63
    58ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    58f0:	88 23       	and	r24, r24
    58f2:	2c f4       	brge	.+10     	; 0x58fe <ISR_EXTI_Interrupt+0x1b6>
		__ticks = 1;
    58f4:	81 e0       	ldi	r24, 0x01	; 1
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	9e 83       	std	Y+6, r25	; 0x06
    58fa:	8d 83       	std	Y+5, r24	; 0x05
    58fc:	3f c0       	rjmp	.+126    	; 0x597c <ISR_EXTI_Interrupt+0x234>
	else if (__tmp > 65535)
    58fe:	6f 81       	ldd	r22, Y+7	; 0x07
    5900:	78 85       	ldd	r23, Y+8	; 0x08
    5902:	89 85       	ldd	r24, Y+9	; 0x09
    5904:	9a 85       	ldd	r25, Y+10	; 0x0a
    5906:	20 e0       	ldi	r18, 0x00	; 0
    5908:	3f ef       	ldi	r19, 0xFF	; 255
    590a:	4f e7       	ldi	r20, 0x7F	; 127
    590c:	57 e4       	ldi	r21, 0x47	; 71
    590e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5912:	18 16       	cp	r1, r24
    5914:	4c f5       	brge	.+82     	; 0x5968 <ISR_EXTI_Interrupt+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5916:	6b 85       	ldd	r22, Y+11	; 0x0b
    5918:	7c 85       	ldd	r23, Y+12	; 0x0c
    591a:	8d 85       	ldd	r24, Y+13	; 0x0d
    591c:	9e 85       	ldd	r25, Y+14	; 0x0e
    591e:	20 e0       	ldi	r18, 0x00	; 0
    5920:	30 e0       	ldi	r19, 0x00	; 0
    5922:	40 e2       	ldi	r20, 0x20	; 32
    5924:	51 e4       	ldi	r21, 0x41	; 65
    5926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    592a:	dc 01       	movw	r26, r24
    592c:	cb 01       	movw	r24, r22
    592e:	bc 01       	movw	r22, r24
    5930:	cd 01       	movw	r24, r26
    5932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5936:	dc 01       	movw	r26, r24
    5938:	cb 01       	movw	r24, r22
    593a:	9e 83       	std	Y+6, r25	; 0x06
    593c:	8d 83       	std	Y+5, r24	; 0x05
    593e:	0f c0       	rjmp	.+30     	; 0x595e <ISR_EXTI_Interrupt+0x216>
    5940:	88 ec       	ldi	r24, 0xC8	; 200
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	9c 83       	std	Y+4, r25	; 0x04
    5946:	8b 83       	std	Y+3, r24	; 0x03
    5948:	8b 81       	ldd	r24, Y+3	; 0x03
    594a:	9c 81       	ldd	r25, Y+4	; 0x04
    594c:	01 97       	sbiw	r24, 0x01	; 1
    594e:	f1 f7       	brne	.-4      	; 0x594c <ISR_EXTI_Interrupt+0x204>
    5950:	9c 83       	std	Y+4, r25	; 0x04
    5952:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5954:	8d 81       	ldd	r24, Y+5	; 0x05
    5956:	9e 81       	ldd	r25, Y+6	; 0x06
    5958:	01 97       	sbiw	r24, 0x01	; 1
    595a:	9e 83       	std	Y+6, r25	; 0x06
    595c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    595e:	8d 81       	ldd	r24, Y+5	; 0x05
    5960:	9e 81       	ldd	r25, Y+6	; 0x06
    5962:	00 97       	sbiw	r24, 0x00	; 0
    5964:	69 f7       	brne	.-38     	; 0x5940 <ISR_EXTI_Interrupt+0x1f8>
    5966:	14 c0       	rjmp	.+40     	; 0x5990 <ISR_EXTI_Interrupt+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5968:	6f 81       	ldd	r22, Y+7	; 0x07
    596a:	78 85       	ldd	r23, Y+8	; 0x08
    596c:	89 85       	ldd	r24, Y+9	; 0x09
    596e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5974:	dc 01       	movw	r26, r24
    5976:	cb 01       	movw	r24, r22
    5978:	9e 83       	std	Y+6, r25	; 0x06
    597a:	8d 83       	std	Y+5, r24	; 0x05
    597c:	8d 81       	ldd	r24, Y+5	; 0x05
    597e:	9e 81       	ldd	r25, Y+6	; 0x06
    5980:	9a 83       	std	Y+2, r25	; 0x02
    5982:	89 83       	std	Y+1, r24	; 0x01
    5984:	89 81       	ldd	r24, Y+1	; 0x01
    5986:	9a 81       	ldd	r25, Y+2	; 0x02
    5988:	01 97       	sbiw	r24, 0x01	; 1
    598a:	f1 f7       	brne	.-4      	; 0x5988 <ISR_EXTI_Interrupt+0x240>
    598c:	9a 83       	std	Y+2, r25	; 0x02
    598e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    5990:	2e 96       	adiw	r28, 0x0e	; 14
    5992:	0f b6       	in	r0, 0x3f	; 63
    5994:	f8 94       	cli
    5996:	de bf       	out	0x3e, r29	; 62
    5998:	0f be       	out	0x3f, r0	; 63
    599a:	cd bf       	out	0x3d, r28	; 61
    599c:	cf 91       	pop	r28
    599e:	df 91       	pop	r29
    59a0:	08 95       	ret

000059a2 <__udivmodqi4>:
    59a2:	99 1b       	sub	r25, r25
    59a4:	79 e0       	ldi	r23, 0x09	; 9
    59a6:	04 c0       	rjmp	.+8      	; 0x59b0 <__udivmodqi4_ep>

000059a8 <__udivmodqi4_loop>:
    59a8:	99 1f       	adc	r25, r25
    59aa:	96 17       	cp	r25, r22
    59ac:	08 f0       	brcs	.+2      	; 0x59b0 <__udivmodqi4_ep>
    59ae:	96 1b       	sub	r25, r22

000059b0 <__udivmodqi4_ep>:
    59b0:	88 1f       	adc	r24, r24
    59b2:	7a 95       	dec	r23
    59b4:	c9 f7       	brne	.-14     	; 0x59a8 <__udivmodqi4_loop>
    59b6:	80 95       	com	r24
    59b8:	08 95       	ret

000059ba <__prologue_saves__>:
    59ba:	2f 92       	push	r2
    59bc:	3f 92       	push	r3
    59be:	4f 92       	push	r4
    59c0:	5f 92       	push	r5
    59c2:	6f 92       	push	r6
    59c4:	7f 92       	push	r7
    59c6:	8f 92       	push	r8
    59c8:	9f 92       	push	r9
    59ca:	af 92       	push	r10
    59cc:	bf 92       	push	r11
    59ce:	cf 92       	push	r12
    59d0:	df 92       	push	r13
    59d2:	ef 92       	push	r14
    59d4:	ff 92       	push	r15
    59d6:	0f 93       	push	r16
    59d8:	1f 93       	push	r17
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	cd b7       	in	r28, 0x3d	; 61
    59e0:	de b7       	in	r29, 0x3e	; 62
    59e2:	ca 1b       	sub	r28, r26
    59e4:	db 0b       	sbc	r29, r27
    59e6:	0f b6       	in	r0, 0x3f	; 63
    59e8:	f8 94       	cli
    59ea:	de bf       	out	0x3e, r29	; 62
    59ec:	0f be       	out	0x3f, r0	; 63
    59ee:	cd bf       	out	0x3d, r28	; 61
    59f0:	09 94       	ijmp

000059f2 <__epilogue_restores__>:
    59f2:	2a 88       	ldd	r2, Y+18	; 0x12
    59f4:	39 88       	ldd	r3, Y+17	; 0x11
    59f6:	48 88       	ldd	r4, Y+16	; 0x10
    59f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    59fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    59fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    59fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a00:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a02:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a04:	b9 84       	ldd	r11, Y+9	; 0x09
    5a06:	c8 84       	ldd	r12, Y+8	; 0x08
    5a08:	df 80       	ldd	r13, Y+7	; 0x07
    5a0a:	ee 80       	ldd	r14, Y+6	; 0x06
    5a0c:	fd 80       	ldd	r15, Y+5	; 0x05
    5a0e:	0c 81       	ldd	r16, Y+4	; 0x04
    5a10:	1b 81       	ldd	r17, Y+3	; 0x03
    5a12:	aa 81       	ldd	r26, Y+2	; 0x02
    5a14:	b9 81       	ldd	r27, Y+1	; 0x01
    5a16:	ce 0f       	add	r28, r30
    5a18:	d1 1d       	adc	r29, r1
    5a1a:	0f b6       	in	r0, 0x3f	; 63
    5a1c:	f8 94       	cli
    5a1e:	de bf       	out	0x3e, r29	; 62
    5a20:	0f be       	out	0x3f, r0	; 63
    5a22:	cd bf       	out	0x3d, r28	; 61
    5a24:	ed 01       	movw	r28, r26
    5a26:	08 95       	ret

00005a28 <_exit>:
    5a28:	f8 94       	cli

00005a2a <__stop_program>:
    5a2a:	ff cf       	rjmp	.-2      	; 0x5a2a <__stop_program>
